{
	"AddAdView": {
		"desc": "Creates and adds a AdView to a Layout.\nSee @CreateAdView for full documentation.",
		"name": "AddAdView",
		"pNames": ["layout", "unitId", "testId", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "str", "num_frc", "num_frc", "str"],
		"retval": "dso-AdView",
		"shortDesc": "Create and add AdView to Layout."
	},
	"AddButton": {
		"desc": "Creates and adds a Button to a Layout.\nSee @CreateButton for full documentation.",
		"name": "AddButton",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Button",
		"shortDesc": "Create and add Button to Layout."
	},
	"AddCameraView": {
		"desc": "Creates and adds a CameraView to a Layout.\nSee @CreateCameraView for full documentation.",
		"name": "AddCameraView",
		"pNames": ["layout", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str_com-Front,UseBitmap,UseABGR,NoRotate,\"&lt;resolution&gt;\":\"CIF: 352x288\\\\nQQVGA: 160x120\\\\nQVGA: 320x240\\\\nSVGA: 800x600\\\\nVGA: 640x480\\\\nXGA: 1024x768\\\\nUXGA: 1600x1200\""],
		"retval": "dso-CameraView",
		"shortDesc": "Create and add CameraView to Layout."
	},
	"AddCheckBox": {
		"desc": "Creates and adds a CheckBox to a Layout.\nSee @CreateCheckBox for full documentation.",
		"name": "AddCheckBox",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-FillX/Y,NoSound"],
		"retval": "dso-CheckBox",
		"shortDesc": "Create and add CheckBox to Layout."
	},
	"AddCodeEdit": {
		"desc": "Creates and adds a CodeEdit to a Layout.\nSee @CreateCodeEdit for full documentation.",
		"name": "AddCodeEdit",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-FillX/Y"],
		"retval": "dso-CodeEdit",
		"shortDesc": "Create and add CodeEdit to Layout."
	},
	"AddDrawer": {
		"desc": "AddDrawer adds layout as drawer on a given side. If the user swipes from this side to the other the layout will slide out.\n\nSee Also: @OpenDrawer, @CloseDrawer, @RemoveDrawer",
		"name": "AddDrawer",
		"pNames": ["layout", "side", "width"],
		"pTypes": ["dso-CreateLayout", "str-left|right", "num_frc"],
		"shortDesc": "Adds a slide-able layout on given side"
	},
	"AddImage": {
		"desc": "Creates and adds a Image to a Layout.\nSee @CreateImage for full documentation.",
		"name": "AddImage",
		"pNames": ["layout", "file", "width", "height", "options", "pxw", "pxh"],
		"pTypes": ["dso-CreateLayout", "str_pth", "num", "num", "str_com-fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically", "num_pxl", "num_pxl"],
		"retval": "dso-Image",
		"shortDesc": "Create and add Image to Layout."
	},
	"AddLayout": {
		"desc": "AddLayout adds a layout to the screen so that it is visible (if not hidden with SetVisibility)\nWhen @CreateLayout arguments are passed it will create the layout just like app.CreateLayout and also add it.\n\nSee Also: @RemoveLayout",
		"name": "AddLayout",
		"pNames": ["layout", "type", "options"],
		"pTypes": ["dso-CreateLayout", "str-Linear|Absolute|Frame|Card", "str-TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y"],
		"shortDesc": "Adds a layout to the app"
	},
	"AddList": {
		"desc": "Creates and adds a List to a Layout.\nSee @CreateList for full documentation.",
		"name": "AddList",
		"pNames": ["layout", "list", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound"],
		"retval": "dso-List",
		"shortDesc": "Create and add List to Layout."
	},
	"AddScroller": {
		"desc": "Creates and adds a Scroller to a Layout.\nSee @CreateScroller for full documentation.",
		"name": "AddScroller",
		"pNames": ["layout", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str_com-FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade"],
		"retval": "dso-Scroller",
		"shortDesc": "Create and add Scroller to Layout."
	},
	"AddSeekBar": {
		"desc": "Creates and adds a SeekBar to a Layout.\nSee @CreateSeekBar for full documentation.",
		"name": "AddSeekBar",
		"pNames": ["layout", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str_com-FillX/Y"],
		"retval": "dso-SeekBar",
		"shortDesc": "Create and add SeekBar to Layout."
	},
	"AddSpinner": {
		"desc": "Creates and adds a Spinner to a Layout.\nSee @CreateSpinner for full documentation.",
		"name": "AddSpinner",
		"pNames": ["layout", "list", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str_com", "num_frc", "num_frc", "str_com-FillX/Y,NoSound"],
		"retval": "dso-Spinner",
		"shortDesc": "Create and add Spinner to Layout."
	},
	"AddSwitch": {
		"desc": "Creates and adds a Switch to a Layout.\nSee @CreateToggle for full documentation.",
		"name": "AddSwitch",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-Monospace,Custom,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Switch",
		"shortDesc": "Create and add Switch to Layout."
	},
	"AddText": {
		"desc": "Creates and adds a Text to a Layout.\nSee @CreateText for full documentation.",
		"name": "AddText",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-AutoScale,AutoSize,Multiline,Left|Right,Html,Bold,Monospace,NoWrap,Log,FillX/Y"],
		"retval": "dso-Text",
		"shortDesc": "Create and add Text to Layout."
	},
	"AddTextEdit": {
		"desc": "Creates and adds a TextEdit to a Layout.\nSee @CreateTextEdit for full documentation.",
		"name": "AddTextEdit",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots"],
		"retval": "dso-TextEdit",
		"shortDesc": "Create and add TextEdit to Layout."
	},
	"AddToggle": {
		"desc": "Creates and adds a Toggle to a Layout.\nSee @CreateToggle for full documentation.",
		"name": "AddToggle",
		"pNames": ["layout", "text", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "str", "num_frc", "num_frc", "str_com-Monospace,Custom,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Toggle",
		"shortDesc": "Create and add Toggle to Layout."
	},
	"AddVideoView": {
		"desc": "Creates and adds a VideoView to a Layout.\nSee @CreateVideoView for full documentation.",
		"name": "AddVideoView",
		"pNames": ["layout", "width", "height", "options"],
		"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str_com"],
		"retval": "dso-VideoView",
		"shortDesc": "Create and add VideoView to Layout."
	},
	"AddWebView": {
		"desc": "Creates and adds a WebView to a Layout.\nSee @CreateWebView for full documentation.",
		"name": "AddWebView",
		"pNames": ["layout", "width", "height", "options", "zoom"],
		"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str_com-AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser", "num_prc"],
		"retval": "dso-WebView",
		"shortDesc": "Create and add WebView to Layout."
	},
	"Alert": {
		"desc": "#Alert.md",
		"name": "Alert",
		"pNames": ["message", "title", "options", "hue"],
		"pTypes": ["str", "str", "str_com-NoDim,NoFocus", "num_int--180..180"],
		"shortDesc": "Shows a popup message with an 'OK' button to exit"
	},
	"Animate": {
		"desc": "#Animate.md",
		"name": "Animate",
		"pNames": ["callback", "fps"],
		"pTypes": [
			{
				"desc": "Callback",
				"name": "callback",
				"pNames": ["time", "dtime"],
				"pTypes": ["num_mls", "num_mls"],
				"shortDesc": "callback"
			},
			"num_fps"
		],
		"shortDesc": "Similar to setInterval"
	},
	"Broadcast": {
		"desc": "Broadcast is used for broadcasting messages between DroidScript apps.\n\nSee Also: @SetOnBroadcast",
		"name": "Broadcast",
		"pNames": ["type", "message"],
		"pTypes": ["str-Exec", "str"],
		"shortDesc": "Used for broadcasting messages between DroidScript apps"
	},
	"BroadcastIntent": {
		"desc": "Send a broadcasting intent with a custom action.",
		"name": "BroadcastIntent",
		"pNames": ["action", "category", "data", "type", "extras", "options"],
		"pTypes": ["str-android action", "str", "str", "str", "str", "str_com"],
		"shortDesc": "Send broadcast intent"
	},
	"Call": {
		"desc": "Call is used to call the given phone number.",
		"name": "Call",
		"pNames": ["number"],
		"pTypes": ["str-number"],
		"shortDesc": "Calls a phone number"
	},
	"CheckLicense": {
		"desc": "CheckLicense checks if the app is licensed with Google Play.",
		"name": "CheckLicense",
		"pNames": ["key"],
		"pTypes": ["str"],
		"shortDesc": "Checks if app is licensed with Google Play"
	},
	"CheckPermission": {
		"desc": "CheckPermission checks whether the permission of a particular component has been granted.\n\nSee Also: @GetPermission",
		"name": "CheckPermission",
		"pNames": ["type"],
		"pTypes": ["str-Camera|Storage|ExtSDcard|Network|Location|SMS|Calendar|Body|Contacts|Record|Biometric|Phone|Accounts|License"],
		"retval": "bin",
		"shortDesc": "Checks if permission was granted"
	},
	"ChooseAccount": {
		"desc": "Opens an Android dialog and allows the user to select one of his registered Google/Gmail accounts or add one. The selected email address is returned as the first argument in the callback function.\n\nSee Also: @GetAccounts",
		"name": "ChooseAccount",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "callback",
			"name": "callback",
			"pNames": ["account"],
			"pTypes": ["str-email"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Let the user choose an google account"
	},
	"ChooseContact": {
		"desc": "ChooseContact opens the Contacts app so that the user can select the name and either the phone number or email address of a user.",
		"name": "ChooseContact",
		"pNames": ["type", "callback"],
		"pTypes": ["str-Phone|Email", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["name", "data"],
			"pTypes": ["str", "str"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Let the user choose an image"
	},
	"ChooseFile": {
		"desc": "ChooseFile opens a file picker for user to select a file.\n\nSee Also: @ReadFile",
		"name": "ChooseFile",
		"pNames": ["message", "type", "callback", "fldr"],
		"pTypes": ["str", "str-mimetype", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["path"],
			"pTypes": ["str_pth"],
			"shortDesc": "callback"
		}, "str_pth"],
		"shortDesc": "Let the user choose a file"
	},
	"ChooseImage": {
		"desc": "ChooseImage opens the photo gallery for user to select an image.\n\nSee Also: @CreateImage",
		"name": "ChooseImage",
		"pNames": ["options", "callback"],
		"pTypes": ["str_com-|internal|external", {
			"desc": "callback",
			"name": "callback",
			"pNames": ["path"],
			"pTypes": ["str_pth"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Let the user choose an image"
	},
	"ChooseWifi": {
		"desc": "#ChooseWifi.md",
		"name": "ChooseWifi",
		"pNames": ["title1", "title2", "callback", "options", "extra"],
		"pTypes": ["str", "str", {
			"desc": "callback function",
			"name": "callback",
			"pNames": ["ssid"],
			"pTypes": ["str"],
			"shortDesc": "callback"
		}, "str_com-force|large", "str_com-ssids"],
		"shortDesc": "Let the user choose a WiFi network"
	},
	"ClearCookies": {
		"desc": "ClearCookies clears the saved cookies for webviews or html apps. If session was not given, the latest one will be selected.\n\nSee Also: @SaveCookies",
		"name": "ClearCookies",
		"pNames": ["session"],
		"pTypes": ["?"],
		"shortDesc": "Clears saved web cookies"
	},
	"ClearData": {
		"desc": "ClearData deletes variables saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.\n\nSee Also: @SetData, \n\nSee Also: @GetData",
		"name": "ClearData",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Deletes app.Save*() storage"
	},
	"ClearValue": {
		"desc": "ClearValue deletes a variable saved via app.Save*(). The file parameter is optional. If given, the specified file will be used, otherwise it will be located in the apps private Folder.\n\nSee Also: @SaveText, @SaveNumber, @SaveBoolean",
		"name": "ClearValue",
		"pNames": ["name", "file"],
		"pTypes": ["string", "str_pth"],
		"shortDesc": "Deletes a variable saved via app.Save*()"
	},
	"CloseDrawer": {
		"desc": "Closes the drawer layout on the given side with slide animation.\n\nSee Also: @OpenDrawer",
		"name": "CloseDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Closes the drawer layout on the given side"
	},
	"CopyFile": {
		"desc": "CopyFile copies a file to a given destination. The target must locate to the actual target file, not the folder. An existing file will be overridden.\n\nSee Also: @RenameFile, @DeleteFile, @FileExists",
		"name": "CopyFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Copies a file to a given destination"
	},
	"CopyFolder": {
		"desc": "CopyFolder copies a folder to a given destination. If override is false and the folder already exists in the destination, it will not be copied.\n\nSee Also: @RenameFolder, @DeleteFolder, @FolderExists",
		"name": "CopyFolder",
		"pNames": ["source", "destination", "overwrite", "filter"],
		"pTypes": ["str_pth", "str_pth", "bin", "str-pattern"],
		"shortDesc": "Copies a folder to a given destination"
	},
	"CreateAdView": {
		"abbrev": "adv",
		"desc": "#CreateAdView.md",
		"name": "CreateAdView",
		"pNames": ["unitId", "testId", "width", "height", "options"],
		"pTypes": ["str","str", "num_frc", "num_frc", "str"],
		"retval": "dso-AdView",
		"shortDesc": "Returns an AdView object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-AdView",
				"shortDesc": "Returns the control class name"
			},
			"Load": {
				"desc": "Loads an advertising banner.",
				"name": "Load",
				"shortDesc": "Loads an ad"
			},
			"SetOnStatus": {
				"desc": "Called when the AdView status changed. A List of StatusCodes can be obtained by [the AdView source](https://github.com/pozirk/ANEAdMob/blob/ad9ba23e23733a36e4efebb00b124153ad409f1a/air/AdMob/com/pozirk/ads/admob/AdMob.as#L106).",
				"name": "SetOnStatus",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["status"],
					"pTypes": ["str-ALTERNATIVE|..."],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when status changed"
			}
		}
	},
	"CreateAudioRecorder": {
		"abbrev": "rec",
		"desc": "#CreateAudioRecorder.md",
		"name": "CreateAudioRecorder",
		"retval": "dso-AudioRecorder",
		"shortDesc": "Returns an AudioRecorder object",
		"subf": {
			"GetData": {
				"desc": "Returns a list of frequency values. The amount is dependent on the set frequency.",
				"name": "GetData",
				"retval": "lst-[ frequencies:num_int ]",
				"shortDesc": "Returns a new list of frequency values"
			},
			"GetPeak": {
				"desc": "Returns the PMPO value (Peak music power output).",
				"name": "GetPeak",
				"retval": "num_flt",
				"shortDesc": "Returns the PMPO value"
			},
			"GetRMS": {
				"desc": "Returns the RMS value (Root Mean Square)",
				"name": "GetRMS",
				"retval": "num_flt",
				"shortDesc": "Returns the RMS value"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-AudioRecorder",
				"shortDesc": "Returns the control class name"
			},
			"Pause": {
				"desc": "Pauses the recording temporally.",
				"name": "Pause",
				"shortDesc": "Pause the recording"
			},
			"SetFile": {
				"desc": "Define the file where the recorder should record to.",
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Define the recording file"
			},
			"SetFrequency": {
				"desc": "Set the Recording frequency to one of the possible values.",
				"name": "SetFrequency",
				"pNames": ["frequency"],
				"pTypes": ["num_int-8000|11025|22050|44100|48000"],
				"shortDesc": "Define the Recording frequency"
			},
			"SetSource": {
				"desc": "Define the file where the recorder should record to.",
				"name": "SetSource",
				"pNames": ["src"],
				"pTypes": ["str-Default|Camcorder|Mic|Unprocessed|Voicecommunication|Voiceperformance|Voicerecognition"],
				"shortDesc": "Define the recording file"
			},
			"Start": {
				"desc": "Start recording to the specified file.",
				"name": "Start",
				"shortDesc": "Start recording"
			},
			"Stop": {
				"desc": "Stop the audio recording.",
				"name": "Stop",
				"shortDesc": "Stop recording"
			}
		}
	},
	"CreateBluetoothList": {
		"abbrev": "btl",
		"desc": "CreateBluetoothList shows an Android dialog which allows the user to select a Bluetooth device from paired and discovered devices. See Also: @GetPairedBtDevices, @DiscoverBtDevices.",
		"name": "CreateBluetoothList",
		"pNames": ["filter"],
		"pTypes": ["str"],
		"retval": "dso-BluetoothList",
		"shortDesc": "Returns a new BluetoothList object with selectable list of paired and discovered Bluetooth devices",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-BluetoothList",
				"shortDesc": "Returns the control class name"
			},
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user selects an element.",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["name", "address"],
					"pTypes": ["str", "str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Define a callback function for touch events"
			}
		}
	},
	"CreateBluetoothSerial": {
		"abbrev": "bls",
		"desc": "The CreateBluetoothSerial object is used for communicating with other Bluetooth devices.The 'Text' mode is set by default, but **int**eger and **hex**adecimal values can also be sent.",
		"name": "CreateBluetoothSerial",
		"pNames": ["mode"],
		"pTypes": ["str-Text|Int|Hex"],
		"retval": "dso-BluetoothSerial",
		"shortDesc": "Communicate with other Bluetooth devices",
		"subf": {
			"Clear": {
				"desc": "Clears the Bluetooth buffer of the serial connection.",
				"name": "Clear",
				"shortDesc": "Clears the Bluetooth buffer"
			},
			"Connect": {
				"desc": "Connect to a Bluetooth device via its address. The oppenent must have called bt.Listen before.",
				"name": "Connect",
				"pNames": ["name", "channel"],
				"pTypes": ["str", "?"],
				"shortDesc": "Connect a Bluetooth device"
			},
			"Disconnect": {
				"desc": "Disconnect your device from an eventually existant connection. Calls the OnDisconnect callback function on both devices.",
				"name": "Disconnect",
				"shortDesc": "Disconnect the Bluetooth connection"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-BluetoothSerial",
				"shortDesc": "Returns the control class name"
			},
			"IsBluetoothEnabled": {
				"desc": "Checks if Bluetooth is enabled or not.",
				"name": "IsBluetoothEnabled",
				"retval": "bin",
				"shortDesc": "Checks if Bluetooth is enabled"
			},
			"IsConnected": {
				"desc": "Checks if a Bluetooth connection exists to another device.",
				"name": "IsConnected",
				"retval": "bin",
				"shortDesc": "Checks if a Bluetooth connection exists"
			},
			"IsPaired": {
				"desc": "Checks if a specific device is paired using its Bt name.",
				"name": "IsPaired",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "bin",
				"shortDesc": "Check pairing status to another device"
			},
			"Listen": {
				"desc": "Listen to your serial connection for any incoming mesages by passing <i>true</i> as first argument, <s>or stop listening by passing false</s>. It has to be called before an other device can connect with yours via bt.Connect.",
				"name": "Listen",
				"pNames": ["enabled"],
				"pTypes": ["bin"],
				"shortDesc": "Listen <s>or stop listening</s> for incoming messages"
			},
			"Method": "#1023663567",
			"RequestEnable": {
				"desc": "If Bluetooth is disabled, shows an android dialog which asks the user to enable bluetooth connection. If granted, bluetooth will be enabled automatically. No callback fired.",
				"name": "RequestEnable",
				"shortDesc": "Ask user to enable Bluetooth"
			},
			"SetDataMode": {
				"desc": "Enable sending data in several modes.",
				"name": "SetDataMode",
				"pNames": ["mode"],
				"pTypes": ["str-Hex:comma separated text value|Int:comma separated byte numbers|Text:string of text characters|&lt;encoding:\"UTF-16L/BE\"&gt;"],
				"shortDesc": "Define data format for outgoing data"
			},
			"SetOnConnect": {
				"desc": "If the device has sent the connection request\n\tname is of type boolean (true if the connection was established successful)\n\tand address is your BluetoothSerial object\n\nif the device has received the connection request\n\tname is a string with the clients bluetooth name\n\tand address includes the bluetooth address.",
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["name", "address"],
					"pTypes": ["str", "str"],
					"shortDesc": "callback"
				}],
				"shortDesc": ""
			},
			"SetOnDisconnect": {
				"desc": "SetOnDisconnect will be called on both devices after disconnecting from an existing bluetooth connection.",
				"name": "SetOnDisconnect",
				"shortDesc": "Called after disconnecting from bluetooth connection"
			},
			"SetOnReceive": {
				"desc": "The SetOnReceive callback is called automatically after data has been received via the Bluetooth serial connection.",
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called after received Data via Bluetooth"
			},
			"SetSplitMode": {
				"desc": "Tells the serial listener how to split received data. Splitted data will result in multiple OnReceive calls.\np2 and p3 have different purposes for different modes:\n<style type='text/css'>th{align:center;}td{padding:0 10px 0 10px;}</style><table><tr><th>mode</th><th>p1</th><th>p2</th></tr><tr><td>Size</td><td>Size of one data package</td><td>-</td></tr><tr><td>End</td><td>Byte indicating end of data</td><td>-</td></tr><tr><td>Start-End</td><td>Byte indicating start of data</td><td>Byte indicating end of data</td></tr></table>",
				"name": "SetSplitMode",
				"pNames": ["mode", "p2", "p3"],
				"pTypes": ["str-End|Start-End|Size", "str||num_int", "str||num_int"],
				"shortDesc": "Specify how to split received data"
			},
			"SetTimeout": {
				"desc": "SetTimeout",
				"name": "SetTimeout",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": "SetTimeout"
			},
			"Write": {
				"desc": "Send data over the Bluetooth serial connection to the other device.",
				"name": "Write",
				"pNames": ["data"],
				"pTypes": ["str"],
				"shortDesc": "Send data to connected device"
			}
		}
	},
	"CreateButton": {
		"abbrev": "btn",
		"desc": "#CreateButton.md",
		"name": "CreateButton",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-FontAwesome,Html,Monospace,Normal|Aluminium|Gray|Lego,SingleLine,Custom,AutoShrink:Auto-shrinks text to fit,AutoSize:Auto-sizes text to fit,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Button",
		"shortDesc": "Creates a button control",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Button",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEllipsize": "#0897234673",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHtml": "#8753208754",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2398750419",
			"SetOnLongTouch": {
				"desc": "Define a callback function which is called when the button has been long pressed.",
				"name": "SetOnLongTouch",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"name": "callback",
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Called when the button was long pressed"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetStyle": {
				"desc": "Customize the look of the button.",
				"name": "SetStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow"],
				"pTypes": ["str_col", "str_col", "num_pxl", "str_col", "num_pxl", "num_frc"],
				"shortDesc": "Customize the button looks"
			},
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextShadow": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateCameraView": {
		"abbrev": "cam",
		"desc": "#CreateCameraView.md",
		"name": "CreateCameraView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str_com-Front,UseBitmap,UseABGR,NoRotate,\"&lt;resolution&gt;\":\"CIF: 352x288\\\\nQQVGA: 160x120\\\\nQVGA: 320x240\\\\nSVGA: 800x600\\\\nVGA: 640x480\\\\nXGA: 1024x768\\\\nUXGA: 1600x1200\""],
		"retval": "dso-CameraView",
		"shortDesc": "Returns a new CameraView object to access the device camera",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"AutoCapture": {
				"desc": "Automatically takes pictures if a motion was detected by cam.MotionMosaic.\nThe first # in the filename is a placeholder for numbers increasing for every taken picture.",
				"name": "AutoCapture",
				"pNames": ["path", "file", "maxCount"],
				"pTypes": ["str_pth", "str-File_n#_motion", "num_int"],
				"shortDesc": "Takes a picture if a motion was detected"
			},
			"ClearFocus": "#1362225380",
			"FindFaces": {
				"desc": "Finds faces in the current camera view.",
				"name": "FindFaces",
				"pNames": ["maxCount"],
				"pTypes": ["num_int"],
				"retval": "obj-{ confidence:num_frc&comma; eyeDistance:num&comma; midPoint:obj:{x:num&comma; y:num}&comma; pose:num_int }",
				"shortDesc": "Find faces in the current camera view"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCameraCount": {
				"desc": "Returns the amount of cameras built in to the device.",
				"name": "GetCameraCount",
				"retval": "num_int",
				"shortDesc": "Returns the device camera count"
			},
			"GetColorEffects": {
				"desc": "Returns a list of available color effects for the camera.",
				"name": "GetColorEffects",
				"retval": "str-none,mono,negative,solarize,sepia,positionterize,whiteboard,blackboard,aqua,vage-cold,point-blue,point-red-yellow,emboss,sketch,neon",
				"shortDesc": "Returns a new list of available color effects"
			},
			"GetHeight": "#2576212953",
			"GetImageHeight": {
				"desc": "Returns the camera capture height in pixels.",
				"name": "GetImageHeight",
				"retval": "num_frc",
				"shortDesc": "Returns the camera height"
			},
			"GetImageWidth": {
				"desc": "Returns the camera capture width in pixels.",
				"name": "GetImageWidth",
				"retval": "num_frc",
				"shortDesc": "Returns the camera width"
			},
			"GetLeft": "#1237814406",
			"GetMaxZoom": {
				"desc": "Returns the hightst possible zoom value.",
				"name": "GetMaxZoom",
				"retval": "num",
				"shortDesc": "Returns the hightst possible zoom value"
			},
			"GetParameters": {
				"desc": "Get properties, possible values and settings of the camera as “key=value; pairs.",
				"name": "GetParameters",
				"retval": "str_smc-key1=value1;key2=value2;...",
				"shortDesc": "Get camera parameters"
			},
			"GetParent": "#3557841648",
			"GetPictureSizes": {
				"desc": "Returns a list of possible picture dimensions.",
				"name": "GetPictureSizes",
				"retval": "str_com-w1 x h1\\,w2 x h2\\,...",
				"shortDesc": "Returns a new list of possible picture dimensions"
			},
			"GetPixelData": {
				"desc": "Returns the current camera's raw, png or jpg image datas encoded as base64.",
				"name": "GetPixelData",
				"pNames": ["format", "left", "top", "width", "height"],
				"pTypes": ["str-GrayScale:fastest|JSON:\"slowest&colon; “ARGB&comma;ARGB&comma;...”\"|\"&lt;resolution&gt;\":\"CIF: 352x288\\\\nQQVGA: 160x120\\\\nQVGA: 320x240\\\\nSVGA: 800x600\\\\nVGA: 640x480\\\\nXGA: 1024x768\\\\nUXGA: 1600x1200\"|rawbase64|pngbase64|jpgbase64", "num_frc", "num_frc", "num_frc", "num_frc"],
				"retval": "str_b64",
				"shortDesc": "Returns base64 pixel data as raw bitmap, png or jpg format"
			},
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-CameraView",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"GetZoom": {
				"desc": "Returns the curent zoom value.",
				"name": "GetZoom",
				"retval": "num",
				"shortDesc": "Returns the curent zoom value"
			},
			"Gone": "#5528553362",
			"HasFlash": {
				"desc": "Checks if the currently used camera has a camera flash.",
				"name": "HasFlash",
				"retval": "bin",
				"shortDesc": "Returns if the current camera supports flashlight"
			},
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsRecording": {
				"desc": "Returns a boolea indicating whether the camera is currently recording a video.",
				"name": "IsRecording",
				"retval": "bin",
				"shortDesc": "Returns if the camera is currently recording"
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"MotionMosaic": {
				"desc": "Defines a raster which is used for motion detection.\nUse AutoCapture to take pictures if a motion was detected.",
				"name": "MotionMosaic",
				"pNames": ["xtiles", "ytiles", "sensitivity", "minPeriod", "image"],
				"pTypes": ["num_int", "num_int", "num_pxl", "num_mls", "dso-CreateImage"],
				"shortDesc": "Define a raster for motion detection"
			},
			"Record": {
				"desc": "Record a video to a given file. If seconds is specified, the recording will automatically stop after this time. Otherwise call cam.Stop().",
				"name": "Record",
				"pNames": ["file", "seconds"],
				"pTypes": ["str_pth", "num_sec"],
				"shortDesc": "Start recording video"
			},
			"ReportColors": {
				"desc": "Keeps tracks of the average color around a given point.",
				"name": "ReportColors",
				"pNames": ["list", "callback", "sampSize", "maxRate"],
				"pTypes": ["str_pip-x1:num_frc\\,y1:num_frc\\|x2:num_frc\\,y2:num_frc\\|...", {
					"desc": "Callback",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["lst-[[r1,g1,b1], [r2,g2,b2], ...]"],
					"shortDesc": "callback"
				}, "num_pxl", "num_mls"],
				"shortDesc": "Keeps tracks of the average color around a given point"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorEffect": {
				"desc": "Applies a color effect to the camera.",
				"name": "SetColorEffect",
				"pNames": ["effect"],
				"pTypes": ["str-none|mono|negative|solarize|sepia|positionterize|whiteboard|blackboard|aqua|vage-cold|point-blue|point-red-yellow|emboss|sketch|neon"],
				"shortDesc": "Applies a color effect to the camera"
			},
			"SetColorFilter": "#1096996086",
			"SetDuplicateImage": {
				"desc": "Define two @CreateImage controls where the camera view is duplicated to. This method may be used for cardboart AR. Have a look at [Daves forum post](https://groups.google.com/d/msg/androidscript/gJI6axNtkqk/Cc22nwVbr0QJ) about that method.",
				"name": "SetDuplicateImage",
				"pNames": ["image1", "image2"],
				"pTypes": ["dso-CreateImage", "dso-CreateImage"],
				"shortDesc": "Define two camera view duplicate targets"
			},
			"SetEnabled": "#1602385882",
			"SetFlash": {
				"desc": "En- or disables the camera flash if available.",
				"name": "SetFlash",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": "En-/Disables the camera flash"
			},
			"SetFocusMode": {
				"desc": "Change the cameras focus mode depending  on the purpose.",
				"name": "SetFocusMode",
				"pNames": ["mode"],
				"pTypes": ["str-Auto|Picture:for taking pictures|Video:for recording videos|Macro|EDOF:Extended Depth Of Field for continuous digital focusing|Fixed|Infinity"],
				"shortDesc": "Change focus mode"
			},
			"SetMargins": "#1741900074",
			"SetOnFocus": "#9283752301",
			"SetOnPicture": {
				"desc": "Defines a callback function which is called if cam.AutoCapture took a picture. The _file_ parameter contains the path to the image file.",
				"name": "SetOnPicture",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["file"],
					"pTypes": ["str_pth"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when cam.AutoCapture took a picture"
			},
			"SetOnReady": {
				"desc": "Defines a callback function which is called when the camera is ready for use.",
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called if the camera is ready for use"
			},
			"SetOrientation": {
				"desc": "Rotates the camera view.",
				"name": "SetOrientation",
				"pNames": ["angle"],
				"pTypes": ["num_deg-0|90|180|270"],
				"shortDesc": "Rotates the camera view"
			},
			"SetPadding": "#1923105617",
			"SetParameter": {
				"desc": "Change property values of the camera.\nSee GetProperties to get a full list of available keys.",
				"name": "SetParameter",
				"pNames": ["name", "value"],
				"pTypes": ["str", "num||str"],
				"shortDesc": "Change camera properties"
			},
			"SetPictureSize": {
				"desc": "Define a custom picture size in pixels.",
				"name": "SetPictureSize",
				"pNames": ["width", "height"],
				"pTypes": ["num_pxl", "num_pxl"],
				"shortDesc": "Define a custom picture size in pixels"
			},
			"SetPosition": "#1425862386",
			"SetPostRotation": {
				"desc": "Rotates captured image in any desired angle in degrees.",
				"name": "SetPostRotation",
				"pNames": ["angle"],
				"pTypes": ["num_deg"],
				"shortDesc": "Rotate the captured image"
			},
			"SetPreviewImage": {
				"desc": "Defines an image control which will show the captured picture automatically when taken.",
				"name": "SetPreviewImage",
				"pNames": ["image"],
				"pTypes": ["dso-CreateImage"],
				"shortDesc": "Define a preview image for captured pictures"
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetSound": {
				"desc": "En-/Disables the camera sound playing when taking pictures.",
				"name": "SetSound",
				"pNames": ["enabled"],
				"pTypes": ["bin"],
				"shortDesc": "n-/Disables the camera sound"
			},
			"SetVideoSize": {
				"desc": "Define a custom video recording size in pixels.",
				"name": "SetVideoSize",
				"pNames": ["width", "height"],
				"pTypes": ["num_pxl", "num_pxl"],
				"shortDesc": "Define custom video recording size"
			},
			"SetVisibility": "#1004824195",
			"SetZoom": {
				"desc": "Change the zoom value of the camera.",
				"name": "SetZoom",
				"pNames": ["level"],
				"pTypes": ["num"],
				"shortDesc": "Change the zoom value of the camera"
			},
			"Show": "#1243391562",
			"StartPreview": {
				"desc": "Start the camera preview on the display.",
				"name": "StartPreview",
				"shortDesc": "Start the camera preview"
			},
			"Stop": {
				"desc": "Stop recording a video.",
				"name": "Stop",
				"shortDesc": "Stop recording video"
			},
			"StopPreview": {
				"desc": "Stop the camera preview on the display.",
				"name": "StopPreview",
				"shortDesc": "Stop the camera preview"
			},
			"Stream": {
				"desc": "Streams the camera view to a local ip.",
				"name": "Stream",
				"pNames": ["ip", "port", "quality", "fps", "mtu"],
				"pTypes": ["str", "num_int", "num_prc", "num_fps", "num_mtu"],
				"shortDesc": "Streams the camera view to a local ip"
			},
			"TakePicture": {
				"desc": "Takes a picture of the current view and saves it to a file.",
				"name": "TakePicture",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Save the current camera view to a file"
			},
			"Tween": "#2114624769"
		}
	},
	"CreateCheckBox": {
		"abbrev": "chk",
		"desc": "#CreateCheckBox.md",
		"name": "CreateCheckBox",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-FillX/Y,NoSound"],
		"retval": "dso-CheckBox",
		"shortDesc": "Returns a new CheckBox object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChecked": {
				"desc": "Checks if the checkbox is currently checked or not.",
				"name": "GetChecked",
				"retval": "bin",
				"shortDesc": "Get current checked state"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-CheckBox",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetChecked": {
				"desc": "Changes the current checked state of the CheckBox.",
				"name": "SetChecked",
				"pNames": ["checked"],
				"pTypes": ["bin"],
				"shortDesc": "Changes the ckecked state"
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches the CheckBox.",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["isChecked"],
					"pTypes": ["bin"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the CheckBox was touched"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateCloudStore": {
		"abbrev": "cld",
		"desc": "#CreateCloudStore.md",
		"name": "CreateCloudStore",
		"pNames": ["apiKey"],
		"pTypes": ["str"],
		"retval": "dso-CloudStore",
		"shortDesc": "Returns a new CloudStore object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-CloudStore",
				"shortDesc": "Returns the control class name"
			},
			"Delete": {
				"desc": "Deletes a file in the cloud.",
				"name": "Delete",
				"pNames": ["file", "callback"],
				"pTypes": ["str_pth", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["success", "result", "status"],
					"pTypes": ["bin", "obj-{data:str,error:str}", "num_int"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Deletes a file in the cloud."
			},
			"List": {
				"desc": "Lists files of the cloud.",
				"name": "List",
				"pNames": ["filter", "callback"],
				"pTypes": ["str", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["error", "result", "status"],
					"pTypes": ["bin", "obj-{data:str_com,error:str}", "num_int"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Lists files of the cloud."
			},
			"Load": {
				"desc": "Loads data from the cloud.",
				"name": "Load",
				"pNames": ["file", "callback", "options"],
				"pTypes": ["str_pth", "str", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["error", "result", "status"],
					"pTypes": ["bin", "obj-{data:all,error:str}", "num_int"],
					"shortDesc": "callback"
				}, "str"],
				"shortDesc": "Loads data from the cloud."
			},
			"Merge": {
				"desc": "Merges an object with an already existing in the cloud.",
				"name": "Merge",
				"pNames": ["file", "data", "callback"],
				"pTypes": ["str_pth", "obj", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["success", "result", "status"],
					"pTypes": ["bin", "obj-{data:str-Entry Saved,error:str}", "num_int"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Merges data in the cloud."
			},
			"_Method": "#1023663567",
			"Save": {
				"desc": "Saves data in the cloud.",
				"name": "Save",
				"pNames": ["file", "data", "callback", "options"],
				"pTypes": ["str_pth", "all", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["success", "result", "status"],
					"pTypes": ["bin", "obj-{data:str,error:str}", "num_int"],
					"shortDesc": "callback"
				}, "str"],
				"shortDesc": "Saves data in the cloud."
			}
		}
	},
	"CreateCodeEdit": {
		"abbrev": "cde",
		"desc": "CreateCodeEdit is a control for premium users which is like a TextEdit but it has advanced methods.\n\n<premium>",
		"name": "CreateCodeEdit",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-FillX/Y"],
		"retval": "dso-CodeEdit",
		"shortDesc": "Returns a new CodeEdit object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "Clears the undo/redo history.",
				"name": "ClearHistory",
				"shortDesc": "Clears the undo/redo history"
			},
			"Copy": {
				"desc": "Copies the selected text to the device clipboard.",
				"name": "Copy",
				"shortDesc": "Copy selected text to the clipboard"
			},
			"Cut": {
				"desc": "Cut selected text and copies it to the device clipboard.",
				"name": "Cut",
				"shortDesc": "Cut selected text to the clipboard"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCursorLine": {
				"desc": "Returns the current line index where the cursor is located.",
				"name": "GetCursorLine",
				"retval": "num_int",
				"shortDesc": "Get the current cursor line index"
			},
			"GetCursorPos": {
				"desc": "Returns the index of the character where the cursor is currently located.",
				"name": "GetCursorPos",
				"retval": "num_int",
				"shortDesc": "Get the cursor position in the text"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetLineStart": {
				"desc": "Returns at which character in the text a certain line begins.",
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": "Get the start character index of a line"
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetSelectedText": {
				"desc": "Returns the currently selected text.",
				"name": "GetSelectedText",
				"retval": "str",
				"shortDesc": "Get the selected text"
			},
			"GetSelectMode": {
				"desc": "Checks if there is currently some text selected.",
				"name": "GetSelectMode",
				"retval": "bin",
				"shortDesc": "Get current selection state"
			},
			"GetText": "#2387569276",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-CodeEdit",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"HighlightLine": {
				"desc": "Highlights a specific line in the text with a thin red underline.",
				"name": "HighlightLine",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"shortDesc": "Underlines a certain line in the text"
			},
			"InsertText": {
				"desc": "Inserts a string at the current cursor position.",
				"name": "InsertText",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": "Insert text at the cursor"
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Paste": {
				"desc": "Paste text from the clipboard at the current cursor position.",
				"name": "Paste",
				"shortDesc": "Paste clipboard to the current cursor position"
			},
			"Redo": {
				"desc": "Redo an undone action.",
				"name": "Redo",
				"shortDesc": "Redo an undone action"
			},
			"Replace": {
				"desc": "Replaces the current selection with the passed text.",
				"name": "Replace",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": "Replace the selected text"
			},
			"ReplaceAll": {
				"desc": "Replace all occurances of a string in the text.",
				"name": "ReplaceAll",
				"pNames": ["text", "newText", "matchCase", "wholeWord"],
				"pTypes": ["str", "str", "bin", "bin"],
				"shortDesc": "Replace all occurances of a string in the text"
			},
			"ReplaceText": {
				"desc": "Replaces a given range in the text with some string.",
				"name": "ReplaceText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": "Replace a range of the text with a string"
			},
			"Search": {
				"desc": "Search for a string in the text in a given direction and selects it.",
				"name": "Search",
				"pNames": ["text", "direction", "matchCase", "wholeWord"],
				"pTypes": ["str", "str-Up|Down", "bin", "bin"],
				"shortDesc": "Search and select a string in the text"
			},
			"SelectAll": {
				"desc": "Selects the whole text.",
				"name": "SelectAll",
				"shortDesc": "Select the whole text"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetColorScheme": {
				"desc": "Changes the color scheme of the CodeEdit.",
				"name": "SetColorScheme",
				"pNames": ["scheme"],
				"pTypes": ["str-Dark|Light"],
				"shortDesc": "Changes the color scheme"
			},
			"SetCursorPos": {
				"desc": "Change the curernt cursor position.",
				"name": "SetCursorPos",
				"pNames": ["position"],
				"pTypes": ["num_int"],
				"shortDesc": "Change the curernt cursor position"
			},
			"SetEnabled": "#1602385882",
			"SetHtml": "#8753208754",
			"SetLanguage": {
				"desc": "Change the highlighted language syntax.",
				"name": "SetLanguage",
				"pNames": ["ext"],
				"pTypes": ["str-.js,.java,.php,.c,.cpp,.cs,.rb,.m,.py,.txt"],
				"shortDesc": "Change the highlighted language syntax"
			},
			"SetMargins": "#1741900074",
			"SetNavigationMethod": {
				"desc": "Select between navigating using the Yoyo or standard touch.",
				"name": "SetNavigationMethod",
				"pNames": ["method"],
				"pTypes": ["str-Yoyo|Touch"],
				"shortDesc": "Select between Yoyo or Touch mode"
			},
			"SetOnChange": "#2137502353",
			"SetOnDoubleTap": {
				"desc": "Defines a callback function which is called when the user double-taps the Yoyo.",
				"name": "SetOnDoubleTap",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Define a Yoyo double-tap callback function"
			},
			"SetOnKey": {
				"desc": "Define a callback function which is called when a key event appears.",
				"name": "SetOnKey",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["action", "keyname", "keycode", "extra"],
					"pTypes": ["str-Down|Move|Up", "str-VOLUME_DOWN|VOLUME_UP|BACK|MENU", "num_int", "str-Shift,Ctrl,Alt,Meta"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Define a key-event callback function"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSelection": {
				"desc": "Selects part of the text in a given range.",
				"name": "SetSelection",
				"pNames": ["start", "stop"],
				"pTypes": ["num_int", "num_int"],
				"shortDesc": "Selects part of the text in a given range"
			},
			"SetSelectMode": {
				"desc": "En/Disables the selection mode for the cursor.",
				"name": "SetSelectMode",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disable cursor selection mode"
			},
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetUseKeyboard": {
				"desc": "En/Disable usage of the device keyboard.",
				"name": "SetUseKeyboard",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disable device keyboard"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769",
			"Undo": {
				"desc": "Undo an action.",
				"name": "Undo",
				"shortDesc": "Undo an action"
			}
		}
	},
	"CreateCrypt": {
		"abbrev": "crp",
		"desc": "The Crypt component is used to en- or decrypt a string with a given key or to create a hash of it.",
		"name": "CreateCrypt",
		"pNames": ["options"],
		"pTypes": ["str_com"],
		"retval": "dso-Crypt",
		"shortDesc": "Returns a new Crypt object to encrypt or decrypt a string with a given key or create a hash of it",
		"subf": {
			"Decrypt": {
				"desc": "Decrypt text with a key.",
				"name": "Decrypt",
				"pNames": ["text", "password"],
				"pTypes": ["str", "str"],
				"retval": "str",
				"shortDesc": "Decrypt text"
			},
			"Encrypt": {
				"desc": "Encrypt text with a key.",
				"name": "Encrypt",
				"pNames": ["text", "password"],
				"pTypes": ["str", "str"],
				"retval": "str",
				"shortDesc": "Encrypt text"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Crypt",
				"shortDesc": "Returns the control class name"
			},
			"Hash": {
				"desc": "Build a hash of a string for one-way encryption.",
				"name": "Hash",
				"pNames": ["text", "mode", "options"],
				"pTypes": ["str", "str-MD5|SHA-1|SHA-256", "str"],
				"shortDesc": "Get a hash from a string"
			}
		}
	},
	"CreateDebug": {
		"desc": "CreateDebug is used to show the console as overlay above the app in order to see the debug logs.",
		"name": "CreateDebug",
		"shortDesc": "Shows a debug log overlay"
	},
	"CreateDialog": {
		"abbrev": "dlg",
		"desc": "#CreateDialog.md",
		"name": "CreateDialog",
		"pNames": ["title", "options"],
		"pTypes": ["str", "str_com-AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch,Modal,Kiosk,Old:apply old list style affecting title style and unrounded corners"],
		"retval": "dso-Dialog",
		"shortDesc": "Returns a new Dialog object to display messages",
		"subf": {
			"AddLayout": {
				"desc": "Add the content layout to the dialog.",
				"name": "AddLayout",
				"pNames": ["layout"],
				"pTypes": ["dso-CreateLayout"],
				"shortDesc": "Add content layout"
			},
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Dismiss": "#1924613953",
			"EnableBackKey": {
				"desc": "En/Disables the device back key to hide the dialog.",
				"name": "EnableBackKey",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disables hiding via presing the back key"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTitleHeight": {
				"desc": "Returns the height of the title bar.",
				"name": "GetTitleHeight",
				"retval": "num_pxl",
				"shortDesc": "Get title bar height"
			},
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Dialog",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveLayout": {
				"desc": "Removes a content layout.",
				"name": "RemoveLayout",
				"pNames": ["layout"],
				"pTypes": ["dso-CreateLayout"],
				"shortDesc": "Removes a content layout"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": {
				"desc": "Changes the background color of the control.",
				"name": "SetBackColor",
				"pNames": ["color", "radius"],
				"pTypes": ["str_col", "num_pxl"],
				"shortDesc": "Change the background color"
			},
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnBack": {
				"desc": "Define a callback function which is called when the device's back button was pressed while the dialog was on front.",
				"name": "SetOnBack",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when back button was pressed while the dialog was shown"
			},
			"SetOnCancel": {
				"desc": "Define a callback function which is called when the dialog is cancelled.",
				"name": "SetOnCancel",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the dialog is cancelled"
			},
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTitle": {
				"desc": "Changes the title of the dialog.",
				"name": "SetTitle",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": "Changes the dialog title"
			},
			"SetTitleColor": {
				"desc": "Changes the color of the title divider.",
				"name": "SetTitleColor",
				"pNames": ["clr"],
				"pTypes": ["str_col"],
				"shortDesc": "Changes the color of the title divider"
			},
			"SetTitleDividerColor": {
				"desc": "Changes the title divider color of the dialog.",
				"name": "SetTitleDividerColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Changes the title divider height"
			},
			"SetTitleDividerHeight": {
				"desc": "Changes the divider height of the dialog.",
				"name": "SetTitleDividerHeight",
				"pNames": ["height"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Changes the divider height"
			},
			"SetTitleHeight": {
				"desc": "Changes the height of the title bar.",
				"name": "SetTitleHeight",
				"pNames": ["height", "options"],
				"pTypes": ["num_pxl", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Change height of the title bar"
			},
			"SetTitleTextSize": {
				"desc": "Changes the text size of the dialog title.",
				"name": "SetTitleTextSize",
				"pNames": ["size", "options"],
				"pTypes": ["num", "str-px|sp|dip|mm|pt"],
				"shortDesc": "Changes the title text size"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateDownloader": {
		"abbrev": "dwn",
		"desc": "#CreateDownloader.md",
		"name": "CreateDownloader",
		"pNames": ["options"],
		"pTypes": ["str_com-NoDialog|Light"],
		"retval": "dso-Downloader",
		"shortDesc": "Returns a new Downloader object",
		"subf": {
			"Download": {
				"desc": "Start downloading a file.",
				"name": "Download",
				"pNames": ["url", "fldr", "name", "headers"],
				"pTypes": ["str_url", "str_pth", "str", "str"],
				"shortDesc": "Download a file"
			},
			"GetProgress": {
				"desc": "Returns the current download progress.",
				"name": "GetProgress",
				"retval": "num_frc",
				"shortDesc": "Get current download progress"
			},
			"GetSize": {
				"desc": "Returns the target download size in bytes.",
				"name": "GetSize",
				"retval": "num_byt",
				"shortDesc": "Get target download size in bytes"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Downloader",
				"shortDesc": "Returns the control class name"
			},
			"IsComplete": {
				"desc": "Checks if the download has compleated or not.",
				"name": "IsComplete",
				"retval": "bin",
				"shortDesc": "Get download completed state"
			},
			"Method": "#1023663567",
			"SetOnCancel": {
				"desc": "Define a callback function which is called when download is cancelled.",
				"name": "SetOnCancel",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["file"],
					"pTypes": ["str_pth"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when download is cancelled"
			},
			"SetOnComplete": {
				"desc": "Define a callback function which is called when the download is finished.",
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the download is finished"
			},
			"SetOnDownload": {
				"desc": "Define a callback function which is called when the download is downloaded.",
				"name": "SetOnDownload",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["path"],
					"pTypes": ["str_pth"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the download is downloaded"
			},
			"SetOnError": {
				"desc": "Define a callback function which is called when an error occurred while downloading the file.",
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["error"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when an error occurred while downloading"
			}
		}
	},
	"CreateEmail": {
		"abbrev": "eml",
		"desc": "The Email component allows us to send and receive emails without user interaction.",
		"name": "CreateEmail",
		"pNames": ["account", "password"],
		"pTypes": ["str-email", "str-password"],
		"retval": "dso-Email",
		"shortDesc": "Returns an Email object for user to send emails",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Email",
				"shortDesc": "Returns the control class name"
			},
			"Receive": {
				"desc": "Start receiving emails from a given folder.",
				"name": "Receive",
				"pNames": ["folder", "maxCount", "filter"],
				"pTypes": ["str_pth", "num_int", "str"],
				"shortDesc": "Start receiving emails"
			},
			"Send": {
				"desc": "Send an email to someone.",
				"name": "Send",
				"pNames": ["subject", "body", "sender", "recipients", "attach"],
				"pTypes": ["str", "str", "str-email address", "str-email address", "str_pth"],
				"shortDesc": "Send an email"
			},
			"SetIMAP": {
				"desc": "Set IMAP or POP3 settings for receiving messages.",
				"name": "SetIMAP",
				"pNames": ["server", "port"],
				"pTypes": ["str-imap/pop.gmail.com:google|imap/pop.mail.yahoo.com:yahoo|imap/pop.gmx.net:gmx", "num_int-993:imap|995:pop"],
				"shortDesc": "Set IMAP settings for receiving messages"
			},
			"SetOnMessage": {
				"desc": "Define a callback function which is called when a message is received.",
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["obj-{ from:str_eml&comma; to:str_eml&comma; cc:str_eml&comma; subject:str&comma; body:str }"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a message is received"
			},
			"SetOnStatus": {
				"desc": "Define a callback function which is called when a status changed.",
				"name": "SetOnStatus",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["status"],
					"pTypes": ["str-Receive complete|Failed to receive emails: ...|Failed to send email: ..."],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a status changed"
			},
			"SetSMTP": {
				"desc": "Set SMTP settings for sending messages.",
				"name": "SetSMTP",
				"pNames": ["server", "port"],
				"pTypes": ["str-smtp.gmail.com:google,smtp.mail.yahoo.com:yahoo,mail.gmx.net:gmx", "num_int-465:SSL|578:TLS (gmail&comma; yahoo)|587:gmx"],
				"shortDesc": "Set SMTP settings for sending messages"
			}
		}
	},
	"CreateFile": {
		"abbrev": "fil",
		"desc": "Returns a File object.",
		"name": "CreateFile",
		"pNames": ["file", "mode"],
		"pTypes": ["str_pth", "str-r|w|rw"],
		"retval": "dso-File",
		"shortDesc": "Returns a new File object",
		"subf": {
			"Close": {
				"desc": "Close File",
				"name": "Close",
				"shortDesc": "Close File"
			},
			"GetLength": {
				"desc": "Returns the file size in bytes.",
				"name": "GetLength",
				"retval": "num_byt",
				"shortDesc": "Get file size in bytes"
			},
			"GetPointer": {
				"desc": "Returns the current pointer position in the file.",
				"name": "GetPointer",
				"shortDesc": "Get pointer position"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-File",
				"shortDesc": "Returns the control class name"
			},
			"ReadData": {
				"desc": "Reads a amount of bytes from the file.",
				"name": "ReadData",
				"pNames": ["len", "mode"],
				"pTypes": ["num_int", "str-Int|Text|Hex"],
				"shortDesc": "Read data from file"
			},
			"ReadNumber": {
				"desc": "Read numeric data from file.",
				"name": "ReadNumber",
				"pNames": ["type"],
				"pTypes": ["str-Byte|UByte|Bool|Float|FloatLE|Long|LongLE|Short|UShort|ShortLE|UShortLE|Int|UInt|IntLE"],
				"retval": "num",
				"shortDesc": "Read numeric data"
			},
			"ReadText": {
				"desc": "Read data from the file as text.",
				"name": "ReadText",
				"pNames": ["type"],
				"pTypes": ["str-UTF:read UTF-8 string with 2 byte header,Line:\"read one line terminated by &bsol;&bsol;n&comma; &bsol;&bsol;r or &bsol;&bsol;r&bsol;&bsol;n\"|Char:read big-endian 16-bit character"],
				"retval": "str",
				"shortDesc": "Read data as text"
			},
			"ReadTextAsync": {
				"desc": "Asynchronously reads a single character or a line as text.",
				"name": "ReadTextAsync",
				"pNames": ["type", "callback"],
				"pTypes": ["str-Line:\"read one line terminated by &bsol;&bsol;n&comma; &bsol;&bsol;r or &bsol;&bsol;r&bsol;&bsol;n\"|Char:read big-endian 16-bit character", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Asynchronously read data as text"
			},
			"Seek": {
				"desc": "CHange pointer position to a given byte in the file.",
				"name": "Seek",
				"pNames": ["offset"],
				"pTypes": ["num_int"],
				"shortDesc": "Change pointer position"
			},
			"SetLength": {
				"desc": "Allocate memory for a file.",
				"name": "SetLength",
				"pNames": ["len"],
				"pTypes": ["num_int"],
				"shortDesc": "Allocate memory for a file"
			},
			"Skip": {
				"desc": "Let the pointer skip a given number of bytes.",
				"name": "Skip",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": "Let the pointer skip some bytes"
			},
			"WriteData": {
				"desc": "Write data to the file.",
				"name": "WriteData",
				"pNames": ["data", "mode"],
				"pTypes": ["str-FA\\,FB\\,FC|250\\,251\\,252|abc46:low order 8-bit bytes", "str-Hex|Int|Text"],
				"shortDesc": "Write data to the file"
			},
			"WriteNumber": {
				"desc": "Writes a number to the file.",
				"name": "WriteNumber",
				"pNames": ["data", "type"],
				"pTypes": ["num", "str-Byte|UByte|Bool|Float|FloatLE|Long|LongLE|Short|UShort|ShortLE|UShortLE|Int|UInt|IntLE"],
				"shortDesc": "Write number to the file"
			},
			"WriteText": {
				"desc": "writes text to file",
				"name": "WriteText",
				"pNames": ["data", "type"],
				"pTypes": ["num_int", "str-UTF:write UTF-8 encoded text,Bytes:8-bit bytes|Char:Write big-endian 16-bit characters"],
				"shortDesc": ""
			}
		}
	},
	"CreateGame": {
		"abbrev": "gam",
		"desc": "#CreateGame.md",
		"name": "CreateGame",
		"pNames": ["file", "orient"],
		"pTypes": ["str_pth", "str-Portrait|Landscape"],
		"shortDesc": "CreateGame",
		"subf": {
			"game": {
				"desc": "game",
				"isval": true,
				"name": "game",
				"shortDesc": "game"
			},
			"lay": {
				"desc": "lay",
				"isval": true,
				"name": "lay",
				"shortDesc": "lay"
			}
		}
	},
	"CreateGameView": {
		"abbrev": "gmv",
		"desc": "#CreateGameView.md",
		"name": "CreateGameView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str_com"],
		"shortDesc": "CreateGameView",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Execute": {
				"desc": "Execute some code inside the GameView.",
				"name": "Execute",
				"pNames": ["js"],
				"pTypes": ["str_jsc"],
				"shortDesc": "Execute code inside the GameView"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"shortDesc": "GetType"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFile": "#0897234673",
			"SetFrameRate": {
				"desc": "Change the targeted framerate.",
				"name": "SetFrameRate",
				"pNames": ["fps"],
				"pTypes": ["num_fps"],
				"shortDesc": "Change the target framerate"
			},
			"SetMargins": "#1741900074",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateGLView": {
		"abbrev": "glv",
		"desc": "#CreateGLView.md",
		"name": "CreateGLView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str-fast2d"],
		"retval": "dso-GLView",
		"shortDesc": "Returns a GLView object",
		"subf": {
			"aspect": {
				"desc": "width/height relation",
				"isval": true,
				"name": "aspect",
				"retval": "num_flt",
				"shortDesc": ""
			},
			"canvas": {
				"desc": "[HTMLDivElement]",
				"isval": true,
				"name": "canvas",
				"retval": "obj",
				"shortDesc": ""
			},
			"ClearFocus": "#1362225380",
			"CreateImage": {
				"desc": "Create a sprite object which can be drawn on the GLView",
				"name": "CreateImage",
				"pNames": ["file", "callback"],
				"pTypes": ["str_pth", {
					"desc": "Callback",
					"name": "callback",
					"retval": "",
					"shortDesc": "callback"
				}],
				"retval": "dso_glv",
				"shortDesc": ""
			},
			"DrawImage": {
				"desc": "Draws an image to the canvas",
				"name": "DrawImage",
				"pNames": ["image", "x", "y", "w", "h", "angle"],
				"pTypes": ["obj-glv Image", "num_frc", "num_frc", "num_frc", "num_frc", "num_deg"],
				"retval": "",
				"shortDesc": "Draw image to canvas"
			},
			"DrawSprite": {
				"desc": "Draws a part of an image to the canvas.",
				"name": "DrawSprite",
				"pNames": ["sheet", "sx", "sy", "sw", "sh", "dx", "dy", "dw", "dh", "angle"],
				"pTypes": ["obj-GLV Image", "num_pxl", "num_pxl", "num_pxl", "num_pxl", "num_frc", "num_frc", "num_frc", "num_frc", "num_deg"],
				"retval": "",
				"shortDesc": "Draw part of a sprite to the canvas"
			},
			"_Exec": {
				"desc": "calls _gfx.Exec()",
				"name": "Exec",
				"pNames": ["p1", "p2", "p3", "p4"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"_Execute": {
				"desc": "",
				"name": "Execute",
				"pNames": ["p1", "p2", "p3", "p4"],
				"pTypes": ["?", "?", "?", "?"],
				"shortDesc": ""
			},
			"Explode": "#1500174100",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetContext": {
				"desc": "Returns the current FastCanvas context",
				"name": "GetContext",
				"retval": "obj-ctx",
				"shortDesc": "returns the glv context"
			},
			"GetContext.ctx.capture": {
				"desc": "Captures the current cached context to a png image.\nThe path is relative to /sdcard but requires a leading '/', ie “/Pictures/mycapture.png”",
				"name": "ctx.capture",
				"pNames": ["x", "y", "w", "h", "fileName", "successCallback", "errorCallback"],
				"pTypes": ["num_pxl", "num_pxl", "num_pxl", "num_pxl", "str:“/sdcard_relative”", "fnc", "fnc"],
				"retval": "",
				"shortDesc": "Captures the canvas to a png image"
			},
			"GetContext.ctx.clearRect": {
				"desc": "<deprecated does nothing. ctx is automatically cleared after render()>",
				"name": "ctx.clearRect",
				"pNames": ["x", "y", "width", "height"],
				"pTypes": ["num_pxl", "num_pxl", "num_pxl", "num_pxl"],
				"retval": "",
				"shortDesc": "deprecated"
			},
			"GetContext.ctx._drawCommands": {
				"desc": "",
				"isval": true,
				"name": "ctx._drawCommands",
				"retval": "str",
				"shortDesc": ""
			},
			"GetContext.ctx.drawImage": {
				"desc": "Draws a part of a glv image to the glv context, where s are source coordinates and d destination coordinates.",
				"name": "ctx.drawImage",
				"pNames": ["image", "sx", "sy", "sw", "sh", "dx", "dy", "dw", "dh"],
				"pTypes": ["obj-glv Image", "num_pxl", "num_pxl", "num_pxl", "num_pxl", "num_pxl", "num_pxl", "num_pxl", "num_pxl"],
				"retval": "",
				"shortDesc": "Draws part of a sprite to the context"
			},
			"GetContext.ctx._globalAlpha": {
				"desc": "",
				"isval": true,
				"name": "ctx._globalAlpha",
				"retval": "num_frc",
				"shortDesc": ""
			},
			"GetContext.ctx.loadTexture": {
				"desc": "",
				"name": "ctx.loadTexture",
				"pNames": ["image", "successCallback", "errorCallback"],
				"pTypes": ["str_pth", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["metrics"],
					"pTypes": ["lst-[ width:num_pxl, height:num_pxl ]"],
					"shortDesc": "callback"
				}, {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["msg"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": ""
			},
			"GetContext.ctx.render": {
				"desc": "render the draw commands to the context",
				"name": "ctx.render",
				"retval": "",
				"shortDesc": "render draw commands"
			},
			"GetContext.ctx.resetTransform": {
				"desc": "Reset all transformations to default",
				"name": "ctx.resetTransform",
				"retval": "",
				"shortDesc": "Reset all transformations"
			},
			"GetContext.ctx.restore": {
				"desc": "Restore a previously saved context state",
				"name": "ctx.restore",
				"retval": "",
				"shortDesc": "Restore saved context"
			},
			"GetContext.ctx.rotate": {
				"desc": "Rotates the current applied transformation",
				"name": "ctx.rotate",
				"pNames": ["angle"],
				"pTypes": ["num_rad"],
				"retval": "",
				"shortDesc": "Rotates the transformation matrix"
			},
			"GetContext.ctx.save": {
				"desc": "Saves the current context state",
				"name": "ctx.save",
				"retval": "",
				"shortDesc": "Saves current context"
			},
			"GetContext.ctx.scale": {
				"desc": "Scales the current applied transformation matrix",
				"name": "ctx.scale",
				"pNames": ["a", "d"],
				"pTypes": ["num_frc", "num_frc"],
				"retval": "",
				"shortDesc": "Scale the transformation matrix"
			},
			"GetContext.ctx.setTransform": {
				"desc": "Set the current transformation matrix",
				"name": "ctx.setTransform",
				"pNames": ["a", "b", "c", "d", "tx", "ty"],
				"pTypes": ["num", "num", "num", "num", "num", "num"],
				"retval": "",
				"shortDesc": "Set current matrix"
			},
			"GetContext.ctx.transform": {
				"desc": "Apply an other transformation matrix to the current one",
				"name": "ctx.transform",
				"pNames": ["a", "b", "c", "d", "tx", "ty"],
				"pTypes": ["num", "num", "num", "num", "num", "num"],
				"retval": "",
				"shortDesc": "Transform the current matrix"
			},
			"GetContext.ctx.translate": {
				"desc": "'Moves' the current applied transformation matrix",
				"name": "ctx.translate",
				"pNames": ["tx", "ty"],
				"pTypes": ["num_pxl", "num_pxl"],
				"retval": "",
				"shortDesc": "'Move' the transformation matrix"
			},
			"GetContext.ctx.unloadTexture": {
				"desc": "",
				"name": "ctx.unloadTexture",
				"pNames": ["image"],
				"pTypes": ["str_pth"],
				"retval": "",
				"shortDesc": ""
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-GLView",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"height": {
				"desc": "height",
				"isval": true,
				"name": "height",
				"retval": "num_int",
				"shortDesc": ""
			},
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Render": {
				"desc": "Render all draw commands to the canvas",
				"name": "Render",
				"retval": "",
				"shortDesc": "Render draw commands"
			},
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": "#2938578932",
			"SetOnTouchMove": "#2039582034",
			"SetOnTouchUp": "#9861324731",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchable": "#2562918782",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769",
			"width": {
				"desc": "width",
				"isval": true,
				"name": "width",
				"retval": "num_int",
				"shortDesc": ""
			}
		}
	},
	"CreateImage": {
		"abbrev": "img",
		"desc": "#CreateImage.md",
		"name": "CreateImage",
		"pNames": ["file", "width", "height", "options", "pxw", "pxh"],
		"pTypes": ["str_pth", "num", "num", "str_com-fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically", "num_pxl", "num_pxl"],
		"retval": "dso-Image",
		"shortDesc": "Returns a new Image object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"Clear": {
				"desc": "Clears everything on the image except the background.",
				"name": "Clear",
				"shortDesc": "Clears the image content"
			},
			"ClearFocus": "#1362225380",
			"_Draw": {
				"desc": "Cache draw command when not autoupdating",
				"name": "Draw",
				"pNames": ["func", "p1", "p2", "p3", "p4", "p5", "p6", "p7"],
				"pTypes": ["str", "str", "num", "num", "num", "num", "num", "num"],
				"shortDesc": "Cache draw commands"
			},
			"DrawArc": {
				"desc": "Draws an elliptical arc by specifying the corners of the surrounding rectangle and the angle range of the arc to be drawn.",
				"name": "DrawArc",
				"pNames": ["x1", "y1", "x2", "y2", "start", "sweep"],
				"pTypes": ["num:corner 1", "num:corner 1", "num:corner 2", "num:corner 2", "num_deg", "num_deg"],
				"shortDesc": "Draws an elliptical arc"
			},
			"DrawCircle": {
				"desc": "Draws a Circle.",
				"name": "DrawCircle",
				"pNames": ["x", "y", "radius"],
				"pTypes": ["num", "num", "num:width relative"],
				"shortDesc": "Draws a Circle"
			},
			"DrawFrame": {
				"desc": "Draws the frame on a given time of a loaded gif file.",
				"name": "DrawFrame",
				"pNames": ["ms"],
				"pTypes": ["num_mls"],
				"shortDesc": "Draw gif frame on a specific time"
			},
			"DrawImage": {
				"desc": "Draws an Image:dso-CreateImage.\nSee [Android Developers](https://developer.android.com/reference/android/graphics/PorterDuff.Mode#enum-values_1) for 'mode' info",
				"name": "DrawImage",
				"pNames": ["image", "x", "y", "w", "h", "angle", "mode"],
				"pTypes": ["dso-CreateImage", "num", "num", "num", "num", "num_deg", "str-ADD|CLEAR|DARKEN|DST|DST_ATOP|DST_IN|DST_OUT|DST_OVER|LIGHTEN|MULTIPLY|OVERLAY|SCREEN|SRC|SRC_ATOP|SRC_IN|SRC_OUT|SRC_OVER|XOR"],
				"shortDesc": "Draws an Image"
			},
			"DrawImageMtx": {
				"desc": "Draws an image with a 2d [transformation matrix](https://docs.rainmeter.net/tips/transformation-matrix-guide).",
				"name": "DrawImageMtx",
				"pNames": ["image", "matrix"],
				"pTypes": ["dso-CreateImage", "lst-[a, b, c, d, tx, ty]"],
				"shortDesc": "Draws an image with a 2d transformation matrix"
			},
			"DrawLine": {
				"desc": "Draws a line.",
				"name": "DrawLine",
				"pNames": ["x1", "y1", "x2", "y2"],
				"pTypes": ["num", "num", "num", "num"],
				"shortDesc": "Draws a line"
			},
			"DrawPoint": {
				"desc": "Draws a single pixel.",
				"name": "DrawPoint",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": "Draws a single pixel"
			},
			"DrawRectangle": {
				"desc": "Draws a rectangle.",
				"name": "DrawRectangle",
				"pNames": ["x1", "y1", "x2", "y2"],
				"pTypes": ["num", "num", "num", "num"],
				"shortDesc": "Draws a rectangle"
			},
			"DrawSamples": {
				"desc": "Draws a vertically centered graph in relation to the specified range in both direction.\nThe sample value _0_ would be vertically centered, _-range_ at the top and _range_ at the bottom.\nThe sample x positions are evenly distributed over the whole image width.",
				"name": "DrawSamples",
				"pNames": ["data", "range"],
				"pTypes": ["lst-[ data:num_int ]", "num"],
				"shortDesc": "Draws a vertically centered sample graph"
			},
			"DrawText": {
				"desc": "Draws a text.",
				"name": "DrawText",
				"pNames": ["txt", "x", "y"],
				"pTypes": ["str", "num", "num"],
				"shortDesc": "Draws a text"
			},
			"Flatten": {
				"desc": "Applies certain modifications to the image data, such as translate, scale, skew or alpha.",
				"name": "Flatten",
				"shortDesc": "Applies modifications to the image data"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetName": {
				"desc": "Returns the name set via SetName.",
				"name": "GetName",
				"retval": "str",
				"shortDesc": "Returns the name set via SetName"
			},
			"GetParent": "#3557841648",
			"GetPixelColor": {
				"desc": "Returns the [r,g,b] values from a pixel on the image.",
				"name": "GetPixelColor",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"retval": "lst-[ red:num_dhx, green:num_dhx, blue:num_dhx ]",
				"shortDesc": "Returns color values of a pixel"
			},
			"GetPixelData": {
				"desc": "Returns the raw, png or jpg image data encoded as base64.",
				"name": "GetPixelData",
				"pNames": ["format", "left", "top", "width", "height"],
				"pTypes": ["str-rawbase64|pngbase64|jpgbase64", "num_int", "num_int", "num_int", "num_int"],
				"retval": "str_b64",
				"shortDesc": "Returns base64 encoded image data"
			},
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Image",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"MeasureText": {
				"desc": "Measure width and height of a given text with the current image settings.",
				"name": "MeasureText",
				"pNames": ["txt"],
				"pTypes": ["str"],
				"retval": "obj-{ width:num_frc&comma; height:num_frc }",
				"shortDesc": "Measures the size of a given text"
			},
			"Method": "#1023663567",
			"Move": {
				"desc": "Moves the content of the image to the specified position.",
				"name": "Move",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": "Moves the image content"
			},
			"Reset": {
				"desc": "Resets all transformations.",
				"name": "Reset",
				"shortDesc": "Reset all transformations"
			},
			"Rotate": {
				"desc": "Rotates the content.",
				"name": "Rotate",
				"pNames": ["angle", "pivotX", "pivotY"],
				"pTypes": ["num_deg", "num", "num"],
				"shortDesc": "Rotates the content"
			},
			"Save": {
				"desc": "Saves the image to a file on the local filesystem.",
				"name": "Save",
				"pNames": ["fileName", "quality"],
				"pTypes": ["str_pth", "num_prc-for jpg files"],
				"shortDesc": "Saves the image to a file"
			},
			"Scale": {
				"desc": "Scales the content by the given factors.",
				"name": "Scale",
				"pNames": ["x", "y"],
				"pTypes": ["num_fac", "num_fac"],
				"shortDesc": "Scales the content"
			},
			"SetAlpha": {
				"desc": "Change the image alpha to a value between 0 and 255, where 0 is full transparent.",
				"name": "SetAlpha",
				"pNames": ["alpha"],
				"pTypes": ["num_dhx"],
				"shortDesc": "Change the alpha value"
			},
			"SetAutoUpdate": {
				"desc": "En/disable updating the view after every drawing or transformation method.",
				"name": "SetAutoUpdate",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disables automatic view updates"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColor": {
				"desc": "Fills the image with a specific color.",
				"name": "SetColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Fills the image with a color"
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetImage": {
				"desc": "Set the content to an image:dso-\"CreateImage\" control or specify a path to an image which will then be loaded.",
				"name": "SetImage",
				"pNames": ["image", "width", "height", "options"],
				"pTypes": ["str_pth||dso-CreateImage", "num_frc", "num_frc", "str-rescale"],
				"shortDesc": "Change the content to an other image"
			},
			"SetLineWidth": {
				"desc": "Set the stroke width to a number in pixels.",
				"name": "SetLineWidth",
				"pNames": ["width"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Change the stroke width"
			},
			"SetMargins": "#1741900074",
			"SetMaxRate": {
				"desc": "Set a minimum timeout between two touch 'move' actions fired.",
				"name": "SetMaxRate",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": "Set a minimum OnTouchMove call timeout"
			},
			"SetName": {
				"desc": "Change the name of the image.",
				"name": "SetName",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": "Change the name of the image"
			},
			"SetOnLoad": {
				"desc": "Define a callback function which is called when the image has loaded in “async” mode.",
				"name": "SetOnLoad",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["img"],
					"pTypes": ["dso-CreateImage"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when image has loaded asynchronously"
			},
			"SetOnLongTouch": "#2735982374",
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": "#2938578932",
			"SetOnTouchMove": "#2039582034",
			"SetOnTouchUp": "#9861324731",
			"SetPadding": "#1923105617",
			"SetPaintColor": {
				"desc": "Change the current paint color for drawing methods.",
				"name": "SetPaintColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change the paint color"
			},
			"SetPaintStyle": {
				"desc": "Change the current paint style for drawing methods.",
				"name": "SetPaintStyle",
				"pNames": ["style"],
				"pTypes": ["str-Fill|Line"],
				"shortDesc": "Change the paint style"
			},
			"SetPixelData": {
				"desc": "Set the image to base64 encoded pixel data.",
				"name": "SetPixelData",
				"pNames": ["data", "width", "height", "options"],
				"pTypes": ["str_b64-&lt;rawbase64&gt;|data&colon;image/jpg;base64&comma;&lt;jpgbase64&gt;,data&colon;image/png;base64&comma;&lt;pngbase64&gt;", "num", "num", "str-px,icon,resize|rescale|square,fix:set bitmap size"],
				"shortDesc": "Set base64 encoded pixel data"
			},
			"SetPixelMode": {
				"desc": "En-/Disable pixel mode for the image so that all drawing methods use either control relative or pixel values.",
				"name": "SetPixelMode",
				"pNames": ["onoff"],
				"pTypes": ["bin"],
				"shortDesc": "Change the pixel mode for drawing methods"
			},
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTextSize": {
				"desc": "Change the size of drawn text.",
				"name": "SetTextSize",
				"pNames": ["size"],
				"pTypes": ["num"],
				"shortDesc": "Change the drawn text size"
			},
			"SetTouchable": "#2562918782",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Skew": {
				"desc": "Skews the content.",
				"name": "Skew",
				"pNames": ["x", "y"],
				"pTypes": ["num", "num"],
				"shortDesc": "Skews the content"
			},
			"Transform": {
				"desc": "Transform the content with a 2d transformation matrix.",
				"name": "Transform",
				"pNames": ["matrix"],
				"pTypes": ["lst"],
				"shortDesc": "Applies a transformation matrix to the content"
			},
			"Tween": "#2114624769",
			"Update": {
				"desc": "Update the view in disabled AutoUpdate mode.",
				"name": "Update",
				"shortDesc": "Update the view"
			}
		}
	},
	"CreateLayout": {
		"abbrev": "lay",
		"desc": "#CreateLayout.md",
		"name": "CreateLayout",
		"pNames": ["type", "options"],
		"pTypes": ["str-Linear|Absolute|Frame|Card", "str_com-TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|H/VCenter,Wrap,Horizontal|Vertical,FillX/Y"],
		"retval": "dso-Layout",
		"shortDesc": "Returns a new Layout object",
		"subf": {
			"AddChild": {
				"desc": "Adds a control to the layout.",
				"name": "AddChild",
				"pNames": ["child", "order"],
				"pTypes": ["dso", "num_int"],
				"shortDesc": "Add a control to the layout"
			},
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ChildToFront": {
				"desc": "Moves a child in front of all other children.",
				"name": "ChildToFront",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Moves a child to the layout front"
			},
			"ClearFocus": "#1362225380",
			"DestroyChild": {
				"desc": "Destroys and removes a child from the layout.",
				"name": "DestroyChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Destroys and removes a child"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChildOrder": {
				"desc": "Returns the z order of a child.",
				"name": "GetChildOrder",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"retval": "num_int",
				"shortDesc": "Returns the z order of a child"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Layout",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveChild": {
				"desc": "Removes a child from the layout.",
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Remove a child from the layout"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetChildMargins": {
				"desc": "Set margins of top-level children.",
				"name": "SetChildMargins",
				"pNames": ["left", "top", "right", "bottom", "mode"],
				"pTypes": ["num", "num", "num", "num_frc", "str-px|sp|dip|mm|pt"],
				"shortDesc": "Set margins of top-level children."
			},
			"SetChildTextSize": {
				"desc": "Change the text size of top-level children.",
				"name": "SetTextSize",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "str-px|dip|sp|mm|pt|pl:scales text in proportion with device resolution|ps:scales text in proportion with device resolution"],
				"shortDesc": "Change text size of top-level children."
			},
			"SetCornerRadius": {
				"desc": "Applies a corner radius to card layouts.",
				"name": "SetCornerRadius",
				"pNames": ["radius"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Apply corner radius to card layouts's"
			},
			"SetElevation": {
				"desc": "Applies a shadow to card layouts.",
				"name": "SetElevation",
				"pNames": ["elevation"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Apply shadow to card layouts's"
			},
			"SetEnabled": "#1602385882",
			"SetGravity": {
				"desc": "Adjust the placing of contained children.",
				"name": "SetGravity",
				"pNames": ["gravity"],
				"pTypes": ["str-Left,Top,Right,Bottom,VCenter,HCenter,FillX,FillY,FillXY"],
				"shortDesc": "Adjust the placing of contained children"
			},
			"SetMargins": "#1741900074",
			"SetOnChildChange": {
				"desc": "Defines a callback function which is called when the content of a child control has beed changed by the user.",
				"name": "SetOnChildChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["src"],
					"pTypes": ["dso"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the user changed a control content"
			},
			"SetOnLongTouch": "#2735982374",
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": "#2938578932",
			"SetOnTouchMove": "#2039582034",
			"SetOnTouchUp": "#9861324731",
			"SetOrientation": {
				"desc": "Change the children orientation.",
				"name": "SetOrientation",
				"pNames": ["orient"],
				"pTypes": ["str-Horizontal|Vertical"],
				"shortDesc": "Change the children orientation"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchable": "#2562918782",
			"SetTouchThrough": {
				"desc": "Define whether the layout should forward OnTouch events to underlying controls.",
				"name": "SetTouchThrough",
				"pNames": ["through"],
				"pTypes": ["bin"],
				"shortDesc": "Enable touch event forwarding"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateList": {
		"abbrev": "lst",
		"desc": "#CreateList.md",
		"name": "CreateList",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-bold:bold item titles|Expand:Expand list to full height inside scrollers,Menu:applies various settings to make the list appear like an in-app menu,Horiz:makes title and body text flow horizontally,html,FontAwesome,monospace,Normal,WhiteGrad|BlackGrad|AlumButton|GreenButton|OrangeButton,NoSound"],
		"retval": "dso-List",
		"shortDesc": "Returns a new List object",
		"subf": {
			"AddItem": {
				"desc": "Adds an entry to the list.",
				"name": "AddItem",
				"pNames": ["title", "body", "image"],
				"pTypes": ["str", "str", "str_pth"],
				"shortDesc": "Adds an entry to the list."
			},
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetItem": {
				"desc": "Returns item data of an item with a specific title.",
				"name": "GetItem",
				"pNames": ["title"],
				"pTypes": ["str"],
				"retval": "obj-{ title:str&comma; body:str&comma; image:str_pth }",
				"shortDesc": "Returns item data by a title."
			},
			"GetItemByIndex": {
				"desc": "Returns item data of an item on a specific index.",
				"name": "GetItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"retval": "obj-{ title:str&comma; body:str&comma; image:str_pth }",
				"shortDesc": "Returns item data by an index."
			},
			"GetLeft": "#1237814406",
			"GetLength": {
				"desc": "Returns the amount of items in the lists.",
				"name": "GetLength",
				"retval": "num_int",
				"shortDesc": "Returns the list length"
			},
			"GetList": {
				"desc": "Returns the full list data as an object.",
				"name": "GetList",
				"pNames": ["delim"],
				"pTypes": ["str"],
				"retval": "lst-[{ title:str&comma; body:str&comma; image:str_pth }]",
				"shortDesc": "Returns the whole list as object"
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-List",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"InsertItem": {
				"desc": "Inserts an item at s specific index in the list.",
				"name": "InsertItem",
				"pNames": ["index", "title", "body", "image"],
				"pTypes": ["num_int", "str", "str", "str_pth"],
				"shortDesc": "Inserts an item into the list"
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveAll": {
				"desc": "Removes all entries of the list.",
				"name": "RemoveAll",
				"shortDesc": "Clears the list"
			},
			"RemoveItem": {
				"desc": "Removes an item with a specific title from the list.",
				"name": "RemoveItem",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": "Removes an item by its title"
			},
			"RemoveItemByIndex": {
				"desc": "Removes an item on a specific index from the list",
				"name": "RemoveItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"shortDesc": "Removes an item by its index"
			},
			"ScrollToItem": {
				"desc": "Scrolls the list to an item with a specific title.",
				"name": "ScrollToItem",
				"pNames": ["title", "body"],
				"pTypes": ["str", "str"],
				"shortDesc": "Scrolls to an item by its title"
			},
			"ScrollToItemByIndex": {
				"desc": "Scrolls the list to an item on a specific index.",
				"name": "ScrollToItemByIndex",
				"pNames": ["index"],
				"pTypes": ["num_int"],
				"shortDesc": "Scrolls the list to a specific index"
			},
			"SelectItem": {
				"desc": "Highlights an item with a specific title.",
				"name": "SelectItem",
				"pNames": ["title", "body", "scroll"],
				"pTypes": ["str", "str", "bin"],
				"shortDesc": "Highlight an item by its title and body"
			},
			"SelectItemByIndex": {
				"desc": "Highlights an item on a specific index.",
				"name": "SelectItemByIndex",
				"pNames": ["index", "scroll"],
				"pTypes": ["num_int", "bin"],
				"shortDesc": "Highlight an item by its index"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetColumnWidths": {
				"desc": "Changes the coloumn withs for title, body and icon. Often used with the “Horiz” option.",
				"name": "SetColumnWidths",
				"pNames": ["icon", "title", "body", "mode"],
				"pTypes": ["num_frc", "num_frc", "num_frc", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Change coloumn widths"
			},
			"SetDivider": {
				"desc": "Changes the item divider height and color.",
				"name": "SetDivider",
				"pNames": ["height", "color"],
				"pTypes": ["num_frc", "str_col"],
				"shortDesc": "Changes the divider style"
			},
			"SetEllipsize": "#0897234673",
			"SetEllipsize1": {
				"desc": "Will cause the element titles to be broken with ... at the start or the end if it cannot fit in the control.",
				"name": "SetEllipsize1",
				"pNames": ["mode"],
				"pTypes": ["str-start|middle|end"],
				"shortDesc": "Auto-crop titles to fit in control"
			},
			"SetEllipsize2": {
				"desc": "Will cause the element bodies to be broken with ... at the start or the end if it cannot fit in the control.",
				"name": "SetEllipsize2",
				"pNames": ["mode"],
				"pTypes": ["str-start|middle|end"],
				"shortDesc": "Auto-crop bodys to fit in control"
			},
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHiTextColor1": {
				"desc": "Change the highlight color of titles when selected.",
				"name": "SetHiTextColor1",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change selected title highlight color"
			},
			"SetHiTextColor2": {
				"desc": "Change the highlight color of bodies when selected.",
				"name": "SetHiTextColor2",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change selected body highlight color"
			},
			"SetIconMargins": {
				"desc": "Change the outer icon border distance.",
				"name": "SetIconMargins",
				"pNames": ["left", "top", "right", "bottom", "mode"],
				"pTypes": ["num_frc", "num_frc", "num_frc", "num_frc", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Change icon margins"
			},
			"SetIconSize": {
				"desc": "Changes the icon size.",
				"name": "SetIconSize",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Change the icon size"
			},
			"SetItem": {
				"desc": "Change the content of an element with a specific title.",
				"name": "SetItem",
				"pNames": ["title", "newTitle", "newBody", "newImage"],
				"pTypes": ["str", "str", "str", "str_pth"],
				"shortDesc": "Change the content of an element by its title"
			},
			"SetItemByIndex": {
				"desc": "Change the content of an element on a specific index.",
				"name": "SetItemByIndex",
				"pNames": ["index", "newTitle", "newBody", "newImage"],
				"pTypes": ["num_int", "str", "str", "str_pth"],
				"shortDesc": "Change the content of an element by its index"
			},
			"SetList": {
				"desc": "Set the content of the whole list.",
				"name": "SetList",
				"pNames": ["list", "delim"],
				"pTypes": ["str_lst-title|title&colon;icon|title&colon;body&colon;icon", "str"],
				"shortDesc": "Set the content of the whole list"
			},
			"SetMargins": "#1741900074",
			"SetOnLongTouch": "#2735982374",
			"SetOnTouch": "#2398750419",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTextColor": "#0175303923",
			"SetTextColor1": {
				"desc": "Change the default text color of titles.",
				"name": "SetTextColor1",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change the default text color of titles."
			},
			"SetTextColor2": {
				"desc": "Change the default text color of bodies.",
				"name": "SetTextColor2",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change the default text color of bodies"
			},
			"SetTextMargins": {
				"desc": "Define a distance to other controls on each side of the control.",
				"name": "SetTextMargins",
				"pNames": ["left", "top", "right", "bottom", "mode", "options"],
				"pTypes": ["num", "num", "num", "num_frc", "str-px|sp|dip|mm|pt", "str-inner:around each individual title and body|outer:around both title and body together"],
				"shortDesc": "Define distances to other controls"
			},
			"SetTextShadow": "#1093247031",
			"SetTextShadow1": {
				"desc": "Apply text shadows to titles.",
				"name": "SetTextShadow1",
				"pNames": ["radius", "dx", "dy", "color"],
				"pTypes": ["num_deg", "num_int", "num_int", "str_col"],
				"shortDesc": "Apply shadow to titles"
			},
			"SetTextShadow2": {
				"desc": "Apply text shadows to bodies.",
				"name": "SetTextShadow2",
				"pNames": ["radius", "dx", "dy", "color"],
				"pTypes": ["num_deg", "num_int", "num_int", "str_col"],
				"shortDesc": "Apply shadow to bodies"
			},
			"SetTextSize": "#5019790423",
			"SetTextSize1": {
				"desc": "Change the text size for titles.",
				"name": "SetTextSize1",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Set title text size"
			},
			"SetTextSize2": {
				"desc": "Change the text size for bodies.",
				"name": "SetTextSize2",
				"pNames": ["size", "mode"],
				"pTypes": ["num", "str_com-px|sp|dip|mm|pt"],
				"shortDesc": "Set body text size"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateListDialog": {
		"abbrev": "ldg",
		"desc": "#CreateListDialog.md",
		"name": "CreateListDialog",
		"pNames": ["title", "list", "options"],
		"pTypes": ["str", "str", "str_com-Multi|?"],
		"retval": "dso-ListDialog",
		"shortDesc": "Returns a new ListDialog object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Dismiss": "#1924613953",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-ListDialog",
				"shortDesc": "Returns the control class name"
			},
			"Hide": "#5372805812",
			"Method": "#1023663567",
			"SetBackColor": "#3857861627",
			"SetBackground": "#1239127541",
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches a list item.",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["title", "checked"],
					"pTypes": ["str", "bin"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Define a callback function for touch events"
			},
			"SetSize": "#1296070870",
			"SetTextColor": "#0175303923",
			"SetTitle": {
				"desc": "Change the dialog title.",
				"name": "SetTitle",
				"pNames": ["title"],
				"pTypes": ["str"],
				"shortDesc": "Change the dialog title"
			},
			"Show": "#1243391562"
		}
	},
	"CreateLocator": {
		"abbrev": "loc",
		"desc": "#CreateLocator.md",
		"name": "CreateLocator",
		"pNames": ["type", "options"],
		"pTypes": ["str_com-GPS,Network", "str_com"],
		"retval": "dso-Locator",
		"shortDesc": "Returns a new Locator object",
		"subf": {
			"GetBearingTo": {
				"desc": "Returns the approximate initial bearing in degrees East of true North when traveling along the shortest path between this location and the given location.",
				"name": "GetBearingTo",
				"pNames": ["latitude", "longitude"],
				"pTypes": ["num", "num"],
				"retval": "num",
				"shortDesc": "Calculate bearing between current and given position"
			},
			"GetDistanceTo": {
				"desc": "Returns the approximate distance in meters between this location and the given location.",
				"name": "GetDistanceTo",
				"pNames": ["latitude", "longitude"],
				"pTypes": ["num", "num"],
				"retval": "num",
				"shortDesc": "Calculate distance between current and given position in meters"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Locator",
				"shortDesc": "Returns the control class name"
			},
			"SetOnChange": {
				"desc": "Define a function which is called when some of the values changed.",
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["data", "time"],
					"pTypes": ["obj-{ provider:str&comma; latitude:num&comma; longitude:num&comma; speed:num&comma; bearing:num&comma; altitude:num&comma; accuracy:num_met }", "num_mls"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when some of the values changed"
			},
			"SetRate": {
				"desc": "Set Locator update frequency in seconds",
				"name": "SetRate",
				"pNames": ["rate"],
				"pTypes": ["num_sec"],
				"shortDesc": "Locator update frequency in seconds"
			},
			"Start": {
				"desc": "Start the locator.",
				"name": "Start",
				"shortDesc": "Start locator"
			},
			"Stop": {
				"desc": "Stop the locator.",
				"name": "Stop",
				"shortDesc": "Stop locator"
			}
		}
	},
	"CreateMediaPlayer": {
		"abbrev": "ply",
		"desc": "#CreateMediaPlayer.md",
		"name": "CreateMediaPlayer",
		"retval": "dso-MediaPlayer",
		"shortDesc": "Returns a new MediaPlayer object",
		"subf": {
			"Close": {
				"desc": "Close the media player and thus make it unuseable for further use.",
				"name": "Close",
				"shortDesc": "Close the media player."
			},
			"GetDuration": {
				"desc": "Returns the total duration of the currently loaded song in seconds.",
				"name": "GetDuration",
				"retval": "num_sec",
				"shortDesc": "Get the song length in seconds"
			},
			"GetPosition": {
				"desc": "Returns the elapsed playtime in seconds.",
				"name": "GetPosition",
				"retval": "num_sec",
				"shortDesc": "Get  elapsed playtime in seconds"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-MediaPlayer",
				"shortDesc": "Returns the control class name"
			},
			"IsLooping": {
				"desc": "Checks if the media player will replay the song from the begining if it has finished.",
				"name": "IsLooping",
				"shortDesc": "Returns if the player is looping."
			},
			"IsPlaying": {
				"desc": "Checks if the media player is currently playing.",
				"name": "IsPlaying",
				"shortDesc": "Get current playing state"
			},
			"IsReady": {
				"desc": "Checks if the media player is ready for use.",
				"name": "IsReady",
				"shortDesc": "Returns if player is useable yet"
			},
			"Pause": {
				"desc": "Pause the current playing song.",
				"name": "Pause",
				"shortDesc": "Pause the current playing song"
			},
			"Play": {
				"desc": "Play the current loaded song from the last paused time or from a given start time in in seconds.",
				"name": "Play",
				"pNames": ["from"],
				"pTypes": ["num_sec"],
				"shortDesc": "Play the current loaded song"
			},
			"SeekTo": {
				"desc": "Seek the player to a given time in seconds.",
				"name": "SeekTo",
				"pNames": ["time"],
				"pTypes": ["num_flt"],
				"shortDesc": "Seek the player to a given time"
			},
			"SetFile": {
				"desc": "Load a sound file to the media player.",
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Load a sound file to the player"
			},
			"SetLooping": {
				"desc": "Define whether the media player should replay the song when completed.",
				"name": "SetLooping",
				"pNames": ["loop"],
				"pTypes": ["bin"],
				"shortDesc": "Set looping mode"
			},
			"SetOnComplete": {
				"desc": "Define a callback function which is called when a playing sound file has finished playing.",
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the player has finished playing a track"
			},
			"SetOnReady": {
				"desc": "Define a callback function which is called when the player is ready for use.",
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the player is ready for use"
			},
			"SetOnSeekDone": {
				"desc": "Define a callback function which is called when a seeking process is done.",
				"name": "SetOnSeekDone",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when ply.Seek has finished"
			},
			"SetVolume": {
				"desc": "Change the volume of the playing song.",
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_prc", "num_prc"],
				"shortDesc": "Set the playing volume"
			},
			"Stop": {
				"desc": "Stop playing a song.",
				"name": "Stop",
				"shortDesc": "Stop playing a song"
			}
		}
	},
	"CreateMediaStore": {
		"abbrev": "med",
		"desc": "The MediaStore is used to query audio information from the android provider or from the device in the “/sdcard/Music” folder.",
		"name": "CreateMediaStore",
		"retval": "dso-MediaStore",
		"shortDesc": "Returns a new MediaStore object",
		"subf": {
			"GetAlbumArt": {
				"desc": "Loads the album image to an existing image:dso-CreateImage.",
				"name": "GetAlbumArt",
				"pNames": ["image", "id", "options"],
				"pTypes": ["dso-CreateImage", "num_int", "str-internal|external"],
				"retval": "bin",
				"shortDesc": "Load the album art to an image"
			},
			"GetSongArt": {
				"desc": "Loads the song image to an existing image:dso-CreateImage.",
				"name": "GetSongArt",
				"pNames": ["image", "id", "options"],
				"pTypes": ["dso-CreateImage", "num_int", "str-internal|external"],
				"retval": "bin",
				"shortDesc": "Load the song art to an image"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-MediaStore",
				"shortDesc": "Returns the control class name"
			},
			"QueryAlbums": {
				"desc": "Search for media albums.",
				"name": "QueryAlbums",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "str:coloumns-album,\\_id,albumArt,artist,numSongs,firstYear,lastYear", "str-internal|external"],
				"shortDesc": "Search for media albums"
			},
			"QueryArtists": {
				"desc": "Search for media artists.",
				"name": "QueryArtists",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "str:coloumns-\\_id,artist,numAlbums,numTracks", "str-internal|external"],
				"shortDesc": "Search for media artists"
			},
			"QueryMedia": {
				"desc": "Search for media.",
				"name": "QueryMedia",
				"pNames": ["filter", "sort", "options"],
				"pTypes": ["str_sql", "str:coloumns-title,\\_id,duration,size,uri,album,albumID,artist,artistId", "str-internal|external"],
				"shortDesc": "Search for media"
			},
			"SetOnAlbumsResult": {
				"desc": "Define a callback function which is called when an album query has finished.",
				"name": "SetOnAlbumsResult",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["lst-[{ album:str&comma; id:num_int&comma; albumArt:str_pth&comma; artist:str&comma; numSongs:num_int&comma; firstYear:str&comma; lastYear:str }]"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when album query has finished"
			},
			"SetOnArtistsResult": {
				"desc": "Define a callback function which is called when a artist query has finished.",
				"name": "SetOnArtistsResult",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["lst-[{ id:num_int&comma; artist:str&comma; numAlbums:num_int&comma; numTracks:num_int }]"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when artist query has finished"
			},
			"SetOnMediaResult": {
				"desc": "Define a callback function which is called when a media query has finished.",
				"name": "SetOnMediaResult",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["lst-[{ title:str&comma; id:num_int&comma; duration:num_mls&comma; size:num_byt&comma; uri:str&comma; album:str&comma; albumID:num_int&comma; artist:str&comma; artistId:num_int }]"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when media query has finished"
			}
		}
	},
	"CreateNetClient": {
		"abbrev": "net",
		"desc": "#CreateNetClient.md",
		"name": "CreateNetClient",
		"pNames": ["type"],
		"pTypes": ["str-UDP:fast but does not guarantee data correctness|TCP:slow but guarantees data correctness,Raw:drop 4 Byte header before every message"],
		"retval": "dso-NetClient",
		"shortDesc": "Returns a new NetClient object",
		"subf": {
			"AutoReceive": {
				"desc": "Receive TCP received data automatically by calling the OnReceive callback.",
				"name": "AutoReceive",
				"pNames": ["server", "port", "mode"],
				"pTypes": ["str_url", "num_int", "str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16"],
				"shortDesc": "Calls the OnReceive callback for incoming TCP data"
			},
			"Close": {
				"desc": "Closes the NetClient socket.",
				"name": "Close",
				"shortDesc": "Closes the NetClient socket"
			},
			"Connect": {
				"desc": "Connect the NetClient to a server.",
				"name": "Connect",
				"pNames": ["address", "port"],
				"pTypes": ["str_url", "num_int"],
				"shortDesc": "Connect to a server"
			},
			"Disconnect": {
				"desc": "Disconnect the NetClient from the server.",
				"name": "Disconnect",
				"shortDesc": "Disconnect from server"
			},
			"DownloadFile": {
				"desc": "Downloads a file via TCP from the server.",
				"name": "DownloadFile",
				"pNames": ["file"],
				"pTypes": ["str-url"],
				"shortDesc": "Downloads a file via TCP from the server"
			},
			"GetBroadcastAddress": {
				"desc": "Returns the broadcast address of UDP connections.",
				"name": "GetBroadcastAddress",
				"retval": "str",
				"shortDesc": "Returns the broadcast address of UDP connections."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-NetClient",
				"shortDesc": "Returns the control class name"
			},
			"IsConnected": {
				"desc": "Checks if the NetClient is connected to a server.",
				"name": "IsConnected",
				"shortDesc": "Get NetClient connected state"
			},
			"IsEnabled": "#1744802827",
			"ReceiveBytes": {
				"desc": "Receive data as bytes.",
				"name": "ReceiveBytes",
				"pNames": ["mode"],
				"pTypes": ["str-Int|Hex"],
				"retval": "lst-[ bytes:num_byt ]",
				"shortDesc": "Receive data as bytes"
			},
			"ReceiveDatagram": {
				"desc": "Receive an UDP Datagram.",
				"name": "ReceiveDatagram",
				"pNames": ["mode", "port", "timeout"],
				"pTypes": ["str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16", "num_int", "num"],
				"retval": "str",
				"shortDesc": "Receive an UDP Datagram"
			},
			"ReceiveDatagrams": {
				"desc": "Receive datagrams over UDP and calls the OnReceive callback for each one.",
				"name": "ReceiveDatagrams",
				"pNames": ["port", "mode"],
				"pTypes": ["num_int", "str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16"],
				"shortDesc": "Receive UDP datagrams"
			},
			"ReceiveFile": {
				"desc": "Receive a file via TCP from the server.",
				"name": "ReceiveFile",
				"pNames": ["file", "wait"],
				"pTypes": ["str", "num"],
				"retval": "str",
				"shortDesc": "Receive a file via TCP from the server"
			},
			"ReceiveText": {
				"desc": "Receive text from TCP connection.",
				"name": "ReceiveText",
				"pNames": ["mode"],
				"pTypes": ["str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16"],
				"retval": "str",
				"shortDesc": "Receive text over TCP"
			},
			"ReceiveVideoStream": {
				"desc": "Receive video from TCP connection.\n\n<premium>",
				"name": "ReceiveVideoStream",
				"pNames": ["port", "img"],
				"pTypes": ["num", "dso-Image"],
				"retval": "str",
				"shortDesc": "Receive video over UDP"
			},
			"SendBytes": {
				"desc": "Send bytes over TCP connection.",
				"name": "SendBytes",
				"pNames": ["data", "mode"],
				"pTypes": ["lst-[ bytes:num_byt ]||str_com-bytes:hexadecimal 00&period;&period;FF", "str-Int|Hex"],
				"shortDesc": "Send bytes over TCP"
			},
			"SendDatagram": {
				"desc": "Send an UDP Datagram.",
				"name": "SendDatagram",
				"pNames": ["data", "mode", "address", "port", "options"],
				"pTypes": ["str", "str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16", "str_url", "num_int", "str-Text|Hex|Bytes"],
				"shortDesc": "Send an UDP Datagram"
			},
			"SetDataMode": {
				"desc": "Enable sending data in several modes.",
				"name": "SetDataMode",
				"pNames": ["mode"],
				"pTypes": ["str-Hex:comma separated text value|Int:comma separated byte numbers|Text:string of text characters|&lt;encoding:\"UTF-16L/BE\"&gt;"],
				"shortDesc": "Define data format for outgoing data"
			},
			"SetSplitMode": {
				"desc": "Tells AutoReceive how to split received data. Splitted data will result in multiple OnReceive calls.\np2 and p3 have different purposes for different modes:\n<style type='text/css'>th{align:center;}td{padding:0 10px 0 10px;}</style><table><tr><th>mode</th><th>p1</th><th>p2</th></tr><tr><td>Size</td><td>Size of one data package</td><td>-</td></tr><tr><td>End</td><td>Byte indicating end of data</td><td>-</td></tr><tr><td>Start-End</td><td>Byte indicating start of data</td><td>Byte indicating end of data</td></tr></table>",
				"name": "SetSplitMode",
				"pNames": ["mode", "p2", "p3"],
				"pTypes": ["str-End|Start-End|Size", "str||num_int", "str||num_int"],
				"shortDesc": "Specify how to split received data"
			},
			"SendText": {
				"desc": "Sends text over TCP connection.",
				"name": "SendText",
				"pNames": ["text", "mode"],
				"pTypes": ["str", "str-US-ASCII|UTF-8|UTF-16LE|UTF-16BE|UTF-16"],
				"shortDesc": "Sends text over TCP"
			},
			"SetOnConnect": {
				"desc": "Define a callback function which is called when a TCP connection could be established or if it failed to connect to the server. The _connected_ state is passed as first argument.",
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["connected"],
					"pTypes": ["bin"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when TCP connected or failed to connect to a server."
			},
			"SetOnDownload": {
				"desc": "Define a callback function which is called when a TCP file download has finished.",
				"name": "SetOnDownload",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["something"],
					"pTypes": ["num_int"],
					"shortDesc": "callback"
				}],
				"shortDesc": "called when a file download has finished"
			},
			"SetOnReceive": {
				"desc": "Define a callback function which is called when a TCP NetClient received some data when AutoReceive was set.",
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["address"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a TCP NetClient received some data via AutoReceive"
			},
			"SetTimeout": {
				"desc": "Define an interval in which the client should check for new messages.",
				"name": "SetTimeout",
				"pNames": ["seconds"],
				"pTypes": ["num_sec"],
				"shortDesc": "Timeout between two receive checks"
			},
			"WakeOnLan": {
				"desc": "Wakes up PC's (and perhaps other devices) when the BIOS/device is configured for it.\n\n<premium>",
				"name": "WakeOnLan",
				"pNames": ["ip", "mac"],
				"pTypes": ["str", "str"],
				"shortDesc": "Wake up devices if they are configured to"
			}
		}
	},
	"CreateNotification": {
		"abbrev": "ntf",
		"desc": "#CreateNotification.md",
		"name": "CreateNotification",
		"pNames": ["options"],
		"pTypes": ["str_com-Ongoing,AutoCancel,FullScreen"],
		"retval": "dso-Notification",
		"shortDesc": "Returns a new Notification object",
		"subf": {
			"Cancel": {
				"desc": "Cancel a notification with a specific id.",
				"name": "Cancel",
				"pNames": ["id"],
				"pTypes": ["str"],
				"shortDesc": "Cancel a notification"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Notification",
				"shortDesc": "Returns the control class name"
			},
			"Listen":{
				"desc": "Listens for any notification the user gets. Requires notification access by granted by android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS.",
				"name": "Listen",
				"pNames": ["options"],
				"pTypes": ["str-CheckPerms"],
				"shortDesc": "Listen for any notifications"
			},
			"Notify": {
				"desc": "Send the notification to the user.",
				"name": "Notify",
				"pNames": ["id"],
				"pTypes": ["str"],
				"shortDesc": "Send the notification"
			},
			"SetLargeImage": {
				"desc": "Set an image which will be displayed bigger than usual.",
				"name": "SetLargeImage",
				"pNames": ["image"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set a large image in the notification"
			},
			"SetLights": {
				"desc": "Activate the device notification LEDs.",
				"name": "SetLights",
				"pNames": ["color", "onMs", "offMs"],
				"pTypes": ["str_col", "num_mls", "num_mls"],
				"shortDesc": "Activate device notification LEDs"
			},
			"SetMessage": {
				"desc": "Set notification texts.",
				"name": "SetMessage",
				"pNames": ["ticker", "title", "text", "extra"],
				"pTypes": ["str", "str", "str", "str"],
				"shortDesc": "Set notification texts"
			},
			"SetOnNotify": {
				"desc": "Called when a notification has been intercepted.",
				"name": "SetOnNotify",
				"pNames": ["callback"],
				"pTypes": [{
						"desc": "Callback function",
						"name": "callback",
						"pNames": ["source", "title", "message", "extra", "type"],
						"pTypes": ["str", "str", "str", "str", "str-Normal|?"],
						"shortDesc": "callback"
					}],
				"shortDesc": "Called when notification intercepted"
			},
			"SetSmallImage": {
				"desc": "Set a small image in your notification.",
				"name": "SetSmallImage",
				"pNames": ["image"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set a small image icon"
			}
		}
	},
	"CreateNxt": {
		"abbrev": "nxt",
		"desc": "The NXT object is used to manage the connection between your Android phone and the Lego Mindstorms NXT brick.\n<deprecated Please install and visit the NXT-Docs from the Plugins page>",
		"name": "CreateNxt",
		"retval": "dso-Nxt",
		"shortDesc": "Returns a new Nxt object",
		"subf": {
			"Beep": {
				"desc": "Play tone with given frequency for a given time in milliseconds.",
				"name": "Beep",
				"pNames": ["frequency", "duration"],
				"pTypes": ["num_hrz", "num_mls"],
				"shortDesc": "Play frequency tone"
			},
			"Brake": {
				"desc": "Brakes motors by lowering the input power.",
				"name": "Brake",
				"pNames": ["motors"],
				"pTypes": ["str-A,B,C|ABC"],
				"shortDesc": "Brakes motors smoothly"
			},
			"CheckConnection": {
				"desc": "Check whether phone/tablet is connected to the NXT.",
				"name": "CheckConnection",
				"retval": "bin",
				"shortDesc": "Check if device is connected to NXT"
			},
			"Connect": {
				"desc": "Connects to the NXT device via Bluetooth.",
				"name": "Connect",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": "Connect to NXT"
			},
			"Disconnect": {
				"desc": "Disconnect Phone/Tablet from NXT.",
				"name": "Disconnect",
				"shortDesc": "Disconnect NXT"
			},
			"Drive": {
				"desc": "commands NXT to drive motors",
				"name": "Drive",
				"pNames": ["motors", "power", "rotations", "options"],
				"pTypes": ["str-A,B,C|ABC", "num_prc", "num_prc--100..100", "num_flt-0|rotations"],
				"shortDesc": ""
			},
			"FileFindFirst": {
				"desc": "Find the first program file of the NXT.",
				"name": "FileFindFirst",
				"pNames": ["pattern"],
				"pTypes": ["str"],
				"retval": "str",
				"shortDesc": "Find first program file"
			},
			"FileFindNext": {
				"desc": "Find next program file on the NXT.",
				"name": "FileFindNext",
				"pNames": ["handle"],
				"pTypes": ["str"],
				"retval": "str",
				"shortDesc": "Find next program"
			},
			"GetBtAddress": {
				"desc": "Returns Bluetooth address of a connected NXT brick",
				"name": "GetBtAddress",
				"retval": "str",
				"shortDesc": "Returns NXT Bt address"
			},
			"GetBtName": {
				"desc": "Returns Bluetooth name of a connected NXT brick",
				"name": "GetBtName",
				"retval": "str",
				"shortDesc": "Returns NXT Bt name"
			},
			"GetCurrentProgram": {
				"desc": "Returns the name of the currently running program.",
				"name": "GetCurrentProgram",
				"retval": "str",
				"shortDesc": "Returns the current running program name"
			},
			"GetRotationCount": {
				"desc": "Returns the wheel encoder value of a motor.",
				"name": "GetRotationCount",
				"pNames": ["motor"],
				"pTypes": ["str-A,B,C|ABC"],
				"retval": "num_int",
				"shortDesc": "Returns a new wheel encoder value."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Nxt",
				"shortDesc": "Returns the control class name"
			},
			"IsBluetoothEnabled": {
				"desc": "Checks if bluetooth is enabled on the device.",
				"name": "IsBluetoothEnabled",
				"retval": "bin",
				"shortDesc": "Checks if bt is enabled"
			},
			"IsConnected": {
				"desc": "Checks if the device is connected to a NXT.",
				"name": "IsConnected",
				"retval": "bin",
				"shortDesc": "Checks if NXT is connected"
			},
			"IsEnabled": {
				"desc": "Checks if bluetooth is enabled on the device. Its the same as nxt.IsBluetoothEnabled.",
				"name": "IsBluetoothEnabled",
				"retval": "bin",
				"shortDesc": "Checks if bt is enabled"
			},
			"IsMotorIdle": {
				"desc": "Checks if a motor is currently powered",
				"name": "IsMotorIdle",
				"pNames": ["motor"],
				"pTypes": ["str-A,B,C|ABC"],
				"shortDesc": "Check if a motor is powered"
			},
			"IsPaired": {
				"desc": "Checks if a Bluetooth device with a given name is paired with our device.",
				"name": "IsPaired",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "bin",
				"shortDesc": "Checks if the device is paired with an other"
			},
			"PlaySoundFile": {
				"desc": "Play a sound file for a given amount of times.",
				"name": "PlaySoundFile",
				"pNames": ["file", "repeat"],
				"pTypes": ["str_pth", "num_int"],
				"shortDesc": "Play a sound file"
			},
			"ReadColorSensor": {
				"desc": "Read a color sensor value on the input where the sensor is plugged into.\n\nIn “ColorDetect” mode this function returns a value between 1 and 6 which represent the colors “black”, “blue”, “green”, “yellow”, “red”, or “white”.\nYou can use the ToColorName function to convert from these six values to a color name.\nAll other modes return a value between 0 and 1023.",
				"name": "ReadColorSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1", "str-ColorDetect|LightSense|RedSense|GreenSense|BlueSense"],
				"retval": "num_int-1..6 or 0..1023",
				"shortDesc": "Read a color sensor value"
			},
			"ReadDistanceSensor": {
				"desc": "Reads the distance measured by the ultrasonic sensor in centimeters.",
				"name": "ReadDistanceSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "num_flt",
				"shortDesc": "Get measured ultrasinic distance in cm"
			},
			"ReadLightSensor": {
				"desc": "Reads the intensity of the light currently being 'seen' by the NXT light sensor. If active is set true an additionall white LED will be turned on while sensing.",
				"name": "ReadLightSensor",
				"pNames": ["input", "active"],
				"pTypes": ["num_int-1..4", "bin"],
				"retval": "num_int-0..100",
				"shortDesc": "Measures the light intensity"
			},
			"ReadMail": {
				"desc": "Reads a message from the NXT brick's mail box. This message can be written using a normal NXT-G program running on the brick. This allows you to read values from NXT-G programs with your phone or tablet.",
				"name": "ReadMail",
				"pNames": ["mailbox", "type", "remove"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "bin"],
				"retval": "str",
				"shortDesc": "Reads a message from the NXT brick's mail box"
			},
			"ReadSoundSensor": {
				"desc": "Reads the sound pressure level of the surrounding.",
				"name": "ReadSoundSensor",
				"pNames": ["input", "mode"],
				"pTypes": ["num_int-1..4", "str-DB:Decibels|DbA:A-weighted Decibels"],
				"retval": "num_flt",
				"shortDesc": "Measure the sound pressure level"
			},
			"ReadTouchSensor": {
				"desc": "Returns whether the touch sensor switch is currently pushed.",
				"name": "ReadTouchSensor",
				"pNames": ["input"],
				"pTypes": ["num_int-1..4"],
				"retval": "bin",
				"shortDesc": "Check if the touch sensor is pressed"
			},
			"RequestEnable": {
				"desc": "Invokes system dialog box which could enable Bluetooth on tablet/phone when Bluetooth is disabled.",
				"name": "RequestEnable",
				"shortDesc": "Request enabling bluetooth if it isn't"
			},
			"Reset": {
				"desc": "Reset wheel encoder offset to 0.",
				"name": "Reset",
				"pNames": ["motors"],
				"pTypes": ["str-A,B,C|ABC"],
				"shortDesc": "Reset wheel encoder offset to 0."
			},
			"SendMail": {
				"desc": "Sends a message to the NXT brick's mail box.",
				"name": "SendMail",
				"pNames": ["mailbox", "type", "message"],
				"pTypes": ["num_int-1..10", "str-Text|Number|Logic", "str||num_int"],
				"shortDesc": "Sends a message to the NXT brick's mail box."
			},
			"SetInvert": {
				"desc": "Provides a convenient way to invert the direction of the motor commands.",
				"name": "SetInvert",
				"pNames": ["invert"],
				"pTypes": ["bin"],
				"shortDesc": "Inverts the direction of motor commands"
			},
			"SetLampColor": {
				"desc": "Changes the color sensor LED to one color of “White”, “Red”, “Green”, “Blue” or “Off”",
				"name": "SetLampColor",
				"pNames": ["input", "color"],
				"pTypes": ["num_int-1..4", "str_col-“White”|“Red”|“Green”|“Blue”|“Off”"],
				"shortDesc": "Change sensor LED color"
			},
			"SetOnConnect": {
				"desc": "Define a callback function which is called when the NXT has been connected via Bluetooth or if it failed to.",
				"name": "SetOnConnect",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["connected"],
					"pTypes": ["bin"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when NXT connection established or failed"
			},
			"SetOnConnected": {
				"desc": "Define a callback function which is called when the NXT has been successfully connected via Bluetooth",
				"name": "SetOnConnected",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when bt connection established"
			},
			"SetOnConnectEx": {
				"desc": "called when NXT has successfully connected via Bluetooth",
				"name": "SetOnConnectEx",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": ""
			},
			"ShowDevices": {
				"desc": "Shows the user a dialog box that contains a list of NXT bricks which are paired with the phone. The user can then select the brick to connect to via Bluetooth.",
				"name": "ShowDevices",
				"shortDesc": "Shows a list of paired NXT devices to connect to"
			},
			"StartProgram": {
				"desc": "Starts an NXT-G program on the NXT brick if available.",
				"name": "StartProgram",
				"pNames": ["name"],
				"pTypes": ["str_pth"],
				"shortDesc": "Starts an NXT-G program"
			},
			"Stop": {
				"desc": "Stop powering some motors.",
				"name": "Stop",
				"pNames": ["motors"],
				"pTypes": ["str-A,B,C|ABC"],
				"shortDesc": "Stop powering some motors."
			},
			"StopProgram": {
				"desc": "Stops a the currently running NXT-G program.",
				"name": "StopProgram",
				"shortDesc": "Stops the current running program"
			},
			"ToColorName": {
				"desc": "Converts a color integer received from ReadColorSensor to a meaningful color name.",
				"name": "ToColorName",
				"pNames": ["val"],
				"pTypes": ["num_int-1..6"],
				"retval": "str-black|blue|green|yellow|red|white",
				"shortDesc": "Convert color number to its name"
			}
		}
	},
	"CreateOverlay": {
		"abbrev": "ovl",
		"desc": "Overlays are displayed above everything on the screen - even on the home screen or above other applications. Overlays can be created from services as well which makes them almost perfect for interacting with them.\n\n<premium>",
		"name": "CreateOverlay",
		"pNames": ["options"],
		"pTypes": ["str_com"],
		"shortDesc": "Returns a new Overlay object",
		"subf": {
			"AddLayout": {
				"desc": "Adds a layout to the overlay.",
				"name": "AddLayout",
				"pNames": ["layout", "left", "top", "options"],
				"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str-px"],
				"shortDesc": "Adds layout to overlay"
			},
			"GetParent": "#3557841648",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"shortDesc": "GetType"
			},
			"RemoveLayout": {
				"desc": "Removes a layout from the overlay.",
				"name": "RemoveLayout",
				"pNames": ["layout"],
				"pTypes": ["dso-CreateLayout"],
				"shortDesc": "Remove layout from overlay"
			},
			"SetPosition": {
				"desc": "Defines the position of a contained layout.",
				"name": "SetPosition",
				"pNames": ["layout", "left", "top", "options"],
				"pTypes": ["dso-CreateLayout", "num_frc", "num_frc", "str-px"],
				"shortDesc": "Changes a child layout position"
			}
		}
	},
	"CreatePhoneState": {
		"abbrev": "pst",
		"desc": "#CreatePhoneState.md",
		"name": "CreatePhoneState",
		"pNames": ["types"],
		"pTypes": ["str-CellLocation,DataConnection,DataActivity,CallState,ServiceState,SignalStrength,CallForwarding,MessageWaiting"],
		"retval": "dso-PhoneState",
		"shortDesc": "Returns a new PhoneState object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-PhoneState",
				"shortDesc": "Returns the control class name"
			},
			"SetOnChange": {
				"desc": "Define a callback function which is called when a phone state has changed.",
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["type", "data"],
					"pTypes": ["str-CellLocation|DataConnection|DataActivity|CallState|ServiceState|SignalStrength|CallForwarding|MessageWaiting", "all"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a phone state has changed"
			},
			"Start": {
				"desc": "Start listening.",
				"name": "Start",
				"shortDesc": "Start listening"
			},
			"Stop": {
				"desc": "Stop listening.",
				"name": "Stop",
				"shortDesc": "Stop listening"
			}
		}
	},
	"CreatePlayStore": {
		"abbrev": "pls",
		"desc": "#CreatePlayStore.md",
		"name": "CreatePlayStore",
		"retval": "dso-PlayStore",
		"shortDesc": "Returns a new PlayStore object",
		"subf": {
			"GetBillingInfo": {
				"desc": "Get product info of paid items from Google Play.",
				"name": "GetBillingInfo",
				"pNames": ["prodIDs", "callback", "options"],
				"pTypes": ["str", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["items"],
					"pTypes": ["lst_obj-[{ skuDetailsToken:str&comma; productId:str&comma; type:str&comma; price:str&comma; price_amount_micros:num_int&comma; price_currency_code:str&comma; title:str&comma; description:str }]"],
					"shortDesc": "callback"
				}, "str-IAP:In-App purchases|SUBS:subscriptions"],
				"shortDesc": "Get product info from Google Play."
			},
			"GetPurchases": {
				"desc": "Get product info of purchased items from Google Play.",
				"name": "GetPurchases",
				"pNames": ["callback", "options"],
				"pTypes": [
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["items"],
						"pTypes": ["lst_obj-[{ skuDetailsToken:str&comma; productId:str&comma; type:str&comma; price:str&comma; price_amount_micros:num_int&comma; price_currency_code:str&comma; title:str&comma; description:str }]"],
						"shortDesc": "callback"
					},
					"str-SUBS"
				],
				"shortDesc": "Get purchased items from Google Play."
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-PlayStore",
				"shortDesc": "Returns the control class name"
			},
			"Purchase": {
				"desc": "Purchase an item on Google Play.",
				"name": "Purchase",
				"pNames": ["prodID", "token", "callback", "options"],
				"pTypes": ["str", "str", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["prodId", "orderId", "purchToken", "devToken", "packageName"],
					"pTypes": ["str", "str", "str", "str", "str"],
					"shortDesc": "callback"
				}, "str-SUBS"],
				"shortDesc": "Purchase an item on Google Play."
			}
		}
	},
	"CreateScroller": {
		"abbrev": "scr",
		"desc": "#CreateScroller.md",
		"name": "CreateScroller",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str_com-FillX|FillY|FillXY,Horizontal|Vertical,NoScrollBar,ScrollFade"],
		"retval": "dso-Scroller",
		"shortDesc": "Returns a new Scroller object",
		"subf": {
			"AddChild": {
				"desc": "Add a layout to the scroller.",
				"name": "AddChild",
				"pNames": ["layout"],
				"pTypes": ["dso-CreateLayout"],
				"shortDesc": "Add a layout control"
			},
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"DestroyChild": {
				"desc": "Removes and releases a child object.",
				"name": "DestroyChild",
				"pNames": ["layout"],
				"pTypes": ["dso-CreateLayout"],
				"shortDesc": "Devil rises and takes a child with him to hell"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetScrollX": {
				"desc": "Returns the horizontal scroll bar position.",
				"name": "GetScrollX",
				"retval": "num_frc",
				"shortDesc": "Get horizontal scroll bar position"
			},
			"GetScrollY": {
				"desc": "Returns the vertical scroll bar position.",
				"name": "GetScrollY",
				"retval": "num_frc",
				"shortDesc": "Get vertical scroll bar position"
			},
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Scroller",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"RemoveChild": {
				"desc": "Removes a scroller layout from the scroller.",
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Remove a scroller layout"
			},
			"ScrollBy": {
				"desc": "Scrolls relatively to the current scroll bar positions.",
				"name": "ScrollBy",
				"pNames": ["x", "y"],
				"pTypes": ["num_frc", "num_frc"],
				"shortDesc": "Scroll relative to the current position"
			},
			"ScrollTo": {
				"desc": "Scrolls to a given fixed position.",
				"name": "ScrollTo",
				"pNames": ["x", "y"],
				"pTypes": ["num_frc", "num_frc"],
				"shortDesc": "Scrolls to a given position"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSeekBar": {
		"abbrev": "skb",
		"desc": "#CreateSeekBar.md",
		"name": "CreateSeekBar",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str_com-FillX/Y"],
		"retval": "dso-SeekBar",
		"shortDesc": "Returns a new SeekBar object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-SeekBar",
				"shortDesc": "Returns the control class name"
			},
			"GetValue": {
				"desc": "Returns the current value of the seek bar.",
				"name": "GetValue",
				"retval": "num",
				"shortDesc": "Get current value"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": { "name": "SetColorFilter",
				"desc": "Adjust the visual color effect with a color and a given BlendMode. More information about BlendMode can be found in the [Android Developer page](https://developer.android.com/reference/android/graphics/BlendMode.html).",
				"pNames": ["color", "mode", "options"],
				"pTypes": ["str_col", "str-Add|Multiply|clear|darken|lighten|overlay|screen|xor|src_in|src_out|src_atop|src_over|dst_in|dst_out|dst_atop|dst_over", "str"],
				"shortDesc": "Adjust the visual color effect with different BlendModes"
			},
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetMaxRate": {
				"desc": "Change the minimum timeout in milliseconds between two OnChange calls.",
				"name": "SetMaxRate",
				"pNames": ["rate"],
				"pTypes": ["num_mls"],
				"shortDesc": "Set rate of OnChange calls"
			},
			"SetOnChange": "#2137502353",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetRange": {
				"desc": "Change the value which represents 100% of the seek bar. Default is 100",
				"name": "SetRange",
				"pNames": ["range"],
				"pTypes": ["num"],
				"shortDesc": "Set value range."
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetValue": {
				"desc": "Change the current seekbar value in the defined range.",
				"name": "SetValue",
				"pNames": ["val"],
				"pTypes": ["num"],
				"shortDesc": "Set current seekbar value"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSensor": {
		"abbrev": "sns",
		"desc": "#CreateSensor.md",
		"name": "CreateSensor",
		"pNames": ["type", "options"],
		"pTypes": ["str-Accelerometer|MagneticField|Orientation|Light|Proximity|Temperature|GameRotation|GeomagneticRotation|Gravity|Gyroscope|HeartRate|Acceleration|Pressure|Humidity|RotationMotion|StepCounter|StepDetector", "str_com-Slow|Medium|Fast|Fastest"],
		"retval": "dso-Sensor",
		"shortDesc": "Returns a new Sensor object",
		"subf": {
			"GetAzimuth": {
				"desc": "Returns the first/x/azimuth value of a sensor.",
				"name": "GetAzimuth",
				"retval": "num",
				"shortDesc": "Get first value of a sensor"
			},
			"GetNames": {
				"desc": "Returns a list of builtin sensors in your device.",
				"name": "GetNames",
				"retval": "str_com",
				"shortDesc": "Returns a list of builtin sensors"
			},
			"GetPitch": {
				"desc": "Returns the second/y/pitch value of a sensor.",
				"name": "GetPitch",
				"retval": "num",
				"shortDesc": "Get second value of a sensor"
			},
			"GetRoll": {
				"desc": "Returns the third/z/roll value of a sensor.",
				"name": "GetRoll",
				"retval": "num",
				"shortDesc": "Get third value of a sensor"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Sensor",
				"shortDesc": "Returns the control class name"
			},
			"GetValues": {
				"desc": "Returns all values of a sensor.",
				"name": "GetValues",
				"retval": "lst-[ first:num, second:num, third:num ]",
				"shortDesc": "Get all values from sensor"
			},
			"Method": "#1023663567",
			"SetMaxRate": {
				"desc": "Define a minimum timeout between two OnChage calls.",
				"name": "SetMaxRate",
				"pNames": ["rate"],
				"pTypes": ["num_mls"],
				"shortDesc": "Set maximum OnChange rate"
			},
			"SetMinChange": {
				"desc": "Define a minimum threshold value which triggers a OnChange call.",
				"name": "SetMinChange",
				"pNames": ["min"],
				"pTypes": ["num"],
				"shortDesc": "Set minimum value difference which triggers OnChange"
			},
			"SetOnChange": {
				"desc": "Define a callback function which is called when a sensor value has changed.",
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["first", "second", "third", "time"],
					"pTypes": ["num", "num", "num", "num_mls"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a sensor value has changed"
			},
			"Start": {
				"desc": "Start reading from the sensor.",
				"name": "Start",
				"shortDesc": "Start the sensor"
			},
			"Stop": {
				"desc": "Stop reading from the sensor.",
				"name": "Stop",
				"shortDesc": "Stop the sensor"
			}
		}
	},
	"CreateService": {
		"abbrev": "srv",
		"desc": "#CreateService.md",
		"name": "CreateService",
		"pNames": ["packageName", "className", "callback", "options"],
		"pTypes": ["str-this|&lt;package&gt;", "str-this|&lt;class&gt;", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}, "str_com-Persist:attempts to force restart if service killed"],
		"retval": "dso-Service",
		"shortDesc": "Returns a new Service object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Service",
				"shortDesc": "Returns the control class name"
			},
			"SendMessage": {
				"desc": "Sends a message to the service.",
				"name": "SendMessage",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": "Send message to service"
			},
			"SetInBackground": {
				"desc": "Run service in background.",
				"name": "SetInBackground",
				"shortDesc": "Run service in background"
			},
			"SetInForeground": {
				"desc": "Run service in foreground.",
				"name": "SetInForeground",
				"pNames": ["title", "text", "largeIcon", "smallIcon", "importance"],
				"pTypes": ["str", "str", "str_pth", "str_pth", "str-none|min|low|high"],
				"shortDesc": "Run service in foreground"
			},
			"SetOnMessage": {
				"desc": "Define a callback function which is called when a message arrived from the service.",
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["message"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when service sent a message"
			},
			"Stop": {
				"desc": "Stop the service.",
				"name": "Stop",
				"shortDesc": "Stop service"
			}
		}
	},
	"CreateShortcut": {
		"desc": "This method creates a shortcut of an app on your home screen - referencing to a js file runnable with DS.\nNote: since Android 9 this method prompts a system dialog",
		"name": "CreateShortcut",
		"pNames": ["name", "iconFile", "file", "options"],
		"pTypes": ["str", "str_pth", "str_pth", "str_com-Portrait|Landscape,Transparent,<i>NoDom</i>,Debug:start app in debug mode,Game:runs in GameView mode|remote"],
		"shortDesc": "Creates a Home-Screen shortcut to an app"
	},
	"CreateSmartWatch": {
		"abbrev": "smw",
		"desc": "Returns a SmartWatch object.",
		"name": "CreateSmartWatch",
		"pNames": ["type"],
		"pTypes": ["str-|Sony"],
		"retval": "dso-SmartWatch",
		"shortDesc": "Returns a new SmartWatch object",
		"subf": {
			"AddLayout": {
				"desc": "AddLayout adds a layout to the SmartWatch screen so that it is visible (if not hidden with SetVisibility)",
				"name": "AddLayout",
				"pNames": ["layout"],
				"pTypes": ["obj-SWlay"],
				"shortDesc": "Adds a layout to the SmartWatch"
			},
			"CreateImage": {
				"desc": "Creates a SmartWatch Image. See also: @CreateImage",
				"name": "CreateImage",
				"pNames": ["image", "width", "height", "options", "pxwidth", "pxheight"],
				"pTypes": ["str_pth", "num", "num", "str_com-fix,alias,px:use pixel values for size,Button:causes image to depress like a button when touched,ScaleCenter,async:loads the image asynchronously,FontAwesome,Resize,TouchThrough,Icon:allows loading of app icons,wallpaper,NoPlay:prevent gifs from playing automatically", "num_pxl", "num_pxl"],
				"retval": "swo-Image",
				"shortDesc": "Returns a new SmartWatch Image"
			},
			"CreateLayout": {
				"desc": "Creates a SmartWatch Layout. See also: @CreateLayout",
				"name": "CreateLayout",
				"pNames": ["type", "options"],
				"pTypes": ["str-Linear|Absolute|Frame", "str_com-TouchThrough:forwards touch events to underlying children,TouchSpy:spies for touch events on all children,Left|Top|Right|Bottom|Center|VCenter,Wrap,Horizontal|Vertical,FillX,FillY,FillXY"],
				"retval": "swo-Layout",
				"shortDesc": "Returns a new SmartWatch Layout"
			},
			"CreateSensor": {
				"desc": "Creates a SmartWatch Sensor. See also: @CreateSensor",
				"name": "CreateSensor",
				"pNames": ["name", "options"],
				"pTypes": ["str-Accelerometer|MagneticField|Orientation|Light|Proximity|Temperature|GameRotation|GeomagneticRotation|Gravity|Gyroscope|HeartRate|Acceleration|Pressure|Humidity|RotationMotion|StepCounter|StepDetector", "str_com-Slow|Medium|Fast|Fastest"],
				"retval": "swo-Sensor",
				"shortDesc": "Returns a new SmartWatch Sensor"
			},
			"CreateText": {
				"desc": "Creates a SmartWatch Text. See also: @CreateText",
				"name": "CreateText",
				"pNames": ["text", "width", "height", "options"],
				"pTypes": ["str", "num_frc", "num_frc", "str_com-Multiline,Left|Right,Html,Bold,Monospace,AutoSize,NoWrap,Log"],
				"retval": "swo-Text",
				"shortDesc": "Returns a new SmartWatch Text"
			},
			"GetVersion": {
				"desc": "Returns the SmartWatch DS version number.",
				"name": "GetVersion",
				"retval": "str",
				"shortDesc": "Get SW DS version"
			},
			"RemoveLayout": {
				"desc": "Removes a SmartWatch layout from the screen.",
				"name": "RemoveLayout",
				"pNames": ["layout"],
				"pTypes": ["obj-SWlay"],
				"shortDesc": "Remove SW layout from the screen"
			},
			"SetMenu": {
				"desc": "Set the SmartWatch menu fields",
				"name": "SetMenu",
				"pNames": ["list", "iconPath"],
				"pTypes": ["str_com", "str_pth"],
				"shortDesc": "Set SmartWatch menu."
			},
			"SetOnBack": {
				"desc": "Define a callback function which is called when the SmartWatch back button was pressed.",
				"name": "SetOnBack",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "called when SmartWatch back button was pressed"
			},
			"SetOnHide": {
				"desc": "Define a callback function which is called when the SmartWatch app is hidden.",
				"name": "SetOnHide",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch app is hidden"
			},
			"SetOnMenu": {
				"desc": "Define a callback function which is called when the SmartWatch menu button is touched.",
				"name": "SetOnMenu",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch menu button is touched"
			},
			"SetOnShow": {
				"desc": "Define a callback function which is called when the SmartWatch app is shown.",
				"name": "SetOnShow",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch app is shown"
			},
			"SetOnStart": {
				"desc": "Define a callback function which is called when the SmartWatch app has started.",
				"name": "SetOnStart",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch app has started"
			},
			"SetOnStop": {
				"desc": "Define a callback function which is called when the SmartWatch app has stopped.",
				"name": "SetOnStop",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch app has stopped"
			},
			"SetOnSwipe": {
				"desc": "Define a callback function which is called when the SmartWatch screen is swiped.",
				"name": "SetOnSwipe",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["dir"],
					"pTypes": ["str-Left|Up|Right|Down"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SmartWatch screen is swiped"
			},
			"SetOnTouch": {
				"desc": "Define a callback function which is called when the SmartWatch was touched.",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["dir", "x", "y"],
					"pTypes": ["str-Down|Move|Up", "num_frc", "num_frc"],
					"shortDesc": "callback"
				}],
				"shortDesc": "called when SmartWatch touched"
			},
			"SetScreenState": {
				"desc": "Change the screen state",
				"name": "SetScreenState",
				"pNames": ["p1"],
				"pTypes": ["?"],
				"shortDesc": "Change screen state"
			},
			"ShowLayout": {
				"desc": "Show a layout on the screen",
				"name": "ShowLayout",
				"pNames": ["layout", "x", "y"],
				"pTypes": ["obj-SWlay", "num_frc", "num_frc"],
				"shortDesc": "Show layout on screen"
			},
			"ShowMessage": {
				"desc": "Shows a message on the screen",
				"name": "ShowMessage",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": "Show message on screen"
			},
			"StopApp": {
				"desc": "Stops the running SmartWatch app.",
				"name": "StopApp",
				"shortDesc": "Stop running app"
			},
			"Vibrate": {
				"desc": "Makes the SmartWatch vibrate",
				"name": "Vibrate",
				"pNames": ["p1", "p2", "p3"],
				"pTypes": ["?", "?", "?"],
				"shortDesc": "Vibrate SmartWatch"
			}
		}
	},
	"CreateSMS": {
		"abbrev": "sms",
		"desc": "Returns a new SMS object to send and retreive SMS messages.\n<xfeature>",
		"name": "CreateSMS",
		"retval": "dso-SMS",
		"shortDesc": "Returns a new SMS object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-SMS",
				"shortDesc": "Returns the control class name"
			},
			"Send": {
				"desc": "Send SMS message.",
				"name": "Send",
				"pNames": ["number", "message", "options"],
				"pTypes": ["str", "str", "str-MultiPart:multi-part SMS messaging"],
				"shortDesc": "Send SMS"
			},
			"SetOnMessage": {
				"desc": "Define a callback function which is called when the user received a SMS",
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["message"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when user received a SMS"
			},
			"SetOnStatus": {
				"desc": "Define a callback function which is called when a status has changed.",
				"name": "SetOnStatus",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["status"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when a status has changed"
			}
		}
	},
	"CreateSpeechRec": {
		"abbrev": "spr",
		"desc": "#CreateSpeechRec.md",
		"name": "CreateSpeechRec",
		"pNames": ["options"],
		"pTypes": ["str_com-NoBeep,Partial"],
		"retval": "dso-SpeechRec",
		"shortDesc": "Returns a new SpeechRec object",
		"subf": {
			"Cancel": {
				"desc": "Stop recognizing speech and break other processes.",
				"name": "Cancel",
				"shortDesc": "Stop recognition"
			},
			"GetRMS": {
				"desc": "Returns the RMS value (Root Mean Square) from the audio recorder.",
				"name": "GetRMS",
				"retval": "num_flt",
				"shortDesc": "Returns the RMS value"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-SpeechRec",
				"shortDesc": "Returns the control class name"
			},
			"IsListening": {
				"desc": "Check whether SpeechRec is currently listening.",
				"name": "IsListening",
				"retval": "bin",
				"shortDesc": "Check whether SpeechRec is listening"
			},
			"Method": "#1023663567",
			"Recognize": {
				"desc": "Start recognizing speech.",
				"name": "Recognize",
				"shortDesc": "Start speech recognition"
			},
			"SetOnError": {
				"desc": "Define a callback function which is called when an error occured.",
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["error"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when an error occured."
			},
			"SetOnReady": {
				"desc": "Define a callback function which is called when the SpeechRec object is ready for use.",
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when SpeechRec is ready for use"
			},
			"SetOnResult": {
				"desc": "Define a callback function which is called when a text was successfully recognized",
				"name": "SetOnResult",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when text was recognized"
			},
			"Stop": {
				"desc": "Stop speech recording and start recognizing.",
				"name": "Stop",
				"shortDesc": "Stop recording and start recognition"
			}
		}
	},
	"CreateSpinner": {
		"abbrev": "spn",
		"desc": "#CreateSpinner.md",
		"name": "CreateSpinner",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["str_com", "num_frc", "num_frc", "str_com-FillX/Y,NoSound"],
		"retval": "dso-Spinner",
		"shortDesc": "Returns a new Spinner object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Spinner",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SelectItem": {
				"desc": "Change the current shown item\n<deprecated Use SetText instead>",
				"name": "SelectItem",
				"pNames": ["item"],
				"pTypes": ["str"],
				"shortDesc": "Change current shown item"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetList": {
				"desc": "Change the item list of the spinner.",
				"name": "SetList",
				"pNames": ["list", "delim"],
				"pTypes": ["str_com", "str"],
				"shortDesc": "Change spinner list"
			},
			"SetMargins": "#1741900074",
			"SetOnChange": {
				"desc": "Called when the spinner value has been changed by the user.",
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [
					{
						"desc": "Callback",
						"name": "callback",
						"pNames": ["item", "index"],
						"pTypes": ["str", "num_int"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Called when value changed by the user"
			},
			"SetOnTouch": {
				"desc": "Define a callback function that is called when the user touches the control.\n<deprecated Use SetOnChange instead>",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Define a callback function for touch events"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": {
				"desc": "Change the current shown item",
				"name": "SelectItem",
				"pNames": ["item"],
				"pTypes": ["str"],
				"shortDesc": "Change current shown item"
			},
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSwitch": {
		"abbrev": "swi",
		"desc": "#CreateSwitch.md",
		"name": "CreateSwitch",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-Monospace,Custom,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Button",
		"shortDesc": "Creates a switch control",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChecked": {
				"desc": "Returns whether the switch is currently activated",
				"name": "GetChecked",
				"retval": "bin",
				"shortDesc": "Checks if switch is activated"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Switch",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetChecked": {
				"desc": "Change the current checked state of the switch.",
				"name": "SetChecked",
				"pNames": ["checked"],
				"pTypes": ["bin"],
				"shortDesc": "Change the checked state"
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetStyle": {
				"desc": "Costomize the look of the toggle.",
				"name": "SetStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow"],
				"pTypes": ["str_col", "str_col", "num_pxl", "str_col", "num_pxl", "num_frc"],
				"shortDesc": "Customize the button looks"
			},
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateSynth": {
		"abbrev": "syn",
		"desc": "#CreateSynth.md",
		"name": "CreateSynth",
		"pNames": ["type"],
		"pTypes": ["str-Signal,VCA,VCF"],
		"retval": "dso-Synth",
		"shortDesc": "Returns a new Synth object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Synth",
				"shortDesc": "Returns the control class name"
			},
			"PlayMidiTune": {
				"desc": "Play a comma-separated sequence of “midi_note&colon;duration” pairs.",
				"name": "PlayMidiTune",
				"pNames": ["tune"],
				"pTypes": ["str_com-note1&colon;duration1&comma;note2&colon;duration2&comma;..."],
				"shortDesc": "Play a sequence of notes"
			},
			"PlayNote": {
				"desc": "Plays a single note",
				"name": "PlayNote",
				"pNames": ["note"],
				"pTypes": ["num_int-0..125"],
				"shortDesc": "Play a single note"
			},
			"PlayTone": {
				"desc": "Plays a frequency tone.",
				"name": "PlayTone",
				"pNames": ["frequency", "duration"],
				"pTypes": ["num:frequency", "num_mls"],
				"shortDesc": "Plays a frequency tone"
			},
			"SetDelay": {
				"desc": "Change the delay effect difference",
				"name": "SetDelay",
				"pNames": ["milliseconds"],
				"pTypes": ["num_mls"],
				"shortDesc": "Change delay effect difference"
			},
			"SetDelayEnabled": {
				"desc": "Enables the delay effect (plays every note a second time after a given delay)",
				"name": "SetDelayEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": "Enables the delay effect"
			},
			"SetFeedback": {
				"desc": "Adds a feedback effect when delay is enabled",
				"name": "SetFeedback",
				"pNames": ["feedback"],
				"pTypes": ["num_frc"],
				"shortDesc": "Adds a delay feedback effect"
			},
			"SetFrequency": {
				"desc": "Set the current played frequency",
				"name": "SetFrequency",
				"pNames": ["frequency"],
				"pTypes": ["num"],
				"shortDesc": "Set current frequency"
			},
			"SetNoteLength": {
				"desc": "Set the length of a whole note in seconds. Defaults to 2.56",
				"name": "SetNoteLength",
				"pNames": ["duration"],
				"pTypes": ["num_sec"],
				"shortDesc": "Set whole note length"
			},
			"SetPhaser": {
				"desc": "Initializes the phaser effect",
				"name": "SetPhaser",
				"pNames": ["drywet", "rate", "range", "feedback"],
				"pTypes": ["num_frc", "num", "num", "num_frc"],
				"shortDesc": "Initializes phaser"
			},
			"SetPhaserDryWet": {
				"desc": "Control producing of unprocessed (0) and delayed (1) signals (whatever this means)",
				"name": "SetPhaserDryWet",
				"pNames": ["drywet"],
				"pTypes": ["num_frc"],
				"shortDesc": "Control unprocessed/delayed signals ratio"
			},
			"SetPhaserEnabled": {
				"desc": "En/Disables phaser effect",
				"name": "SetPhaserEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disables phaser effect"
			},
			"SetPhaserFeedback": {
				"desc": "Enables phaser feedback",
				"name": "SetPhaserFeedback",
				"pNames": ["feedback"],
				"pTypes": ["num_frc"],
				"shortDesc": "Enables phaser feedback"
			},
			"SetPhaserRange": {
				"desc": "Set sweep range",
				"name": "SetPhaserRange",
				"pNames": ["range"],
				"pTypes": ["num"],
				"shortDesc": "Set sweep range"
			},
			"SetPhaserRate": {
				"desc": "Set sweeps per second",
				"name": "SetPhaserRate",
				"pNames": ["rate"],
				"pTypes": ["num"],
				"shortDesc": "Set sweeps per second"
			},
			"SetVca": {
				"desc": "Initializes the VCA",
				"name": "SetVca",
				"pNames": ["attack", "decay", "sustain", "release"],
				"pTypes": ["num_mls", "num_mls", "num_frc", "num_mls"],
				"shortDesc": "Initializes the VCA"
			},
			"SetVcaAttack": {
				"desc": "Set a time where the volume should reach a maximum",
				"name": "SetVcaAttack",
				"pNames": ["attack"],
				"pTypes": ["num_mls"],
				"shortDesc": "Set a time of maximum volume"
			},
			"SetVcaDecay": {
				"desc": "Controls time in which the volume is lowered to the sustain value",
				"name": "SetVcaDecay",
				"pNames": ["decay"],
				"pTypes": ["num_mls"],
				"shortDesc": "Controls time when volume is lowered to sustain"
			},
			"SetVcaEnabled": {
				"desc": "En/Disables VCA effect",
				"name": "SetVcaEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disables VCA effect"
			},
			"SetVcaRelease": {
				"desc": "Set a time where the volume should reach a minimum",
				"name": "SetVcaRelease",
				"pNames": ["release"],
				"pTypes": ["num:mls"],
				"shortDesc": "set a time of minimum volume"
			},
			"SetVcaSustain": {
				"desc": "Set a basis volume",
				"name": "SetVcaSustain",
				"pNames": ["sustain"],
				"pTypes": ["num_frc"],
				"shortDesc": "Set a basis volume"
			},
			"SetVcf": {
				"desc": "Initialize the VCF effect",
				"name": "SetVcf",
				"pNames": ["attack", "decay", "sustain", "release", "cuttoff", "resonance", "depth"],
				"pTypes": ["num_mls", "num_mls", "num_frc", "num_mls", "num:frequency", "num_frc", "num_frc"],
				"shortDesc": "Initialize the VCF effect"
			},
			"SetVcfAttack": {
				"desc": "Set a time where the frequencies should reach a maximum",
				"name": "SetVcfAttack",
				"pNames": ["attack"],
				"pTypes": ["num_mls"],
				"shortDesc": "Set a time of maximum frequencies"
			},
			"SetVcfCutoff": {
				"desc": "Set a maximum frequency which will never be exceeded",
				"name": "SetVcfCutoff",
				"pNames": ["cuttoff"],
				"pTypes": ["num:frequency"],
				"shortDesc": "Set a maximum frequency"
			},
			"SetVcfDecay": {
				"desc": "Controls time in which the frequency is lowered to the sustain value.",
				"name": "SetVcfDecay",
				"pNames": ["decay"],
				"pTypes": ["num_mls"],
				"shortDesc": "Controls time when frequency is lowered to sustain"
			},
			"SetVcfDepth": {
				"desc": "Set the strength of the Vcf filter",
				"name": "SetVcfDepth",
				"pNames": ["depth"],
				"pTypes": ["num_frc"],
				"shortDesc": "Set filter strength"
			},
			"SetVcfEnabled": {
				"desc": "En/Disables VCF effect",
				"name": "SetVcfEnabled",
				"pNames": ["enable"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disables VCF effect"
			},
			"SetVcfRelease": {
				"desc": "Set a time where the volume should reach a minimum",
				"name": "SetVcfRelease",
				"pNames": ["release"],
				"pTypes": ["num_mls"],
				"shortDesc": "set a time of minimum frequency"
			},
			"SetVcfResonance": {
				"desc": "Adds a resonance tone",
				"name": "SetVcfResonance",
				"pNames": ["resonance"],
				"pTypes": ["num_frc"],
				"shortDesc": "Adds a resonance tone"
			},
			"SetVcfSustain": {
				"desc": "Set a basis frequency",
				"name": "SetVcfSustain",
				"pNames": ["sustain"],
				"pTypes": ["num_frc"],
				"shortDesc": "Set a basis frequency"
			},
			"SetVolume": {
				"desc": "Set the overall synthesizer volume",
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_frc", "num_frc"],
				"shortDesc": "Set master volume"
			},
			"SetWaveShape": {
				"desc": "Set the wave shape of the synthesizer",
				"name": "SetWaveShape",
				"pNames": ["shape"],
				"pTypes": ["str-Sin,Saw,Square,White"],
				"shortDesc": "Set the wave shape"
			},
			"Start": {
				"desc": "Start playing",
				"name": "Start",
				"shortDesc": "Start playing"
			},
			"Stop": {
				"desc": "Stop playing",
				"name": "Stop",
				"shortDesc": "Stop playing"
			}
		}
	},
	"CreateSysProc": {
		"abbrev": "sys",
		"desc": "Creates a SystemProcedure of a command shell (ie&period; “sh”, “su” if <red>root</red> or “busybox” if <blue>installed</blue>) which can be reused throughout the program.",
		"name": "CreateSysProc",
		"pNames": ["cmd", "env", "dir", "options"],
		"pTypes": ["str:program name-sh|su|busybox", "str", "str_pth", "str_com-combine:combines stdout and stderr|builder:force use of proc builder"],
		"retval": "dso-SysProc",
		"shortDesc": "Returns a new SysProc object",
		"subf": {
			"Err": {
				"desc": "Read data from stderr",
				"name": "Err",
				"pNames": ["maxLines", "options"],
				"pTypes": ["num_int", "str_com-nowait:dont wait for input"],
				"shortDesc": "Read from stderr"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-SysProc",
				"shortDesc": "Returns the control class name"
			},
			"In": {
				"desc": "Read data from stdin",
				"name": "In",
				"pNames": ["maxLines", "options"],
				"pTypes": ["num_int", "str_com-nowait:dont wait for input"],
				"shortDesc": "Read from stdin"
			},
			"Method": "#1023663567",
			"Out": {
				"desc": "Writes a command to stdout. A trailing linebreak will execute it.",
				"name": "Out",
				"pNames": ["command"],
				"pTypes": ["str"],
				"shortDesc": "Write to stdout"
			},
			"ReadFileAsByte": {
				"desc": "Returns the first byte of a file.",
				"name": "ReadFileAsByte",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"retval": "num_byt",
				"shortDesc": "Read first byte of a file"
			},
			"SetOnError": {
				"desc": "Define a callback function which is called when something was written to stderr",
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "called when stderr changed"
			},
			"SetOnInput": {
				"desc": "Define a callback function which is called when something was written to stdout",
				"name": "SetOnInput",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "called when stdout changed"
			},
			"WriteToFile": {
				"desc": "Write a binary string to a file.",
				"name": "WriteToFile",
				"pNames": ["file", "data"],
				"pTypes": ["str_pth", "str"],
				"shortDesc": "Write binary data to file"
			}
		}
	},
	"CreateTabs": {
		"abbrev": "tab",
		"desc": "#CreateTabs.md",
		"name": "CreateTabs",
		"pNames": ["list", "width", "height", "options"],
		"pTypes": ["str_com", "num_frc", "num_frc", "str_com"],
		"retval": "dso-Tabs",
		"shortDesc": "Returns a new Tabs object",
		"subf": {
			"_AddChild": {
				"desc": "Adds a control to the layout.",
				"name": "AddChild",
				"pNames": ["child", "order"],
				"pTypes": ["dso", "num_int"],
				"shortDesc": "Add a control to the layout"
			},
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"_ChildToFront": {
				"desc": "Moves a child in front of all other children.",
				"name": "ChildToFront",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Moves a child to the layout front"
			},
			"ClearFocus": "#1362225380",
			"_DestroyChild": {
				"desc": "Destroys and removes a child from the layout.",
				"name": "DestroyChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Destroys and removes a child"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"_GetChildOrder": {
				"desc": "Returns the z order of a child.",
				"name": "GetChildOrder",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"retval": "num_int",
				"shortDesc": "Returns the z order of a child"
			},
			"GetHeight": "#2576212953",
			"GetLayout": {
				"desc": "Returns the content layout of a given tab.",
				"name": "GetLayout",
				"pNames": ["name"],
				"pTypes": ["str"],
				"retval": "dso-CreateLayout",
				"shortDesc": "Get tab content layout"
			},
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Tabs",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"parent.AddTab": {
				"desc": "Adds a new tab to the tabs control.",
				"name": "parent.AddTab",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": "Add a new tab"
			},
			"_RemoveChild": {
				"desc": "Removes a child from the layout.",
				"name": "RemoveChild",
				"pNames": ["child"],
				"pTypes": ["dso"],
				"shortDesc": "Remove a child from the layout"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"_SetGravity": {
				"desc": "Adjust the placing of contained children.",
				"name": "SetGravity",
				"pNames": ["gravity"],
				"pTypes": ["str-Left,Top,Right,Bottom,VCenter,HCenter,FillX,FillY,FillXY"],
				"shortDesc": "Adjust the placing of contained children"
			},
			"SetMargins": "#1741900074",
			"SetOnChange": {
				"desc": "Define a callback function which is called when the tab has been changed by the user.",
				"name": "SetOnChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["name"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when current tab changed"
			},
			"SetOnChildChange": {
				"desc": "Defines a callback function which is called when the content of a child control has beed changed by the user.",
				"name": "SetOnChildChange",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["src"],
					"pTypes": ["dso"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when the user changed a control content"
			},
			"SetOnLongTouch": "#2735982374",
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": "#2938578932",
			"SetOnTouchMove": "#2039582034",
			"SetOnTouchUp": "#9861324731",
			"_SetOrientation": {
				"desc": "Change the children orientation.",
				"name": "SetOrientation",
				"pNames": ["orient"],
				"pTypes": ["str-Horizontal|Vertical"],
				"shortDesc": "Change the children orientation"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchable": "#2562918782",
			"SetTouchThrough": {
				"desc": "Define whether the layout should forward OnTouch events to underlying controls.",
				"name": "SetTouchThrough",
				"pNames": ["through"],
				"pTypes": ["bin"],
				"shortDesc": "Enable touch event forwarding"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"ShowTab": {
				"desc": "Switch to a given tab name",
				"name": "ShowTab",
				"pNames": ["name"],
				"pTypes": ["str"],
				"shortDesc": "Switch current tab"
			},
			"Tween": "#2114624769"
		}
	},
	"CreateText": {
		"abbrev": "txt",
		"desc": "#CreateText.md",
		"name": "CreateText",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-AutoScale,AutoSize,Multiline,Left|Right|Bottom|VCenter,Html,Bold,Monospace,AutoShrink:Auto-shrinks text to fit,NoWrap,Log,FillX/Y"],
		"retval": "dso-Text",
		"shortDesc": "Returns a new Text object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetHtml": {
				"desc": "Returns the html formatted content.",
				"name": "GetHtml",
				"retval": "str_htm",
				"shortDesc": "Return html formatted text"
			},
			"GetLeft": "#1237814406",
			"GetLineCount": {
				"desc": "Returns the amount of lines in the text even with html formatting",
				"name": "GetLineCount",
				"retval": "num_int",
				"shortDesc": "Get amount of text lines"
			},
			"GetLineStart": {
				"desc": "Returns at which character in the text a certain line begins.",
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": "Get the start character index of a line"
			},
			"GetLineTop": {
				"desc": "Returns the top position of a given line on the screen.",
				"name": "GetLineTop",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_frc",
				"shortDesc": "Get line top position on screen"
			},
			"GetMaxLines": {
				"desc": "Returns the maximum amount of lines the control can hold with the current control and font height",
				"name": "GetMaxLines",
				"retval": "num_int",
				"shortDesc": "Get amount of lines fitting in the control"
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Text",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Log": {
				"desc": "Append a string to the text separated with a line break",
				"name": "Log",
				"pNames": ["message", "options"],
				"pTypes": ["str", "str_com-Clear:Clears the log before writing,Red|Green|Blue"],
				"shortDesc": "Append line to the text"
			},
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEllipsize": "#0897234673",
			"SetEnabled": "#1602385882",
			"SetFontFile": "#0197498372",
			"SetHtml": "#8753208754",
			"SetLog": {
				"desc": "Define a maximum amount of log lines",
				"name": "SetLog",
				"pNames": ["maxLines"],
				"pTypes": ["num_int"],
				"shortDesc": "Set maximum log length"
			},
			"SetMargins": "#1741900074",
			"SetOnLongTouch": "#2735982374",
			"SetOnTouch": "#2088093920",
			"SetOnTouchDown": "#2938578932",
			"SetOnTouchMove": "#2039582034",
			"SetOnTouchUp": "#9861324731",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextShadow": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetTouchable": "#2562918782",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateTextEdit": {
		"abbrev": "edt",
		"desc": "#CreateTextEdit.md",
		"name": "CreateTextEdit",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-AutoSelect:Select all Text if user enter the Textedit,AutoSize:Expand or shrink the control automatically so the text fits in the Textedit,Bold:Write bold text,Extract:enables full screen keyboard in landscape mode,Left:Justify the text to the left|Center:Justify the text in the middle|Right:Justify the text to the right|Monospace,NoSpell:Disable the spell-checker,NoKeyboard:Shows no Keyboard|Numbers,ReadOnly:The user cant change the Text,SingleLine:Dont break text for long lines and change 'Enter' key to 'Done',FillX/Y,Password:displays characters as dots"],
		"retval": "dso-TextEdit",
		"shortDesc": "Returns a new TextEdit object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "Clears the undo/redo history.",
				"name": "ClearHistory",
				"shortDesc": "Clear undo/redo history"
			},
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetCursorLine": {
				"desc": "Returns the current line index where the cursor is located.",
				"name": "GetCursorLine",
				"retval": "num_int",
				"shortDesc": "Get the current cursor line index"
			},
			"GetCursorPos": {
				"desc": "Returns the index of the character where the cursor is currently located.",
				"name": "GetCursorPos",
				"retval": "num_int",
				"shortDesc": "Get the cursor position in the text"
			},
			"GetHeight": "#2576212953",
			"GetHtml": {
				"desc": "Returns the html formatted content.",
				"name": "GetHtml",
				"retval": "str_htm",
				"shortDesc": "Return html formatted text"
			},
			"GetLeft": "#1237814406",
			"GetLineCount": {
				"desc": "Returns the amount of lines in the text even with html formatting",
				"name": "GetLineCount",
				"retval": "num_int",
				"shortDesc": "Get amount of text lines"
			},
			"GetLineStart": {
				"desc": "Returns at which character in the text a certain line begins.",
				"name": "GetLineStart",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_int",
				"shortDesc": "Get the start character index of a line"
			},
			"GetLineTop": {
				"desc": "Returns the top position of a given line on the screen.",
				"name": "GetLineTop",
				"pNames": ["line"],
				"pTypes": ["num_int"],
				"retval": "num_frc",
				"shortDesc": "Get line top position on screen"
			},
			"GetMaxLines": {
				"desc": "Returns the maximum amount of lines the control can hold with the current control and font height",
				"name": "GetMaxLines",
				"retval": "num_int",
				"shortDesc": "Get amount of lines fitting in the control"
			},
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetSelectedText": {
				"desc": "Returns the currently selected text.",
				"name": "GetSelectedText",
				"retval": "str",
				"shortDesc": "Get the selected text"
			},
			"GetSelectionEnd": {
				"desc": "Returns the position of where the user selection ends.",
				"name": "GetSelectionEnd",
				"retval": "num_int",
				"shortDesc": "Get selection end position"
			},
			"GetSelectionStart": {
				"desc": "Returns the position of where the user selection begins.",
				"name": "GetSelectionStart",
				"retval": "num_int",
				"shortDesc": "Get selection start position"
			},
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-TextEdit",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"InsertText": {
				"desc": "Inserts a string at a given position.",
				"name": "InsertText",
				"pNames": ["text", "start"],
				"pTypes": ["str", "num_int"],
				"shortDesc": "Insert text at a given position"
			},
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Redo": {
				"desc": "Redo an undone action.",
				"name": "Redo",
				"shortDesc": "Redo an undone action"
			},
			"ReplaceText": {
				"desc": "Replaces a given range in the text with some string.",
				"name": "ReplaceText",
				"pNames": ["text", "start", "end"],
				"pTypes": ["str", "num_int", "num_int"],
				"shortDesc": "Replace a range of the text with a string"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetCursorColor": {
				"desc": "Changes the cursor color.",
				"name": "SetCursorColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Change cursor color"
			},
			"SetCursorPos": {
				"desc": "Change the curernt cursor position.",
				"name": "SetCursorPos",
				"pNames": ["position"],
				"pTypes": ["num_int"],
				"shortDesc": "Change the curernt cursor position"
			},
			"SetEnabled": "#1602385882",
			"SetHint": {
				"desc": "Set a grey default which is shown when the edit is empty",
				"name": "SetHint",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": "Shows a grey default text"
			},
			"SetHtml": "#8753208754",
			"SetMargins": "#1741900074",
			"SetOnChange": "#2137502353",
			"SetOnEnter": {
				"desc": "Define a callback function which is called when the user pressed 'Done' or 'Enter' on the keyboard (line can still be inserted via Shift+Enter)\nAlong with the “SingleLine” option it changes the keyboards _'Enter'_ key to _'Done'_ or _'Ok'_",
				"name": "SetOnEnter",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when user pressed 'Done' or 'Enter'"
			},
			"SetOnFocus": "#9283752301",
			"SetSize": "#1296070870",
			"SetText": "#8207502354",
			"SetTextColor": "#1093247031",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769",
			"Undo": {
				"desc": "Undo an action.",
				"name": "Undo",
				"shortDesc": "Undo an action"
			}
		}
	},
	"CreateTheme": {
		"abbrev": "thm",
		"desc": "Returns a Theme object.\n\n<premium>",
		"name": "CreateTheme",
		"pNames": ["baseTheme"],
		"pTypes": ["str-Dark|Light"],
		"retval": "dso-Theme",
		"shortDesc": "Returns a new Theme object",
		"subf": {
			"AdjustColor": "#1794786072",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Theme",
				"shortDesc": "Returns the control class name"
			},
			"Method": "#1023663567",
			"SetBackColor": "#3857861627",
			"SetBackground": "#1239127541",
			"SetBtnTextColor": {
				"desc": "Define the standard text color of [buttons](CreateButton.htm) and [toggles](CreateToggle.htm).",
				"name": "SetBtnTextColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define button text color"
			},
			"SetButtonOptions": {
				"desc": "Define standard options of [buttons](CreateButton.htm) and [toggles](CreateToggle.htm).",
				"name": "SetButtonOptions",
				"pNames": ["options"],
				"pTypes": ["str_com-FontAwesome,Html,Monospace,SingleLine,Custom,NoPad,FillX/Y,Normal|Aluminium|Gray|Lego"],
				"shortDesc": "Define button options"
			},
			"SetButtonPadding": {
				"desc": "Define distances that elements within the control are to maintain from the control borders.",
				"name": "SetButtonPadding",
				"pNames": ["left", "top", "right", "bottom", "mode"],
				"pTypes": ["num", "num", "num", "num_frc", "str-px|sp|dip|mm|pt"],
				"shortDesc": "Define button paddings"
			},
			"SetButtonStyle": {
				"desc": "Define standard style of [buttons](CreateButton.htm) and [toggles](CreateToggle.htm).",
				"name": "SetButtonStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow", "checkClr"],
				"pTypes": ["str_col", "str_col", "num_pxl", "str_col", "num_pxl", "num_frc", "str_col"],
				"shortDesc": "Define button style"
			},
			"SetCheckBoxOptions": {
				"desc": "Define standard options of [check boxes](CreateCheckBox.htm).",
				"name": "SetCheckBoxOptions",
				"pNames": ["options"],
				"pTypes": ["str_com-FillX/Y"],
				"shortDesc": "Define check box options"
			},
			"SetDialogBtnColor": {
				"desc": "Define standard button colors of [dialogs](CreateDialog.htm).",
				"name": "SetDialogBtnColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define dialog button colors"
			},
			"SetDialogBtnTxtColor": {
				"desc": "Define standard button text colors of [dialogs](CreateDialog.htm).",
				"name": "SetDialogBtnTxtColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define dialog button text colors"
			},
			"SetDialogColor": {
				"desc": "Define standard background colors of [dialogs](CreateDialog.htm).",
				"name": "SetDialogColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define dialog background colors"
			},
			"SetDialogCornerRadius": {
				"desc": "Define standard corder radius of [dialogs](CreateDialog.htm).",
				"name": "SetDialogCornerRadius",
				"pNames": ["radius"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Define dialog corner radius"
			},
			"SetDimBehind": {
				"desc": "En/Disables standard dimming of [dialogs](CreateDialog.htm).",
				"name": "SetDimBehind",
				"pNames": ["dim"],
				"pTypes": ["bin"],
				"shortDesc": "Define whether to dim dialog background"
			},
			"SetHighlightColor": {
				"desc": "Define standard highlight colors.",
				"name": "SetHighlightColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define highlight colors"
			},
			"SetListDividerColor": {
				"desc": "Define standard divider colors of [lists](CreateList.htm).",
				"name": "SetListDividerColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define list divider colors"
			},
			"SetProgressBackColor": {
				"desc": "Define standard background progress color of [progress indicators](ShowProgress.htm).",
				"name": "SetProgressBackColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define progress background color"
			},
			"SetProgressOptions": {
				"desc": "Define standard options of [progress indicators](ShowProgress.htm).",
				"name": "SetProgressOptions",
				"pNames": ["options"],
				"pTypes": ["str_com-NoDim,NonModal,Solid"],
				"shortDesc": "Define progress options"
			},
			"SetProgressBarOptions": {
				"desc": "Define standard options of [progress bars](ShowProgressBar.htm).",
				"name": "SetProgressBarOptions",
				"pNames": ["options"],
				"pTypes": ["str_com-Light"],
				"shortDesc": "Define progress bar options"
			},
			"SetProgressTextColor": {
				"desc": "Define standard text color of [progress indicators](ShowProgress.htm).",
				"name": "SetProgressTextColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define progress text color"
			},
			"SetTextColor": {
				"desc": "Define standard text color of controls.",
				"name": "SetTextColor",
				"pNames": ["color1", "color2"],
				"pTypes": ["str_col", "str_col"],
				"shortDesc": "Define control text color"
			},
			"SetTextEditOptions": {
				"desc": "Define standard options of [text edits](CreateTextEdit.htm).",
				"name": "SetTextEditOptions",
				"pNames": ["options"],
				"pTypes": ["str-underline"],
				"shortDesc": "Define text edit options"
			},
			"SetTitleColor": {
				"desc": "Define standard title text color of [dialogs](CreateDialog.htm).",
				"name": "SetTitleColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define title colors"
			},
			"SetTitleDividerColor": {
				"desc": "Define standard title divider color of [dialogs](CreateDialog.htm).",
				"name": "SetTitleDividerColor",
				"pNames": ["color"],
				"pTypes": ["str_col"],
				"shortDesc": "Define title divider colors"
			},
			"SetTitleDividerHeight": {
				"desc": "Define standard title divider height of [dialogs](CreateDialog.htm).",
				"name": "SetTitleDividerHeight",
				"pNames": ["height"],
				"pTypes": ["num_pxl"],
				"shortDesc": "Define title divider height"
			},
			"SetTitleHeight": {
				"desc": "Define standard height of [dialogs](CreateDialog.htm).",
				"name": "SetTitleHeight",
				"pNames": ["height", "options"],
				"pTypes": ["num_pxl", "str_com-px|dip|sp|mm|pt|pl|ps"],
				"shortDesc": "Define title height"
			},
			"SetTitleTextSize": {
				"desc": "Define standard title text size of [dialogs](CreateDialog.htm).",
				"name": "SetTitleTextSize",
				"pNames": ["size", "options"],
				"pTypes": ["num", "str_com-px|dip|sp|mm|pt|pl|ps"],
				"shortDesc": "Define title text size"
			}
		}
	},
	"CreateToggle": {
		"abbrev": "tgl",
		"desc": "#CreateToggle.md",
		"name": "CreateToggle",
		"pNames": ["text", "width", "height", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "str_com-Monospace,Custom,NoPad,FillX/Y,NoSound"],
		"retval": "dso-Toggle",
		"shortDesc": "Returns a new Toggle object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetChecked": {
				"desc": "Returns whether the toggle is currently activated",
				"name": "GetChecked",
				"retval": "bin",
				"shortDesc": "Checks if toggle is activated"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetText": "#2387569276",
			"GetTextSize": "#2530918945",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-Toggle",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetChecked": {
				"desc": "Change the current checked state of the toggle.",
				"name": "SetChecked",
				"pNames": ["checked"],
				"pTypes": ["bin"],
				"shortDesc": "Change the checked state"
			},
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetMargins": "#1741900074",
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetStyle": {
				"desc": "Costomize the look of the toggle.",
				"name": "SetStyle",
				"pNames": ["color1", "color2", "radius", "strokeClr", "strokeWidth", "shadow"],
				"pTypes": ["str_col", "str_col", "num_pxl", "str_col", "num_pxl", "num_frc"],
				"shortDesc": "Customize the button looks"
			},
			"SetText": "#8207502354",
			"SetTextColor": "#0175303923",
			"SetTextSize": "#5019790423",
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"Tween": "#2114624769"
		}
	},
	"CreateUSBSerial": {
		"abbrev": "usb",
		"desc": "#CreateUSBSerial.md",
		"name": "CreateUSBSerial",
		"pNames": ["baudRate", "dataBits", "stopBits", "parity", "device"],
		"pTypes": ["num_int-300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800|921600", "num_int-5|6|7|8", "num_int-1|2|15", "num_int-0:none|1:odd|2:even|3:mark|4:space", "num-pid"],
		"retval": "dso-USBSerial",
		"shortDesc": "Returns a new USBSerial object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-USBSerial",
				"shortDesc": "Returns the control class name"
			},
			"IsConnected": {
				"desc": "Returns whether a USB serial device is connected.",
				"name": "IsConnected",
				"retval": "bin",
				"shortDesc": "Checks if a USB device is connected"
			},
			"Method": "#1023663567",
			"SetDataMode": {
				"desc": "Enable sending data in several modes.",
				"name": "SetDataMode",
				"pNames": ["mode"],
				"pTypes": ["str-Hex:comma separated text value|Int:comma separated byte numbers|Text:string of text characters|&lt;encoding:\"UTF-16L/BE\"&gt;"],
				"shortDesc": "Define data format for outgoing data"
			},
			"SetDTR": {
				"desc": "Raises the **D**ata **T**erminal **R**eady state.",
				"name": "SetDTR",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": "Raises the DTR state"
			},
			"SetMaxRead": {
				"desc": "Define the maximum amount of bytes you want to receive at once.",
				"name": "SetMaxRead",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": "Set maximum bytes to received"
			},
			"SetMaxWrite": {
				"desc": "Define maximum amount of bytes to send at once.",
				"name": "SetMaxWrite",
				"pNames": ["bytes"],
				"pTypes": ["num_int"],
				"shortDesc": "Set maximum bytes to send"
			},
			"SetOnReceive": {
				"desc": "The SetOnReceive callback is called automatically after data has been received via the USB serial connection.",
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["data"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called after received Data via USB"
			},
			"SetRTS": {
				"desc": "Raises the **R**equest **T**o **S**end state.",
				"name": "SetRTS",
				"pNames": ["onOff"],
				"pTypes": ["bin"],
				"shortDesc": "Raises the RTS state"
			},
			"SetSplitMode": {
				"desc": "Tells the serial listener how to split received data. Splitted data will result in multiple OnReceive calls.\np2 and p3 have different purposes for different modes:\n<style type='text/css'>th{align:center;}td{padding:0 10px 0 10px;}</style><table><tr><th>mode</th><th>p1</th><th>p2</th></tr><tr><td>Size</td><td>Size of one data package</td><td>-</td></tr><tr><td>End</td><td>Byte indicating end of data</td><td>-</td></tr><tr><td>Start-End</td><td>Byte indicating start of data</td><td>Byte indicating end of data</td></tr></table>",
				"name": "SetSplitMode",
				"pNames": ["mode", "p2", "p3"],
				"pTypes": ["str-End|Start-End|Size", "str||num_int", "str||num_int"],
				"shortDesc": "Specify how to split received data"
			},
			"SetTimeout": {
				"desc": "SetTimeout",
				"name": "SetTimeout",
				"pNames": ["ms"],
				"pTypes": ["num_mls"],
				"shortDesc": "SetTimeout"
			},
			"Start": {
				"desc": "Start listening to the USB serial connection.",
				"name": "Start",
				"shortDesc": "Start listening to serial port"
			},
			"Stop": {
				"desc": "Stop listening on USB serial connection",
				"name": "Stop",
				"shortDesc": "Stop listening to serial port"
			},
			"Write": {
				"desc": "Send data over the USB serial connection to the other device.",
				"name": "Write",
				"pNames": ["text", "encoding"],
				"pTypes": ["str", "str-US-ASCII|UTF16L/BE"],
				"shortDesc": "Send data to connected device"
			}
		}
	},
	"CreateVideoView": {
		"abbrev": "vid",
		"desc": "#CreateVideoView.md",
		"name": "CreateVideoView",
		"pNames": ["width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "str_com"],
		"retval": "dso-VideoView",
		"shortDesc": "Returns a new VideoView object",
		"subf": {
			"AdjustColor": "#1794786072",
			"ClearFocus": "#1362225380",
			"Focus": "#7324472769",
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetDuration": {
				"desc": "Retunrs the video duration in seconds.",
				"name": "GetDuration",
				"retval": "num_flt",
				"shortDesc": "Get video duration in seconds"
			},
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-VideoView",
				"shortDesc": "Returns the control class name"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsPlaying": {
				"desc": "Returns whether the VideoView is currently playing a video",
				"name": "IsPlaying",
				"retval": "bin",
				"shortDesc": "Checks if the view is currently playing"
			},
			"IsReady": {
				"desc": "Returns whether the video is ready for playing.",
				"name": "IsReady",
				"retval": "bin",
				"shortDesc": "Check if the video is ready for playback"
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567",
			"Pause": {
				"desc": "Pauses the video.",
				"name": "Pause",
				"shortDesc": "Pause the video"
			},
			"Play": {
				"desc": "Plays the video.",
				"name": "Play",
				"shortDesc": "Play video"
			},
			"SeekTo": {
				"desc": "Seek the video to given time in seconds.",
				"name": "SeekTo",
				"pNames": ["seconds"],
				"pTypes": ["num_int"],
				"shortDesc": "Seek to a given playback time"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetFile": {
				"desc": "Set the video file path or url",
				"name": "SetFile",
				"pNames": ["file"],
				"pTypes": ["str_pth||str_url-http://url|https://url"],
				"shortDesc": "Set video source"
			},
			"SetMargins": "#1741900074",
			"SetOnComplete": {
				"desc": "Define a callback function which is called when the playback has finished playing",
				"name": "SetOnComplete",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when playback finished"
			},
			"SetOnError": {
				"desc": "Define a callback function which is called when an error occured.",
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when an error occured"
			},
			"SetOnReady": {
				"desc": "Define a callback function which is called when the video is ready for playback.",
				"name": "SetOnReady",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when video is ready for playback"
			},
			"SetOnSubtitle": {
				"desc": "Define a callback function which is called when the subtitle text changed.",
				"name": "SetOnSubtitle",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when subtitle text changed"
			},
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetSubtitles": {
				"desc": "Set a subtitle file where to retreive the video subtitles from.",
				"name": "SetSubtitles",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set a subtitle source"
			},
			"SetVisibility": "#1004824195",
			"SetVolume": {
				"desc": "Change the video player volume",
				"name": "SetVolume",
				"pNames": ["left", "right"],
				"pTypes": ["num_prc", "num_prc"],
				"shortDesc": "Change the playback volume"
			},
			"Show": "#1243391562",
			"Stop": {
				"desc": "Stop the video playback.",
				"name": "Stop",
				"shortDesc": "Stop video playback."
			},
			"Tween": "#2114624769"
		}
	},
	"CreateWallpaper": {
		"abbrev": "wlp",
		"desc": "Creates a wallpaper instance in the wallpaper.js script.\n\n<premium>",
		"name": "CreateWallpaper",
		"pNames": ["options"],
		"pTypes": ["str_com"],
		"shortDesc": "Returns a new Wallpaper object",
		"subf": {
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"shortDesc": "GetType"
			},
			"IsVisible": "#1814300863",
			"Method": "#1023663567"
		}
	},
	"CreateWebServer": {
		"abbrev": "sock",
		"desc": "#CreateWebServer.md",
		"name": "CreateWebServer",
		"pNames": ["port", "options"],
		"pTypes": ["num_int", "str_com-ListDir:Show files in folder|Upload:Allow file uploads|NoWelcome:Ignore index&period;html|Reflect:Reflect web socket messages back to all clients"],
		"retval": "dso-WebServer",
		"shortDesc": "Returns a new WebServer object",
		"subf": {
			"AddRedirect": {
				"desc": "Redirects a url pattern (with * wildcards) to a target location",
				"name": "AddRedirect",
				"pNames": ["pattern", "location"],
				"pTypes": ["str_url", "str_url"],
				"shortDesc": "Redirect urls"
			},
			"AddServlet": {
				"desc": "Define a callback function which is called when a HTTP GET request on a given servlet name was recieved.",
				"name": "AddServlet",
				"pNames": ["path", "callback"],
				"pTypes": ["str:url path-/name", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["args", "info"],
					"pTypes": ["obj-{ parameter: argument }", "obj-{ remoteAddress:str }"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when servlet received a message"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-WebServer",
				"shortDesc": "Returns the control class name"
			},
			"GetWebSockClients": {
				"desc": "Returns a list of connected client [WebSockets](CreateWebSocket.htm).",
				"name": "GetWebSockClients",
				"retval": "lst_obj-[{ remoteAddress:str, id:num_int }]",
				"shortDesc": "Get connected clients"
			},
			"Method": "#1023663567",
			"SendText": {
				"desc": "Sends a message to a specific client.\nIf no id is given, all clients of the specified ip are notified.\nIf neither ip nor id is given, the message will be sent to all connected clients.",
				"name": "SendText",
				"pNames": ["txt", "ip", "id"],
				"pTypes": ["str", "str", "num_int"],
				"shortDesc": "Send message to client(s)"
			},
			"SetFolder": {
				"desc": "Specifies the root folder of the server.",
				"name": "SetFolder",
				"pNames": ["folder"],
				"pTypes": ["str_pth"],
				"shortDesc": "Set server root folder"
			},
			"SetOnReceive": {
				"desc": "Define a callback function which is called when the server received a message from a client.",
				"name": "SetOnReceive",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["msg", "ip", "id"],
					"pTypes": ["str", "str", "num_int"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when received client message"
			},
			"SetOnUpload": {
				"desc": "Define a callback function which is called when a file was uploaded to the server.",
				"name": "SetOnUpload",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["filename", "ip"],
					"pTypes": ["str", "str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when file uploaded to server"
			},
			"SetResponse": {
				"desc": "Responds to an incoming HTTP request",
				"name": "SetResponse",
				"pNames": ["text"],
				"pTypes": ["str"],
				"shortDesc": "Respond to incoming HTTP request"
			},
			"SetUploadFolder": {
				"desc": "Set a folder where uploaded files are to be placed.",
				"name": "SetUploadFolder",
				"pNames": ["folder"],
				"pTypes": ["str_pth"],
				"shortDesc": "Defile file upload destination"
			},
			"Start": {
				"desc": "Start the server.",
				"name": "Start",
				"shortDesc": "Start server"
			},
			"Stop": {
				"desc": "Stop server",
				"name": "Stop",
				"shortDesc": "Stop server"
			}
		}
	},
	"CreateWebSocket": {
		"abbrev": "wbs",
		"desc": "#CreateWebSocket.md",
		"name": "CreateWebSocket",
		"pNames": ["id", "ip", "port"],
		"pTypes": ["str", "str", "num_int"],
		"retval": "dso-WebSocket",
		"shortDesc": "Returns a new WebSocket object",
		"subf": {
			"Close": {
				"desc": "Close the web socket.",
				"name": "Close",
				"shortDesc": "Close web socket"
			},
			"GetSocket": {
				"desc": "Returns the js Socket instance",
				"name": "GetSocket",
				"retval": "obj:Javascript Object-Socket",
				"shortDesc": "Get js Socket instance"
			},
			"IsOpen": {
				"desc": "Check whether WebSocket is open",
				"name": "IsOpen",
				"retval": "bin",
				"shortDesc": "Check if WebSocket is open"
			},
			"Send": {
				"desc": "Send a message to the server",
				"name": "Send",
				"pNames": ["message"],
				"pTypes": ["str"],
				"shortDesc": "Send message to server"
			},
			"SetOnClose": {
				"desc": "Define a callback function which is called when the WebSocket has been closed.",
				"name": "SetOnClose",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when WebSocket was closed"
			},
			"SetOnMessage": {
				"desc": "Define a callback function which is called when the WebSocket recived a message from the server.",
				"name": "SetOnMessage",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["message"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when received message from server"
			},
			"SetOnOpen": {
				"desc": "Define a callback function which is called when the WebSocket has been opened.",
				"name": "SetOnOpen",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when WebSocket is open"
			}
		}
	},
	"CreateWebView": {
		"abbrev": "web",
		"desc": "#CreateWebView.md",
		"name": "CreateWebView",
		"pNames": ["width", "height", "options", "zoom"],
		"pTypes": ["num_frc", "num_frc", "str_com-AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser", "num_prc"],
		"retval": "dso-WebView",
		"shortDesc": "Returns a new WebView object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Animate": "#8294739481",
			"Back": {
				"desc": "Loads the previous page from history.",
				"name": "Back",
				"shortDesc": "Load previous page"
			},
			"CanGoBack": {
				"desc": "Check whether the user can travel back in history.",
				"name": "CanGoBack",
				"retval": "bin",
				"shortDesc": "Check if history contains a previous page"
			},
			"CanGoForward": {
				"desc": "Check whether the user can travel forward in history.",
				"name": "CanGoForward",
				"shortDesc": "Check if history has a following page"
			},
			"Capture": {
				"desc": "Captures the visible area of the web view to a file.",
				"name": "Capture",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Capture WebView as png"
			},
			"ClearFocus": "#1362225380",
			"ClearHistory": {
				"desc": "Clears the page history for Back() and Forward()",
				"name": "ClearHistory",
				"shortDesc": ""
			},
			"Execute": {
				"desc": "Executes JavaScript code inside the WebView and passes the result to the callback",
				"name": "Execute",
				"pNames": ["code", "callback"],
				"pTypes": ["str_jsc", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["all"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Execute JS code inside the WebView"
			},
			"Focus": "#7324472769",
			"Forward": {
				"desc": "Loads the following page from history.",
				"name": "Forward",
				"shortDesc": "Load following page"
			},
			"GetAbsHeight": "#1197564340",
			"GetAbsWidth": "#1128215329",
			"GetHeight": "#2576212953",
			"GetLeft": "#1237814406",
			"GetParent": "#3557841648",
			"GetPosition": "#1605064214",
			"GetTop": "#1981028136",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-WebView",
				"shortDesc": "Returns the control class name"
			},
			"GetUrl": {
				"desc": "Returns the current website url.",
				"name": "GetUrl",
				"retval": "str_url",
				"shortDesc": "Get current url"
			},
			"GetVisibility": "#1672373665",
			"GetWidth": "#1321469131",
			"Gone": "#5528553362",
			"Hide": "#5372805812",
			"IsEnabled": "#1744802827",
			"IsOverlap": "#1785728721",
			"IsVisible": "#1814300863",
			"LoadHtml": {
				"desc": "Loads html code to the WebView.",
				"name": "LoadHtml",
				"pNames": ["html", "baseFolder", "options"],
				"pTypes": ["str_htm", "str_pth", "str_com-AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoRedirect:blocks assert redirect,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser"],
				"shortDesc": "Load html to WebView"
			},
			"LoadUrl": {
				"desc": "Loads an url to the WebView",
				"name": "LoadUrl",
				"pNames": ["url", "options"],
				"pTypes": ["str_url", "str_com-AllowZoom:Allows the user to zoom the page,AutoZoom,Wide:\"force page using “wide” viewport\",FillX/Y,NoActionBar:prevents copy/paste popup,IgnoreErrors,IgnoreSSLErrors,NoApp:prevent app&period;* calls,NoCapture:Disable camera,NoLocate:Disable location sensor,NoLongTouch,NoPause:Dont pause WebView when app in background,NoRedirect:blocks assert redirect,NoScrollBars,Overview:Zoom to full width of page,Progress:Shows a progress indicator when loading,ScrollFade,UseBasicInput:makes softkeyboard useful for html code editors,UseBrowser:Open links in external browser"],
				"shortDesc": "Load url to WebView"
			},
			"Method": "#1023663567",
			"Print": {
				"desc": "Print current page via the builtin android printer dialog.\n\nNote: Available since Android 4.4 KitKat",
				"name": "Print",
				"shortDesc": "Print webpage via anddroid printer dialog"
			},
			"Reload": {
				"desc": "Reloads the current page",
				"name": "Reload",
				"shortDesc": "Reload current page"
			},
			"SetBackAlpha": "#1162431318",
			"SetBackColor": "#3857861627",
			"SetBackGradient": "#7112142192",
			"SetBackGradientRadial": "#1101641465",
			"SetBackground": "#1239127541",
			"SetColorFilter": "#1096996086",
			"SetEnabled": "#1602385882",
			"SetErrorPage": {
				"desc": "Define a url loaded when an error occured.",
				"name": "SetErrorPage",
				"pNames": ["url"],
				"pTypes": ["str_url"],
				"shortDesc": "Define error page"
			},
			"SetMargins": "#1741900074",
			"SetTextZoom": {
				"desc": "Scales the html text by a given factor.",
				"name": "SetTextZoom",
				"pNames": ["zoom"],
				"pTypes": ["num_frc"],
				"shortDesc": "Scales the html text"
			},
			"SetOnConsole": {
				"desc": "Define a callback function which is called when a message was logged to the console.",
				"name": "SetOnConsole",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "callback function",
					"name": "callback",
					"pNames": ["msg"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when message logged to console"
			},
			"SetOnError": {
				"desc": "Define a callback function which is called when an error occured.",
				"name": "SetOnError",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["error"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when an error occured"
			},
			"SetOnUrl": {
				"desc": "Define a callback function which is called when the user clicked a link.",
				"name": "SetOnUrl",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["url"],
					"pTypes": ["str_url"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when link klicked"
			},
			"SetOnProgress": {
				"desc": "Define a callback function which is called when the webpage loading progress changed",
				"name": "SetOnProgress",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["progress"],
					"pTypes": ["num_prc"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when loading progress changed"
			},
			"SetOnTouch": "#2088093920",
			"SetPadding": "#1923105617",
			"SetPosition": "#1425862386",
			"SetRedirect": {
				"desc": "Add a url redirection rule.",
				"name": "SetRedirect",
				"pNames": ["urlFrom", "urlTo"],
				"pTypes": ["str_url", "str_url"],
				"shortDesc": "Add url redirection rule"
			},
			"SetScale": "#1990464376",
			"SetSize": "#1296070870",
			"SetTouchMode": {
				"desc": "Set the control in touch mode.",
				"name": "SetTouchMode",
				"pNames": ["mode"],
				"pTypes": ["bin"],
				"shortDesc": "En/Disable touchmode on the control"
			},
			"SetUserAgent": {
				"desc": "Defines a custom user agent",
				"name": "SetUserAgent",
				"pNames": ["agent"],
				"pTypes": ["str"],
				"shortDesc": "Set custom user agent"
			},
			"SetUserCreds": {
				"desc": "Set login data for websites that require authentication.",
				"name": "SetUserCreds",
				"pNames": ["name", "password"],
				"pTypes": ["str", "str"],
				"shortDesc": "Set authentication/login data"
			},
			"SetVisibility": "#1004824195",
			"Show": "#1243391562",
			"SimulateKey": {
				"desc": "Simulates a key event on an app object.\n\nYou can find the complete list of key names on the [Android Developer Page](https://developer.android.com/reference/android/view/KeyEvent#KEYCODE_0).",
				"name": "SimulateKey",
				"pNames": ["keyName", "modifiers", "pause"],
				"pTypes": ["str", "str-META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON", "num"],
				"shortDesc": "Simulate key event"
			},
			"Tween": "#2114624769"
		}
	},
	"CreateWizard": {
		"abbrev": "wiz",
		"desc": "#CreateWizard.md",
		"name": "CreateWizard",
		"pNames": ["title", "width", "height", "callback", "options"],
		"pTypes": ["str", "num_frc", "num_frc", {
			"desc": "callback function",
			"name": "callback",
			"pNames": ["layout", "page"],
			"pTypes": ["dso-CreateLayout", "num_int"],
			"shortDesc": "callback"
		}, "str_com-AutoCancel|NoCancel,NoTitle,NoFocus,NoDim,NoKeys,TouchModal,NoTouch"],
		"shortDesc": "CreateWizard",
		"subf": {
			"Dismiss": "#1924613953",
			"Finish": {
				"desc": "Indicate that the Wizard is going to finish on the next page.",
				"name": "Finish",
				"shortDesc": "Indicate that wizard finished"
			},
			"GetButtons": {
				"desc": "Returns the list of the three control buttons at the bottom of the wizard.",
				"name": "GetButtons",
				"retval": "lst_obj-[ btnCancel:dso-CreateButton, btnPrev:dso-CreateButton, btnNext:dso-CreateButton ]",
				"shortDesc": "Returns list of wiz control buttons"
			},
			"GetDialog": {
				"desc": "Returns the dialog:dso-\"CreateDialog\" object of the wizard.",
				"name": "GetDialog",
				"retval": "dso-CreateDialog",
				"shortDesc": "Get wiz dialog object"
			},
			"GetLayout": {
				"desc": "Return s the content layout:dso-\"CreateLayout\" object of the wizard.",
				"name": "GetLayout",
				"retval": "dso-CreateLayout",
				"shortDesc": "Get wiz content layout"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"shortDesc": "GetType"
			},
			"Hide": "#5372805812",
			"IsVisible": "#1814300863",
			"Show": "#1243391562"
		}
	},
	"CreateYesNoDialog": {
		"abbrev": "ynd",
		"desc": "The YesNo dialog can be used to let the user confirm a specific action. Its the equivalent to the js confirm function, but it is more customizable. <grey>(and doesn't crash when aborting</grey>",
		"name": "CreateYesNoDialog",
		"pNames": ["message", "options"],
		"pTypes": ["str", "str_com-NoDim,NoFocus,TouchModal"],
		"retval": "dso-YesNoDialog",
		"shortDesc": "Returns a new YesNoDialog object",
		"subf": {
			"AdjustColor": "#1794786072",
			"Dismiss": "#1924613953",
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-YesNoDialog",
				"shortDesc": "Returns the control class name"
			},
			"Hide": "#5372805812",
			"Method": "#1023663567",
			"SetBackColor": {
				"desc": "Changes the background color of the control.",
				"name": "SetBackColor",
				"pNames": ["color", "radius"],
				"pTypes": ["str_col", "num_pxl"],
				"shortDesc": "Change the background color"
			},
			"SetBackground": "#1239127541",
			"SetButtonText": {
				"desc": "Changes the texts of the two Yes/No buttons.",
				"name": "SetButtonText",
				"pNames": ["yes", "no"],
				"pTypes": ["str", "str"],
				"shortDesc": "Change Yes/No button text"
			},
			"SetOnTouch": {
				"desc": "Define a callback function which is called when the user touches one of the buttons, passing either “Yes” or “No” to the callback function",
				"name": "SetOnTouch",
				"pNames": ["callback"],
				"pTypes": [{
					"desc": "Callback",
					"name": "callback",
					"pNames": ["result"],
					"pTypes": ["str-Yes|No"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Called when user selects Yes or No"
			},
			"SetSize": "#1296070870",
			"Show": "#1243391562"
		}
	},
	"CreateZipUtil": {
		"abbrev": "zip",
		"desc": "The ZipUtil is handy for creating, editing and extracting zip files. You can even add files or texts to existing zip files, list their contents and extract single files from them.",
		"name": "CreateZipUtil",
		"pNames": ["mode"],
		"pTypes": ["str"],
		"retval": "dso-ZipUtil",
		"shortDesc": "Returns a new ZipUtil object",
		"subf": {
			"AddFile": {
				"desc": "Adds a file to the zip relative to the zip root.",
				"name": "AddFile",
				"pNames": ["name", "file"],
				"pTypes": ["str:zip path", "str_pth"],
				"shortDesc": "Add file to zip"
			},
			"AddText": {
				"desc": "Adds some text to the zip relative to the zip root.",
				"name": "AddText",
				"pNames": ["name", "text"],
				"pTypes": ["str:zip path", "str"],
				"shortDesc": "Add text to the zip"
			},
			"Close": {
				"desc": "Closes the zip util.",
				"name": "Close",
				"shortDesc": "Close ZipUtil"
			},
			"Create": {
				"desc": "Creates a new zip file.",
				"name": "Create",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Create zip file"
			},
			"CreateDebugKey": {
				"desc": "Creates a Debuk keystore file",
				"name": "CreateDebugKey",
				"pNames": ["file"],
				"pTypes": ["str_pth-debug.keystore"],
				"shortDesc": "Create debug keystore file"
			},
			"CreateKey": {
				"desc": "Creates a user keystore file",
				"name": "CreateKey",
				"pNames": ["file", "password", "name", "organization"],
				"pTypes": ["str_pth-user.keystore", "str", "str", "str"],
				"shortDesc": "Create a user keystore file"
			},
			"Extract": {
				"desc": "Extract a single file from the zip to a gived destination.",
				"name": "Extract",
				"pNames": ["name", "file"],
				"pTypes": ["str:zip path", "str_pth"],
				"shortDesc": "Extract file from zip"
			},
			"GetType": {
				"desc": "Returns the control class name.",
				"name": "GetType",
				"retval": "str-ZipUtil",
				"shortDesc": "Returns the control class name"
			},
			"List": {
				"desc": "Returns a list of the files contained in the zip.",
				"name": "List",
				"pNames": ["path"],
				"pTypes": ["str_pth"],
				"retval": "str_com",
				"shortDesc": "Get contained file list"
			},
			"Open": {
				"desc": "Opens an already existing zip file.",
				"name": "Open",
				"pNames": ["file"],
				"pTypes": ["str_pth"],
				"shortDesc": "Open existing zip"
			},
			"Sign": {
				"desc": "Signs and checks the zip against the keystore file and returns if it is ok.",
				"name": "Sign",
				"pNames": ["fileIn", "fileOut", "keyStore", "password"],
				"pTypes": ["str_pth", "str_pth", "str_pth", "str"],
				"retval": "bin",
				"shortDesc": "Sign and check zip against keystore file"
			},
			"UpdateManifest": {
				"desc": "Updates the zip manifest",
				"name": "UpdateManifest",
				"pNames": ["fileIn", "fileOut", "packageName", "appName", "permissions", "options"],
				"pTypes": ["str_pth", "str_pth", "str", "str", "str_com", "str_com-Launch,Debug"],
				"shortDesc": "Update zip manifest"
			}
		}
	},
	"Debug": {
		"desc": "This function is an app equivalent to console.log(msg) which writes text into a console visible in debug mode “true” or “console”.\n\nSee Also: @SetDebug",
		"name": "Debug",
		"pNames": ["message"],
		"pTypes": ["str"],
		"shortDesc": "Debug messages to the console"
	},
	"DeleteDatabase": {
		"desc": "DeleteDatabase removes a specific database\n\nSee Also: @OpenDatabase",
		"name": "DeleteDatabase",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "Deletes a database"
	},
	"DeleteFile": {
		"desc": "DeleteFile deletes a given file from the filesystem. This makes it hard to restore it!\n\nSee Also: @WriteFile, @RenameFile, @FileExists",
		"name": "DeleteFile",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Deletes a file"
	},
	"DeleteFolder": {
		"desc": "DeleteFolder does the same as DeleteFile but with folders. It recursively removes all files and folders of the given folder and finally deletes it.\n\nSee Also: @MakeFolder, @RenameFolder, @FolderExists",
		"name": "DeleteFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"shortDesc": "Delete a folder"
	},
	"DestroyLayout": {
		"desc": "DestroyLayout destroys a layout and all its contents so it can't be used any more. As a result, all memory occupied by these objects will be released.\n\nSee Also: @CreateLayout, @AddLayout",
		"name": "DestroyLayout",
		"pNames": ["layout"],
		"pTypes": ["dso-CreateLayout"],
		"shortDesc": "Destroy a layout"
	},
	"DisableKeys": {
		"desc": "#DisableKeys.md",
		"name": "DisableKeys",
		"pNames": ["keyList"],
		"pTypes": ["str_com-VOLUME_DOWN,VOLUME_UP,FORWARD,BACK,MENU,ENTER,..."],
		"shortDesc": "Disable specific device keys"
	},
	"DisableTouch": {
		"desc": "Use this method to prevent any user interaction with the app.\nYou could use this for a safe mode for a slideshow.",
		"name": "DisableTouch",
		"pNames": ["disable"],
		"pTypes": ["bin"],
		"shortDesc": "Suppress all touch events"
	},
	"DiscoverBtDevices": {
		"desc": "#DiscoverBtDevices.md",
		"name": "DiscoverBtDevices",
		"pNames": ["filter", "onFound", "onComplete"],
		"pTypes": ["str", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["name", "address"],
			"pTypes": ["str", "str"],
			"shortDesc": "callback"
		}, {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "Search for nearby bluetooth devices"
	},
	"DownloadFile": {
		"desc": "#DownloadFile.md",
		"name": "DownloadFile",
		"pNames": ["source", "destination", "title", "description", "options"],
		"pTypes": ["str", "str_pth", "str", "str", "str_com-NoDialog"],
		"shortDesc": "Download a file with Androids download manager"
	},
	"EnableBackKey": {
		"desc": "#EnableBackKey.md",
		"name": "EnableBackKey",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "EnableBackKey"
	},
	"Error": {
		"desc": "Shows a detailed error message with message, file and line in an asynchroneous dialog. You can also set it to quit the app after the user dismisses the dialog.\n\nSee Also: @Alert",
		"name": "Error",
		"pNames": ["message", "line", "file", "quit"],
		"pTypes": ["str", "num_int", "str_pth", "bin"],
		"shortDesc": "Show an error message"
	},
	"Execute": {
		"desc": "Executes a piece of code asynchroneously to your program. It is designed for interacting with your main app from within a [WebView](CreateWebView.htm).",
		"name": "Execute",
		"pNames": ["js"],
		"pTypes": ["str_jsc"],
		"shortDesc": "Execute js code from your app or a WebWiew"
	},
	"Exit": {
		"desc": "With Exit you can cancel and completely stop the app. You can also forcefully **kill** the app by passing true as first argument.",
		"name": "Exit",
		"pNames": ["kill"],
		"pTypes": ["bin"],
		"shortDesc": "Close and stop the app"
	},
	"ExtExec": {
		"desc": "#ExtExec.md",
		"name": "ExtExec",
		"pNames": ["name", "file", "args", "options"],
		"pTypes": ["str-termux", "str_pth", "str", "str_com-hide"],
		"shortDesc": "Execute a bash script using Termux"
	},
	"ExtractAssets": {
		"desc": "ExtractAssets allows to extract folders and files from your compiled APK to the local storage. But it works for local DroidScript projects as well. When override is false, already existant files will be kept and not overridden.",
		"name": "ExtractAssets",
		"pNames": ["source", "destination", "overwrite", "options"],
		"pTypes": ["str_pth", "str_pth", "bin", "str-DoEvents:extract in background"],
		"shortDesc": "Extract app assets to a local directory"
	},
	"ExtractPlugins": {
		"desc": "ExtractPlugins overrides old plugin versions in the app's private folder with newer versions shipped with the APK.\n\nThis function is for debug purposes to forcefully update the plugins of an app even if the APK version did not change.",
		"name": "ExtractPlugins",
		"shortDesc": "Forcefully update your plugins"
	},
	"FileExists": {
		"desc": "FileExists Checks if a given file exists in your filesystem or not.\n\nSee Also: @WriteFile, @CopyFile, @RenameFile",
		"name": "FileExists",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Checks if the file exists"
	},
	"FolderExists": {
		"desc": "Checks if a given folder exits or not.\n\nSee Also: @MakeFolder, @CopyFolder, @RenameFolder",
		"name": "FolderExists",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Checks if the folder exists"
	},
	"GA": {
		"desc": "#GA.md",
		"name": "GA",
		"pNames": ["command", "[...fields]", "options"],
		"pTypes": ["str-create|send|set|require|provide|remove", "str", "obj"],
		"shortDesc": "Google Analytics"
	},
	"GetAccessibility": {
		"desc": "Returns information about the availability of several accesibility features on the device.",
		"name": "GetAccessibility",
		"retval": "obj-{ enabled:bin, exploreByTouch:bin, screenReader:bin }",
		"shortDesc": "Get accesibility feature availability"
	},
	"GetAccounts": {
		"desc": "Returns a string of all known account names on the device separated with comma ','.\n\nSee Also: @ChooseAccount",
		"name": "GetAccounts",
		"retval": "str_com",
		"shortDesc": "GetAccounts"
	},
	"GetActivities": {
		"desc": "GetActivities returns a list of object of currently running activities.\n\nSee Also: @GetRunningApps, @GetRunningServices",
		"name": "GetActivities",
		"retval": "lst-[{ label:str&comma; packageName:str&comma; className:str }]",
		"shortDesc": "GetActivities"
	},
	"GetAppName": {
		"desc": "Returns the name of the current app.",
		"name": "GetAppName",
		"retval": "str",
		"shortDesc": "Get current app name"
	},
	"GetAppPath": {
		"desc": "Returns the path to the app assets folder. If it's a DroidScript project the path should be “/sdcard/DroidScript/appname” - If it is an apk it is “/Assets”\n\nSee Also: @GetPath, @GetPrivateFolder",
		"name": "GetAppPath",
		"retval": "str_pth",
		"shortDesc": "Get path to app assets"
	},
	"GetBatteryLevel": {
		"desc": "Returns the current battery level of the device in percent.\n\nSee Also: @GetChargeType, @IsCharging",
		"name": "GetBatteryLevel",
		"retval": "num_prc",
		"shortDesc": "Get current battery level"
	},
	"GetBluetoothAddress": {
		"desc": "Returns the hexadecimal Bluetooth address of the device, following the pattern “00&colon;00&colon;00&colon;00&colon;00&colon;00”.\n\nSee Also: @CreateBluetoothSerial",
		"name": "GetBluetoothAddress",
		"retval": "str",
		"shortDesc": "Get the bluetooth address"
	},
	"GetBluetoothName": {
		"desc": "Returns the Bluetooth name of the device.\n\nSee Also: @CreateBluetoothSerial",
		"name": "GetBluetoothName",
		"retval": "str",
		"shortDesc": "Get the bluetooth name"
	},
	"GetBtProfileState": {
		"desc": "Returns the Bluetooth State of a given Bt connection type.\n\nSee Also: @CreateBluetoothSerial",
		"name": "GetBtProfileState",
		"pNames": ["type"],
		"pTypes": ["str-a2dp|headset|gatt|health"],
		"retval": "str-Connected|Disconnected",
		"shortDesc": "Returns Bluetooth type connected state"
	},
	"GetBuildNum": {
		"desc": "GetBuildNum returns the build number of an APK.",
		"name": "GetBuildNum",
		"retval": "num_int",
		"shortDesc": "Get APK build number"
	},
	"GetChargeType": {
		"desc": "Returns the current charge type. If the device isn't charging the result is “None”.\n\nSee Also: @GetBatteryLevel, @IsCharging",
		"name": "GetChargeType",
		"retval": "str-AC|USB|Wireless|None",
		"shortDesc": "Get current charge type"
	},
	"GetClipboardText": {
		"desc": "GetClipboardText returns text that was last copied to the clipboard.\n\nSee Also: @SetClipboardText",
		"name": "GetClipboardText",
		"retval": "str",
		"shortDesc": "Get latest clipboard text"
	},
	"GetCountry": {
		"desc": "Returns the name of the device country (ie. “United Kingdom” or “Deutschland”)\n\nSee Also: @GetCountryCode, \n\nSee Also: @GetLanguage",
		"name": "GetCountry",
		"retval": "str",
		"shortDesc": "Get user country name"
	},
	"GetCountryCode": {
		"desc": "Returns the code of the device country (ie. “GB” or “DE”)\n\nSee Also: @GetCountry, GetLanguageCode",
		"name": "GetCountryCode",
		"retval": "str",
		"shortDesc": "Get users country code"
	},
	"GetData": {
		"desc": "Returns data stored via app.SetData(key, value). All data will be lost when the app is closed.\n\nSee Also: @SetData",
		"name": "GetData",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str",
		"shortDesc": "Retreive saved data"
	},
	"GetDatabaseFolder": {
		"desc": "Returns the path to the database folder of the app. An example pattern is “/data/data/packageName/databases”.\n\nSee Also: @OpenDatabase",
		"name": "GetDatabaseFolder",
		"retval": "str_pth",
		"shortDesc": "Get apps database folder"
	},
	"GetDefaultOrientation": {
		"desc": "Returns the default Orientation of the device. The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa.\n\nSee Also: @SetOrientation, @GetOrientation",
		"name": "GetDefaultOrientation",
		"retval": "str-Portrait|Landscape",
		"shortDesc": "Get devces default orientation"
	},
	"GetDeviceId": {
		"desc": "Returns the alphanumeric ID of the device which is different for each device",
		"name": "GetDeviceId",
		"retval": "str",
		"shortDesc": "Get device ID"
	},
	"GetDisplayHeight": {
		"desc": "Get the display height of the app in pixels. Therefore the android status bar and virtual buttons won't be included to the value.\n\nSee Also: @GetDisplayWidth, @GetScreenHeight",
		"name": "GetDisplayHeight",
		"retval": "num_pxl",
		"shortDesc": "Get apps display height"
	},
	"GetDisplayWidth": {
		"desc": "Get the display width of the app in pixels. Therefore virtual buttons won't be included to the value.\n\nSee Also: @GetDisplayHeight, @GetScreenWidth",
		"name": "GetDisplayWidth",
		"retval": "num_pxl",
		"shortDesc": "Get apps display width"
	},
	"GetDrawerState": {
		"desc": "Returns the current drawer state of a drawer on a given side.\n\nSee Also: @OpenDrawer, @CloseDrawer, @AddDrawer",
		"name": "GetDrawerState",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"retval": "str-Open|Closed",
		"shortDesc": "Get current drawer state"
	},
	"GetDSVersion": {
		"desc": "Returns the current DroidScript version number in the format 0.00.",
		"name": "GetDSVersion",
		"retval": "num_flt",
		"shortDesc": "Get current DS version"
	},
	"GetEnv": {
		"desc": "Returns the value of an environment variable defined on the device.",
		"name": "GetEnv",
		"pNames": ["name"],
		"pTypes": ["str-PATH|..."],
		"retval": "str",
		"shortDesc": "Get environment variable"
	},
	"GetExternalFolder": {
		"desc": "GetExternalFolder returns the path to the external micro sdcard of the device. Normally it is smth like “/storage/extsd” or “/storage/extSdCard”\n\nSee Also: @GetInternalFolder",
		"name": "GetExternalFolder",
		"retval": "str_pth",
		"shortDesc": "Get external sdcard folder"
	},
	"GetFileDate": {
		"desc": "GetFileDate returns a Date object containing the last modified date of a file or folder.",
		"name": "GetFileDate",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"retval": "str",
		"shortDesc": "Get last modified date of a file or folder"
	},
	"GetFileSize": {
		"desc": "GetFileSize returns the size of a file or folder in bytes",
		"name": "GetFileSize",
		"pNames": ["file"],
		"pTypes": ["str"],
		"retval": "num_flt",
		"shortDesc": "Get the size of a file or folder"
	},
	"GetFreeSpace": {
		"desc": "Returns the free space of the internal or external storage in GigaBytes.",
		"name": "GetFreeSpace",
		"pNames": ["mode"],
		"pTypes": ["str-internal|external"],
		"retval": "num_gbt",
		"shortDesc": "Get remaining storage size"
	},
	"GetInstalledApps": {
		"desc": "Returns a list of objects containing informations about installed apps.\n\nSee Also: @GetRunningApps, @GetRunningServices",
		"name": "GetInstalledApps",
		"retval": "lst-[{ packageName:str&comma; className:str&comma; uid:num_int&comma; targetSdkVersion:num_int&comma; dataDir:str_pth&comma; sourceDir:str_pth&comma; publicSourceDir:str_pth&comma; nativeLibraryDir:str_pth }]",
		"shortDesc": "Get data about installed apps"
	},
	"GetIntent": {
		"desc": "Returns an intent object sent to the app.\n\nSee Also: @SendIntent",
		"name": "GetIntent",
		"retval": "obj-{ action:str&comma; type:str&comma; data:str&comma; flags:num_int&comma; extras: { app_intent:str&comma; app_file:str_pth&comma; app_options:str } }",
		"shortDesc": "Get received intent data"
	},
	"GetInternalFolder": {
		"desc": "Get devices internal “/sdcard/” path. Normally it should be “/storage/emulated/legacy”.\n\nSee Also: @GetExternalFolder",
		"name": "GetInternalFolder",
		"retval": "str_pth",
		"shortDesc": "Get internal storage path"
	},
	"GetIPAddress": {
		"desc": "GetIPAddress returns the current network ip address. It should look like “0.0.0.0” which is the default value for disabled internet connection. The individual numbers can have values between 0 and 255.",
		"name": "GetIPAddress",
		"retval": "str",
		"shortDesc": "Get network IP address"
	},
	"GetJoystickName": {
		"desc": "Returns the name of a conected joystick.\n\nSee Also: @GetJoystickState",
		"name": "GetJoystickName",
		"pNames": ["id"],
		"pTypes": ["num_int"],
		"retval": "str",
		"shortDesc": "GetJoystickName"
	},
	"GetJoystickState": {
		"desc": "#GetJoystickState.md",
		"name": "GetJoystickState",
		"pNames": ["id", "key"],
		"pTypes": ["num_int", "str-A|B|C|X|Y|Z|R1|L1|Left|Right|Up|Down|Start|ThumbLeft|ThumbRight|axis-0..9|btn-1..12"],
		"retval": "num",
		"shortDesc": "GetJoystickState"
	},
	"GetKeyboardHeight": {
		"desc": "Returns the height of the device keyboard in pixels. Returns _0_ if the keyboard is hidden.\n\nSee Also: @ShowKeyboard",
		"name": "GetKeyboardHeight",
		"retval": "num_pxl",
		"shortDesc": "Get current keyboard height"
	},
	"GetLanguage": {
		"desc": "GetLanguage returns the name of the devices language (ie. “English” or “Deutsch”).\n%c\n\nSee Also: @GetLanguageCode, @GetCountry, @SetLanguage",
		"name": "GetLanguage",
		"retval": "str",
		"shortDesc": "Get device language"
	},
	"GetAppLanguages": {
		"desc": "Returns the available translation languages specified in your lang.json file.\n\nSee Also: @SetAppLanguage",
		"name": "GetAppLanguages",
		"retval": "lst-[code:str]",
		"shortDesc": "Get translation languages"
	},
	"GetLanguageCode": {
		"desc": "GetLanguageCode returns the user language code (ie&period; “en” or “de”).\n\nSee Also: @GetLanguage, @GetCountryCode",
		"name": "GetLanguageCode",
		"retval": "str",
		"shortDesc": "Get user language code"
	},
	"GetMacAddress": {
		"desc": "Returns the alphanumeric **M**edia-**A**ccess-**C**ontrol address of the device. Style should be “00&colon;00&colon;00&colon;00&colon;00&colon;00”. The individual numbers can have hexadecimal values between 00 and FF.",
		"name": "GetMacAddress",
		"retval": "str",
		"shortDesc": "Get devices MAC address"
	},
	"GetMediaFile": {
		"desc": "Returns a path to an unambiguous media file be like “/storage/emulated/0/Pictures/appName/YYYYMMDD_hhmmSSsss[ext]”. The folder to that file will be created automatically.\n\nSee Also: @CreateImage, @CreateCameraView",
		"name": "GetMediaFile",
		"pNames": ["appName", "ext"],
		"pTypes": ["str", "str"],
		"retval": "str_pth",
		"shortDesc": "Get a path to an unambiguous media file"
	},
	"GetMemoryInfo": {
		"desc": "Returns an object containing informations about the RAM memory.",
		"name": "GetMemoryInfo",
		"retval": "obj-{ avail:num_byt&comma; low:bin&comma; threshold:num_byt&comma; total:num_byt }",
		"shortDesc": "Get RAM memory information"
	},
	"GetMetadata": {
		"desc": "Returns a string list of metadata values contained in an audio file.\n\nSee Also: @CreateMediaPlayer",
		"name": "GetMetadata",
		"pNames": ["file", "keys"],
		"pTypes": ["str_pth", "str_com-album,artist,genre,title,composer,author,duration,bitrate,width,height"],
		"retval": "str_com",
		"shortDesc": "GetMetadata"
	},
	"GetModel": {
		"desc": "Returns the model name of the device.",
		"name": "GetModel",
		"retval": "str",
		"shortDesc": "Get device model name"
	},
	"GetName": {
		"desc": "Returns the name of the APK application. meaning if your app runs in DroidScript, the name will be “DroidScript” as well.",
		"name": "GetName",
		"retval": "str",
		"shortDesc": "Get APK name"
	},
	"GetNotifyId": {
		"desc": "If the app was started by a notification, this function will return the id of that notification.\n\nSee Also: @CreateNotification",
		"name": "GetNotifyId",
		"retval": "str",
		"shortDesc": "Get the caller notification id"
	},
	"GetObjects": {
		"desc": "Returns a map of DroidScript control objects with their id as key.",
		"name": "GetObjects",
		"retval": "lst-[ id:str_oid: control:dso ]",
		"shortDesc": "Get map of created DroidScript objects"
	},
	"GetOptions": {
		"desc": "Returns all current app objects. If ran from inside DroidScript, “remote” is the default value.\n\nSee Also: @SetOptions",
		"name": "GetOptions",
		"retval": "str_com-Portrait,Landscape,<i>NoDom</i>,Game,Remote,Transparent",
		"shortDesc": "Get app options"
	},
	"GetOrientation": {
		"desc": "Returns the current device orientation. The result modes can be “Portrait” if the device width is smaller than the device height, or “Landscape” vice versa.\n\nSee Also: @SetOrientation, @GetDefaultOrientation, @GetRotation",
		"name": "GetOrientation",
		"retval": "str-Portrait|Landscape",
		"shortDesc": "Get current screen orientation"
	},
	"GetOSVersion": {
		"desc": "GetOSVersion returns the API target level  of the android version.",
		"name": "GetOSVersion",
		"retval": "num_int",
		"shortDesc": "Get API target level"
	},
	"GetPackageName": {
		"desc": "Returns the package name of the APK.",
		"name": "GetPackageName",
		"retval": "str",
		"shortDesc": "Get APK package name"
	},
	"GetPairedBtDevices": {
		"desc": "Returns a list of objects containing the name and bluetooth address of paired devices. Note that Bluetooth must be turned on to receive this information.\n\nSee Also: @UnpairBtDevice, @CreateBluetoothSerial, @DiscoverBtDevices",
		"name": "GetPairedBtDevices",
		"retval": "lst_obj-[{ name:str&comma; address:str }]",
		"shortDesc": "Get list of paired bluetooth devices"
	},
	"GetPath": {
		"desc": "Returns the path to the local storage folder of the APK.\n\nSee Also: @GetAppPath, @GetPrivateFolder",
		"name": "GetPath",
		"retval": "str_pth",
		"shortDesc": "Get APK's local storage path"
	},
	"GetPermission": {
		"desc": "GetPermission accepts a list of 'dangerus' classified permissions and returns a list of ungranted permissions in the **callback** function, or in case of only “ExtSDCard” the path URI of the user-selected folder.\n\nSee Also: @CheckPermission",
		"name": "GetPermission",
		"pNames": ["type", "callback"],
		"pTypes": ["str_com-Camera|ExtSDcard|Network|Storage|Overlay|SMS|ExtSDcard|Location|Calendar|Body|Contacts|Record|Phone|Biometric|Accounts|License|usb\\:<\"pid:num\">", {
			"desc": "callback function",
			"name": "callback",
			"pNames": ["ungranted"],
			"pTypes": ["str_com||str_uri"],
			"shortDesc": "callback"
		}],
		"shortDesc": "GetPermission"
	},
	"GetPrivateFolder": {
		"desc": "Returns the path to a folder located in the apps private space which is normally not accessible by other apps or the user himself.\n\nSee Also: @GetAppPath, @GetPath",
		"name": "GetPrivateFolder",
		"pNames": ["name", "options"],
		"pTypes": ["str", "str-external"],
		"retval": "str_pth",
		"shortDesc": "Get path to a private folder"
	},
	"GetResourceId": {
		"desc": "Returns the id of a resource.\n\nSee Also: @LoadPlugin",
		"name": "GetResourceId",
		"pNames": ["name", "options"],
		"pTypes": ["str", "str_com-android"],
		"retval": "str",
		"shortDesc": "Get ID of a resource"
	},
	"GetRingerMode": {
		"desc": "Returns the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”.\n\nSee Also: @SetRingerMode",
		"name": "GetRingerMode",
		"retval": "str-Normal|Vibrate|Silent",
		"shortDesc": "Get current device ringer mode"
	},
	"GetRotation": {
		"desc": "Returns the current rotation of the device around it's Z-Axis in 90 degree steps. The values are relative to the initial orientation of the device on startup.\n\nSee Also: @GetOrientation",
		"name": "GetRotation",
		"retval": "num_deg-0|90|180|270",
		"shortDesc": "Get device rotation"
	},
	"GetRSSI": {
		"desc": "#GetRSSI.md",
		"name": "GetRSSI",
		"retval": "num_int--127..-30",
		"shortDesc": "Get RSSI in dBm"
	},
	"GetRunningApps": {
		"desc": "Returns a list of objects containing info about all currently running apps in the fore- or background.\n\nSee Also: @GetRunningServices, @GetInstalledApps",
		"name": "GetRunningApps",
		"retval": "lst_obj-[{ user:num_int&comma; pid:num_bin&comma; name:str&comma; foreground:bin }]",
		"shortDesc": "Get list of running apps"
	},
	"GetRunningServices": {
		"desc": "Returns a list of objects containing info about all currently running services in the background.\n\nSee Also: @GetRunningApps, @GetInstalledApps",
		"name": "GetRunningServices",
		"retval": "lst_obj-[{ user:num_int&comma; pid:num_bin&comma; name:str }]",
		"shortDesc": "Get list of running services"
	},
	"GetScreenDensity": {
		"desc": "Returns the density of the device's screen.\n\nSee Also: @GetScreenWidth, @GetScreenHeight, @SetDensity",
		"name": "GetScreenDensity",
		"retval": "num_int",
		"shortDesc": "Get the screen density"
	},
	"GetScreenHeight": {
		"desc": "Returns the total screen height of the device in pixels. With the 'Real' **option** softkeys will be included in the value.\n\nSee Also: @GetScreenWidth, @GetScreenDensity",
		"name": "GetScreenHeight",
		"pNames": ["options"],
		"pTypes": ["str_com-Real"],
		"retval": "num_pxl",
		"shortDesc": "Get width of device screen"
	},
	"GetScreenWidth": {
		"desc": "Returns the total screen width of the device in pixels. With the 'Real' **option** softkeys will be included in the value.\n\nSee Also: @GetScreenHeight, @GetScreenDensity",
		"name": "GetScreenWidth",
		"pNames": ["options"],
		"pTypes": ["str_com-Real"],
		"retval": "num_pxl",
		"shortDesc": "Get height of device screen"
	},
	"GetSharedFiles": {
		"desc": "Returns a path list of files shared with the app. If the results were retreived they can't be read an other time, unless they will be shared again.\n\nSee Also: @GetSharedText, @SendFile, @SendText",
		"name": "GetSharedFiles",
		"retval": "lst-[ path:str_pth ]",
		"shortDesc": "Get list of shared files"
	},
	"GetSharedText": {
		"desc": "Returns the value of a shared text. If the result is returned, it cannot be read another time unless it is shared again.\n\nSee Also: @GetSharedFiles, @SendFile, @SendText",
		"name": "GetSharedText",
		"retval": "str",
		"shortDesc": "Get value of shared text"
	},
	"GetSpeechEngines": {
		"desc": "Returns a list of installed tts engines.\n\nSee Also: @TextToSpeech",
		"name": "GetSpeechEngines",
		"retval": "lst-[ engines:str ]",
		"shortDesc": "Get tts engines"
	},
	"GetSpeakerPhone": {
		"desc": "Checks if the speaker is enabled for phone calls. Returns false if no call is active.\n\nSee also: @SetSpeakerPhone.",
		"name": "GetSpeakerPhone",
		"retval": "bin",
		"shortDesc": "Checks if the speaker is enabled"
	},
	"GetSpecialFolder": {
		"desc": "Returns the full path to a special folder commonly used for images, videos, music etc.\n\nSee Also: @GetPath, @GetAppPath, @WriteFile",
		"name": "GetSpecialFolder",
		"pNames": ["name"],
		"pTypes": ["str-DCIM|Pictures|Movies|Downloads|Music"],
		"retval": "str_pth",
		"shortDesc": "Get full path to a special media folder"
	},
	"GetSSID": {
		"desc": "Returns the name (SSID) of the current network the user is connected with. If WiFi is disabled “<unknown ssid>” is returned.\n\nSee Also: @IsWifiEnabled, @SetWifiEnabled, @WifiConnect",
		"name": "GetSSID",
		"retval": "str",
		"shortDesc": "Get WiFi network SSID (name)"
	},
	"GetTextBounds": {
		"desc": "Calculates text dimensions based on a specific control or with default settings",
		"name": "GetTextBounds",
		"pNames": ["txt", "size", "width", "obj"],
		"pTypes": ["str", "num", "num_frc", "dso"],
		"retval": "obj-{ width:num_frc, height:num_frc }",
		"shortDesc": "Calculates text bounds"
	},
	"GetThemeInfo": {
		"desc": "Returns the configuration of the current theme.",
		"name": "GetThemeInfo",
		"retval": "obj-{ baseTheme:str, holo:bin, dark:bin, titleHeight:num_frc, backColor:str_col, dialogColor:str_col, btnColor:str_col, dialogBtnColor:str_col, textColor1:str_col, textColor2:str_col,btnTextColor:str_col, highlightColor:str_col }",
		"shortDesc": "Get theme configuration"
	},
	"GetThumbnail": {
		"desc": "Creates a downscaled copy of an existing image. Pass -1 as width or height to keep the aspect ratio.\n\nSee Also: @CreateImage",
		"name": "GetThumbnail",
		"pNames": ["source", "destination", "width", "height"],
		"pTypes": ["str_pth", "str_pth", "num_pxl", "num_pxl"],
		"shortDesc": "Create downscaled copy of an image"
	},
	"GetTop": {
		"desc": "Returns the upper border distance from the app display to the device screen as height relative float or in pixels with the **px** option.",
		"name": "GetTop",
		"pNames": ["options"],
		"pTypes": ["str_com-px"],
		"retval": "num_frc",
		"shortDesc": "GetTop"
	},
	"GetType": {
		"desc": "Returns the object class name.",
		"name": "GetType",
		"retval": "str-App",
		"shortDesc": "Returns the object class name"
	},
	"GetUser": {
		"desc": "Returns the email-address of the currently active user account.\n\nSee Also: @GetAccounts",
		"name": "GetUser",
		"retval": "str_acc",
		"shortDesc": "Get current user email"
	},
	"GetVersion": {
		"desc": "Returns the app version number of the currently running apk.",
		"name": "GetVersion",
		"retval": "str",
		"shortDesc": "Get apk version number"
	},
	"GetVolume": {
		"desc": "Returns the volume level of a given audio type as a number between 0 and 1. By default the “System” volume is returned.\n\nSee Also: @SetVolume",
		"name": "GetVolume",
		"pNames": ["stream"],
		"pTypes": ["str-alarm|dtmf|music|notification|ring|system|voicecall"],
		"retval": "num_frc",
		"shortDesc": "Get volume of a given audio type"
	},
	"GoToSleep": {
		"desc": "Forces the screen to turn off and puts the device to sleep. (This has the same effect as pressing the power button)\n\nSee Also: @WakeUp",
		"name": "GoToSleep",
		"shortDesc": "Puts the phone into sleep mode"
	},
	"HasSoftNav": {
		"desc": "Checks if the device has a soft navigation bar on the screen.",
		"name": "HasSoftNav",
		"retval": "bin",
		"shortDesc": "Checks if device has soft keys"
	},
	"HideKeyboard": {
		"desc": "Hides the device keyboard if it is currently shown.\n\nSee Also: @ShowKeyboard, @SetOnShowKeyboard",
		"name": "HideKeyboard",
		"shortDesc": "Hide the device keyboard"
	},
	"HideProgress": {
		"desc": "Hides a previously shown progress indicator.\nSee also @ShowProgress.",
		"name": "HideProgress",
		"shortDesc": "Hide progress indicator"
	},
	"HideProgressBar": {
		"desc": "Hides a previously shown progress bar dialog.\nSee also @ShowProgressBar, @UpdateProgressBar.",
		"name": "HideProgressBar",
		"shortDesc": "Hide progress bar dialog"
	},
	"HttpRequest": {
		"desc": "HttpRequest sends a request to a server. baseUrl and path will just be added to one string to get the address.\nMultiple parameters are available using pipes:\n\t“param1=value1|param2=value2”",
		"name": "HttpRequest",
		"pNames": ["type", "baseUrl", "path", "params", "callback", "headers"],
		"pTypes": ["str-GET:retrieve data|POST:submit data|JSON:post json data|PUT:replace target resource|DELETE:deletes the resource|HEAD:omit body", "str_url", "str", "str", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["error", "reply", "status"],
			"pTypes": ["bin", "str", "num_int"],
			"shortDesc": "callback"
		}, "str"],
		"shortDesc": "Send Http request"
	},
	"InIDE": {
		"desc": "InIDE",
		"name": "InIDE",
		"shortDesc": "InIDE"
	},
	"InstallWallpaper": {
		"desc": "Let the user install a device wallpaper located in the 'Wallpaper.js' script in the project root folder.\n\n<premium>\n\nSee also @CreateWallpaper.",
		"name": "InstallWallpaper",
		"pNames": ["packageName", "className"],
		"pTypes": ["str-this", "str-this"],
		"retval": "bin",
		"shortDesc": "Install Wallpaper.js as device wallpaper"
	},
	"InstallApp": {
		"desc": "Starts the installation process of an apk file from your local drive.",
		"name": "InstallApp",
		"pNames": ["apkFile", "callback", "options"],
		"pTypes": ["str_pth", {
			"desc": "callback function",
			"name": "callback",
			"pNames": ["packageName", "status"],
			"pTypes": ["str", "str"],
			"shortDesc": "callback"
		}, "str"],
		"retval": "bin",
		"shortDesc": "Start apk installation process"
	},
	"IsAPK": {
		"desc": "Returns whether current app is an APK or not (case not it's a DroidScript Project).",
		"name": "IsAPK",
		"retval": "bin",
		"shortDesc": "Returns true if ran from apk"
	},
	"IsAppInstalled": {
		"desc": "Checks if an app given by a package name is installed.\n\nSee also: @GetPackageName, @GetInstalledApps",
		"name": "IsAppInstalled",
		"pNames": ["packageName"],
		"pTypes": ["str"],
		"retval": "bin",
		"shortDesc": "Check if package is installed"
	},
	"IsBluetoothEnabled": {
		"desc": "Return whether bluetooth was enabled. \n\nSee Also: @SetBluetoothEnabled",
		"name": "IsBluetoothEnabled",
		"retval": "bin",
		"shortDesc": "Check bluetooth enabled"
	},
	"IsBluetoothOn": {
		"desc": "Checks if bluetooth is enabled and on.\n\nSee Also: @CreateBluetoothSerial, @DiscoverBtDevices",
		"name": "IsBluetoothOn",
		"retval": "bin",
		"shortDesc": "Check if bluetooth is on"
	},
	"IsBtDevicePaired": {
		"desc": "Checks if a given bluetooth device was paired with the user device.\n\nSee Also: @GetPairedBtDevices, @UnpairBtDevice",
		"name": "IsBtDevicePaired",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "bin",
		"shortDesc": "Check bt paired state to other device"
	},
	"IsCharging": {
		"desc": "Checks if phone is currently charging or not.\n\nSee Also: @GetBatteryLevel, @GetChargeType",
		"name": "IsCharging",
		"retval": "bin",
		"shortDesc": "Check whether device is charging"
	},
	"IsChrome": {
		"desc": "Checks if the device is running on ChromeOS.\n\nSee Also: @IsTablet, @IsThings",
		"name": "IsChrome",
		"retval": "bin",
		"shortDesc": "Check if device OS is ChromeOS"
	},
	"IsConnected": {
		"desc": "Checks if the device is connected to any network.\n\nSee Also: @SetWifiEnabled, @WifiConnect, @SetOnWifiChange",
		"name": "IsConnected",
		"retval": "bin",
		"shortDesc": "Check if device is connected to any network"
	},
	"IsDebugging": {
		"desc": "Checks if the app is currently debugging.\nSee also @SetDebug, @Debug",
		"name": "IsDebugging",
		"retval": "bin",
		"shortDesc": "Check whether app is debugging"
	},
	"IsFolder": {
		"desc": "Checks if the passed fs path leads to a folder.\n\nSee Also: @FolderExists, @FileExists",
		"name": "IsFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"retval": "bin",
		"shortDesc": "Check if path leads to a folder"
	},
	"IsKeyboardShown": {
		"desc": "Checks if the device keyboard is currently visible or not.\n\nSee Also: @ShowKeyboard, @HideKeyboard",
		"name": "IsKeyboardShown",
		"retval": "bin",
		"shortDesc": "Check whether device keyboard is shown"
	},
	"IsLocationEnabled": {
		"desc": "Checks if a specific location mode was enabled.\n\nSee Also: @CreateLocator",
		"name": "IsLocationEnabled",
		"pNames": ["mode"],
		"pTypes": ["str-GPS|Network"],
		"retval": "bin",
		"shortDesc": "Check if location method is enabled"
	},
	"IsNavBarOnRight": {
		"desc": "Checks if the Navigation Bar is on the righthand side of the display.",
		"name": "IsNavBarOnRight",
		"retval": "bin",
		"shortDesc": "Check if NavBar is on righthand side"
	},
	"IsNewVersion": {
		"desc": "Checks if the apk version number increased compared to the last time started.",
		"name": "IsNewVersion",
		"retval": "bin",
		"shortDesc": "Check if apk version increased"
	},
	"IsPortrait": {
		"desc": "Checks if the device is in portrait mode.",
		"name": "IsPortrait",
		"retval": "bin",
		"shortDesc": "Check if device is in portrait mode"
	},
	"IsPremium": {
		"desc": "Checks if the user has a DroidScript premium subscription inside the IDE.",
		"name": "IsPremium",
		"retval": "bin",
		"shortDesc": "Check if user has a DroidScript Premium subscription"
	},
	"IsScreenOn": {
		"desc": "Checks if the device screen is currently on.",
		"name": "IsScreenOn",
		"retval": "bin",
		"shortDesc": "Check if device screen is on"
	},
	"IsService": {
		"desc": "Checks if the currently running app instance is a service.",
		"name": "IsService",
		"retval": "bin",
		"shortDesc": "Check id app is a service"
	},
	"IsStarted": {
		"desc": "Checks if the app has finished loading. It will return true after OnStart has returned.",
		"name": "IsStarted",
		"retval": "bin",
		"shortDesc": "Check if app has finished loading"
	},
	"IsTablet": {
		"desc": "Checks if the user device is a tablet.\n\nSee Also: @IsThings, @IsChrome",
		"name": "IsTablet",
		"retval": "bin",
		"shortDesc": "Check if user device is a tablet"
	},
	"IsThings": {
		"desc": "Checks if the OS is AndroidThings.\n\nSee Also: @IsTablet, @IsChrome",
		"name": "IsThings",
		"retval": "bin",
		"shortDesc": "Check if OS is AndroidThings"
	},
	"IsWifiApEnabled": {
		"desc": "Checks if the mobile Wifi Access Point is enabled on the user device.\n\nSee Also: @SetWifiApEnabled",
		"name": "IsWifiApEnabled",
		"retval": "bin",
		"shortDesc": "Check if the mobile Wifi Access Point is enabled"
	},
	"IsWifiEnabled": {
		"desc": "Checks if Wifi is enabled on the user device.\n\nSee Also: @SetWifiEnabled, @SetOnWifiChange, @IsWifiApEnabled",
		"name": "IsWifiEnabled",
		"retval": "bin",
		"shortDesc": "Check if WiFi is enabled"
	},
	"KillApp": {
		"desc": "Kills a running app by its process ID. You can retreive a list of all running apps with their pids using the @GetRunningApps function of the **app** object.",
		"name": "KillApp",
		"pNames": ["pid"],
		"pTypes": ["num_int"],
		"shortDesc": "Kill an app by its pid"
	},
	"GetAppLangCode": {
		"desc": "Convert the user language name to it's 2 character long language code. If no argument is passed, the current language code is returned.\n\nSee Also: @GetLanguage",
		"name": "GetAppLangCode",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str",
		"shortDesc": "Convert language name to its code or get current language code"
	},
	"Language2Code": {
		"desc": "Convert the user language name to it's 2 character long language code. If no argument is passed, the current language code is returned.<deprecated Use @GetAppLangCode instead.>\n\nSee Also: @GetLanguage",
		"name": "Language2Code",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "str",
		"shortDesc": "Convert language name to its code or get current language code"
	},
	"LaunchApp": {
		"desc": "Launches an app if installed or search for it on GooglePlay otherwise.",
		"name": "LaunchApp",
		"pNames": ["packageName", "noPlay"],
		"pTypes": ["str", "bin:dont search"],
		"shortDesc": "Launch or search an app"
	},
	"ListFolder": {
		"desc": "#ListFolder.md",
		"name": "ListFolder",
		"pNames": ["path", "filter", "limit", "options"],
		"pTypes": ["str_pth", "str", "num_int", "str_com-Alphasort:sorts the paths in alphabetical order,FullPath:returns absolute paths to the listed items,RegEx:accepts regexp patterns,Folders:list folders only,Files:list files only"],
		"retval": "lst-[ paths:str_pth ]",
		"shortDesc": "Get a list of files ans folders contained in a specific folder"
	},
	"LoadBoolean": {
		"desc": "Load a saved boolean value to remember varibale values between multiple app starts.\n\nSee also: @SaveBoolean.",
		"name": "LoadBoolean",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "bin", "str_pth"],
		"retval": "bin",
		"shortDesc": "Load saved boolean value"
	},
	"LoadNumber": {
		"desc": "Load a saved number value to remember varibale values between multiple app starts.\n\nSee also: @SaveNumber.",
		"name": "LoadNumber",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "num", "str_pth"],
		"retval": "num",
		"shortDesc": "Load saved boolean value"
	},
	"LoadPlugin": {
		"desc": "#LoadPlugin.md",
		"name": "LoadPlugin",
		"pNames": ["url"],
		"pTypes": ["str_url"],
		"shortDesc": "Load an installed plugin to your app"
	},
	"LoadScript": {
		"desc": "Loads a local JavaScript file asynchronously to your app to make its functionality available in your app.\n\nSee Also: @Script",
		"name": "LoadScript",
		"pNames": ["path", "callback"],
		"pTypes": ["str_pth", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["info"],
			"pTypes": ["obj-{ isTrusted:bin }"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Asynchronously import an external JavaScript file.\nSee Also: @Script"
	},
	"LoadText": {
		"desc": "Load saved text value to remember varibale values between multiple app starts.\n\nSee also: @SaveText.",
		"name": "LoadText",
		"pNames": ["name", "default", "file"],
		"pTypes": ["str", "str", "str_pth"],
		"shortDesc": "Load saved text value"
	},
	"Lock": {
		"desc": "Locks the device.\n\n<red>**Requires Root**</red>\n\nSee Also: @Unlock",
		"name": "Lock",
		"shortDesc": "Lock the device"
	},
	"LockDrawer": {
		"desc": "Make drawer on a specific side unaccessible for the app and the user, hiding it if necessary. You can only unlock it using the @UnlockDrawer method.\n\nSee Also: @AddDrawer",
		"name": "LockDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Hide and lock a drawer"
	},
	"MakeFolder": {
		"desc": "Creates a new folder in the local filesystem.\n\nSee Also: @FolderExists",
		"name": "MakeFolder",
		"pNames": ["folder"],
		"pTypes": ["str_pth"],
		"shortDesc": "Create new folder in the local fs"
	},
	"OpenDatabase": {
		"abbrev": "db",
		"desc": "OpenDatabase creates or opens a local database in which large amounts of data can be stored that can still be queried in a reasonable amount of time.",
		"name": "OpenDatabase",
		"pNames": ["name"],
		"pTypes": ["str"],
		"retval": "dso-Database",
		"shortDesc": "OpenDatabase",
		"subf": {
			"addTransaction": {
				"desc": "addTransaction\n<deprecated Use ExecuteSQL instead>",
				"name": "addTransaction",
				"pNames": ["transaction"],
				"pTypes": ["obj:JS SQLitePluginTransaction"],
				"shortDesc": "addTransaction"
			},
			"close": {
				"desc": "Close the database\n<deprecated Use Close instead>",
				"name": "close",
				"pNames": ["success", "error"],
				"pTypes": [
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["msg"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["msg"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Close the database"
			},
			"Close": {
				"desc": "Close the database",
				"name": "Close",
				"shortDesc": "Close the database"
			},
			"_databaseFeatures": {
				"desc": "databaseFeatures\n<deprecated>",
				"isval": true,
				"name": "databaseFeatures",
				"shortDesc": "databaseFeatures"
			},
			"_dbname": {
				"desc": "dbname\n<deprecated>",
				"isval": true,
				"name": "dbname",
				"shortDesc": "dbname"
			},
			"Delete": {
				"desc": "Delete the database",
				"name": "Delete",
				"shortDesc": "Delete the database"
			},
			"executeSql": {
				"desc": "Executes a SQL query\n<deprecated Use ExecuteSql instead>",
				"name": "executeSql",
				"pNames": ["statement", "params", "success", "error"],
				"pTypes": ["str_sql", "lst", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["tx", "res"],
					"pTypes": ["obj-{ db: { openargs: { name:str, dblocation:str }, dbname:str, name:str }, txlock:bin, readOnly:bin, executes: [{ success:str, qid:num_int, sql:str_sql, params:lst }] }", "obj-{ rows.item(i): { id:num, data:all, data_num:num } }", "obj-{ length:num_int, rowsAffected:num_int, rows.item(i): { id:num, data:all, data_num:num } }"],
					"shortDesc": "callback"
				}, {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["t", "err"],
					"pTypes": ["?", "obj-{ message:str }"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Execute SQL query"
			},
			"ExecuteSql": {
				"desc": "Executes a SQL query",
				"name": "ExecuteSql",
				"pNames": ["sql", "params", "success", "error"],
				"pTypes": ["str_sql", "lst", {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["res"],
					"pTypes": ["obj-{ length:num_int, rowsAffected:num_int, rows.item(i): { id:num, data:all, data_num:num } }"],
					"shortDesc": "callback"
				}, {
					"desc": "callback function",
					"name": "callback",
					"pNames": ["err"],
					"pTypes": ["str"],
					"shortDesc": "callback"
				}],
				"shortDesc": "Execute SQL query"
			},
			"GetName": {
				"desc": "Returns the database name",
				"name": "GetName",
				"retval": "str",
				"shortDesc": "Get database name"
			},
			"GetType": {
				"desc": "Returns the component class name.",
				"name": "GetType",
				"retval": "str-Database",
				"shortDesc": "Returns the component class name"
			},
			"name": {
				"desc": "The database name\n<deprecated use GetName instead>",
				"isval": true,
				"name": "name",
				"retval": "str",
				"shortDesc": "database name"
			},
			"open": {
				"desc": "Opens the database\n<deprecated>",
				"name": "open",
				"pNames": ["success", "error"],
				"pTypes": [
					{
						"desc": "callback function",
						"name": "callback",
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["msg"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "Open database"
			},
			"_openargs": {
				"desc": "openargs\n<deprecated>",
				"isval": true,
				"name": "openargs",
				"shortDesc": "openargs"
			},
			"_openDBs": {
				"desc": "contains DBs\n<deprecated>",
				"isval": true,
				"name": "openDBs",
				"retval": "obj-{ name:obj-Database }",
				"shortDesc": "open DBs"
			},
			"_openError": {
				"desc": "openError\n<deprecated>",
				"name": "openError",
				"pNames": ["err"],
				"pTypes": ["str"],
				"shortDesc": "openError"
			},
			"_openSuccess": {
				"desc": "openSuccess\n<deprecated>",
				"name": "openSuccess",
				"shortDesc": "openSuccess"
			},
			"readTransaction": {
				"desc": "readTransaction\n<deprecated Use ExecuteSql instead>",
				"name": "readTransaction",
				"pNames": ["fn", "error", "success"],
				"pTypes": [
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["tx"],
						"pTypes": ["obj-{ db: { openargs: { name:str, dblocation:str }, dbname:str, name:str }, txlock:bin, readOnly:bin, executes: [{ success:str, qid:num_int, sql:str_sql, params:lst }] }"],
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["err"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["tx", "res"],
						"pTypes": ["obj-{ db: { openargs: { name:str, dblocation:str }, dbname:str, name:str }, txlock:bin, readOnly:bin, executes: [{ success:str, qid:num_int, sql:str_sql, params:lst }] }", "obj-{ rows.item(i): { id:num, data:all, data_num:num } }"],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "ReadTransaction"
			},
			"startNextTransaction": {
				"desc": "startNextTransaction\n<deprecated Use ExecuteSql instead>",
				"name": "startNextTransaction",
				"shortDesc": "startNextTransaction"
			},
			"transaction": {
				"desc": "transaction\n<deprecated Use ExecuteSql instead>",
				"name": "transaction",
				"pNames": ["fn", "error", "success"],
				"pTypes": [
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["tx"],
						"pTypes": ["obj-{ db: { openargs: { name:str, dblocation:str }, dbname:str, name:str }, txlock:bin, readOnly:bin, executes: [{ success:str, qid:num_int, sql:str_sql, params:lst }] }"],
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["err"],
						"pTypes": ["str"],
						"shortDesc": "callback"
					},
					{
						"desc": "callback function",
						"name": "callback",
						"pNames": ["fnc", "res"],
						"pTypes": [
							{
								"desc": "callback function",
								"name": "callback",
								"pNames": ["tx"],
								"pTypes": ["obj-{ db: { openargs: { name:str, dblocation:str }, dbname:str, name:str }, txlock:bin, readOnly:bin, executes: [{ success:str, qid:num_int, sql:str_sql, params:lst }] }"],
								"shortDesc": "callback"
							},
							"obj-{ length:num_int, rowsAffected:num_int, rows.item(i): { id:num, data:all, data_num:num } }"
						],
						"shortDesc": "callback"
					}
				],
				"shortDesc": "transaction"
			}
		}
	},
	"OpenDrawer": {
		"desc": "Opens the drawer layout on the given side with slide animation.\n\nSee Also: @AddDrawer",
		"name": "OpenDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Opens the drawer layout on the given side"
	},
	"OpenFile": {
		"desc": "Allows the user to open a file with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.\n\nSee also: @SendFile.",
		"name": "OpenFile",
		"pNames": ["file", "type", "choose"],
		"pTypes": ["str_pth", "str_mim", "str"],
		"shortDesc": "Allow user to open a file with an external app"
	},
	"OpenUrl": {
		"desc": "Allows the user to open an url with an external application on the device. The **choose** parameter shows the user a custom message in the choose dialog.\n\nSee Also: @CreateWebView, @OpenFile",
		"name": "OpenUrl",
		"pNames": ["url", "type", "choose"],
		"pTypes": ["str_url", "str_mim", "str"],
		"shortDesc": "Allow user to open an url with an external app"
	},
	"PairBtDevice": {
		"desc": "Pairs a bluetooth device with yours.\n\nSee Also: @GetPairedBtDevices, @IsBtDevicePaired, @DiscoverBtDevices",
		"name": "PairBtDevice",
		"pNames": ["address", "callback"],
		"pTypes": ["str", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "PairBtDevice"
	},
	"PlayRingtone": {
		"desc": "Play a specific ringtone type based on the users device settings for ringtones. _Type_ can be “Alarm”, “Notification” or “Ringtone”.",
		"name": "PlayRingtone",
		"pNames": ["type"],
		"pTypes": ["str-Alarm|Notification|Ringtone"],
		"shortDesc": "Play specific ringtone type"
	},
	"PlaySound": {
		"desc": "Plays a sound file stored remotely or on the local filesystem.\n\nSee Also: @CreateMediaPlayer",
		"name": "PlaySound",
		"pNames": ["file"],
		"pTypes": ["str_pth||str_url"],
		"shortDesc": "Plays a local or remote sound file"
	},
	"PreventScreenLock": {
		"desc": "The _PreventScreenLock_ method prevents the device screen from dimming and locking while your app is in the foreground.",
		"name": "PreventScreenLock",
		"pNames": ["mode"],
		"pTypes": ["bin||str-Full:Device can sleep, Screen and Keyboard on|Partial:CPU always on, Screen and Keyboard off"],
		"shortDesc": "Prevent screen from locking after some time"
	},
	"PreventWifiSleep": {
		"desc": "Prevent the device WiFi from powering down.\n\nSee Also: @SetWifiEnabled, @IsWifiEnabled",
		"name": "PreventWifiSleep",
		"shortDesc": "Prevent Wifi from powering down"
	},
	"QueryContent": {
		"desc": "#QueryContent.md",
		"name": "QueryContent",
		"pNames": ["uri", "columns", "select", "args", "sort"],
		"pTypes": ["str_url", "str_com", "str_sql", "lst", "str-coloumn:a coloumn specified in 'coloumns'"],
		"shortDesc": "Queries content from the android content model"
	},
	"Quit": {
		"desc": "Quits the app with showing an @Alert dialog box before exiting. The function will pause the program and exit before any further commands can be executed.",
		"name": "Quit",
		"pNames": ["msg", "title", "options"],
		"pTypes": ["str", "str", "str_com-NoDim,NoFocus"],
		"shortDesc": "Quit the app with showing a dialog and exit after closing"
	},
	"ReadFile": {
		"desc": "Reads a file from the local filesystem and returns its contents.\n\nSee also: @WriteFile",
		"name": "ReadFile",
		"pNames": ["file", "encoding"],
		"pTypes": ["str_pth", "str-US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1|base64"],
		"shortDesc": "Read the content of a local file"
	},
	"RedirectAssets": {
		"desc": "Reads the assets folders “Img”,“Snd”,“Html” and “Misc” from an external folder outside the apk.",
		"name": "RedirectAssets",
		"pNames": ["dir"],
		"pTypes": ["str_pth"],
		"shortDesc": "Read assets from given folder"
	},
	"RemoveDrawer": {
		"desc": "Removes a drawer layout from a given side.\n\nSee also: @AddDrawer",
		"name": "RemoveDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Remove drawer layout from a given side"
	},
	"RemoveLayout": {
		"desc": "Removes a layout added to the app.\n\nSee also: @AddLayout",
		"name": "RemoveLayout",
		"pNames": ["layout"],
		"pTypes": ["dso-CreateLayout"],
		"shortDesc": "RemoveLayout"
	},
	"RenameFile": {
		"desc": "Renames a file on the local filesystem. This method can also be used to move a file to a whole other destination.\n\nSee Also: @WriteFile, @CopyFile, @DeleteFile",
		"name": "RenameFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Rename or move a local file"
	},
	"RenameFolder": {
		"desc": "Renames a folder on the local filesystem. This method can also be used to move a folder to a whole other destination.\n\nSee Also: @MakeFolder, @CopyFolder, @DeleteFolder",
		"name": "RenameFolder",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Rename or move a local folder"
	},
	"ReplaceInFile": {
		"desc": "Replaces all occurances of some text or a regex pattern in a local file with some other text.",
		"name": "ReplaceInFile",
		"pNames": ["file", "txt", "rep", "options"],
		"pTypes": ["str_pth", "str", "str", "str_com"],
		"shortDesc": "Replace text in a local file"
	},
	"SaveBoolean": {
		"desc": "Save a boolean value to remember varibale values between multiple app starts.\n\nSee also: @LoadBoolean.",
		"name": "SaveBoolean",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "bin", "str_pth"],
		"shortDesc": "Save a boolean value across multiple starts"
	},
	"SaveCookies": {
		"desc": "Saves cookies for webviews or html apps.\n\nSee also: @ClearCookies",
		"name": "SaveCookies",
		"shortDesc": "Save web cookies"
	},
	"SaveNumber": {
		"desc": "Save a number value to remember varibale values between multiple app starts and updates.\n\nSee also: @LoadNumber.",
		"name": "SaveNumber",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "num", "str_pth"],
		"shortDesc": "Save a number value across multiple starts"
	},
	"SaveText": {
		"desc": "Save a text value to remember varibale values between multiple app starts and updates.\n\nSee also: @LoadText.",
		"name": "SaveText",
		"pNames": ["name", "value", "file"],
		"pTypes": ["str", "str", "str_pth"],
		"shortDesc": "Save a text value across multiple starts"
	},
	"ScanFile": {
		"desc": "Forces android to scan an image file to appear in the phone's gallery.\n\nSee also: @CreateImage, @CreateCameraView, @ScreenShot.",
		"name": "ScanFile",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Adds media files to phone gallery"
	},
	"ScreenShot": {
		"desc": "Takes a screen shot of your app and saves it to the specified path. Quality is an **option**al percentage value for jpg files defaulting to 95.\n\nSee also: @GetMediaFile",
		"name": "ScreenShot",
		"pNames": ["fileName", "quality"],
		"pTypes": ["str_pth", "num_prc"],
		"shortDesc": "Take a screen shot of your app"
	},
	"Script": {
		"desc": "Loads a local JavaScript file synchronously to your app to make its functionality available in your app.\n\nSee Also: @LoadScript",
		"name": "Script",
		"pNames": ["file"],
		"pTypes": ["str_pth"],
		"shortDesc": "Synchronously import an external JavaScript file"
	},
	"SendFile": {
		"desc": "#SendFile.md",
		"name": "SendFile",
		"pNames": ["file", "subject", "text", "choose"],
		"pTypes": ["str_pth", "str", "str", "str"],
		"shortDesc": "Send a file to a remote target"
	},
	"SendImage": {
		"desc": "#SendImage.md",
		"name": "SendImage",
		"pNames": ["file", "choose"],
		"pTypes": ["str_pth", "str"],
		"shortDesc": "Send an image to a remote target"
	},
	"SendIntent": {
		"desc": "#SendIntent.md",
		"name": "SendIntent",
		"pNames": ["packageName", "className", "action", "category", "uri", "type", "extras", "options", "callback"],
		"pTypes": ["str", "str", "str-android.intent.action.*", "str-android.intent.category.*", "str", "str_mim", "lst-[{ name:str&comma; type:str&comma; value:str }]", "str_com-result", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["resultCode", "data"],
			"pTypes": ["num_int--1|0|1", "obj-{ action:string, type:string, data:string, flags:integer, extras:object }"],
			"shortDesc": "callback"
		}],
		"shortDesc": "SendIntent"
	},
	"SendMail": {
		"desc": "Send an EMail to someune using the default mail application. The passed argumets will be auto-filled. %c\n\nSee Also: @SendSMS, @SendFile",
		"name": "SendMail",
		"pNames": ["address", "subject", "body", "attach", "type", "options"],
		"pTypes": ["str", "str", "str", "str_pth", "str_mim", "str_com-SendTo"],
		"shortDesc": "Open the EMail app and autofill fields"
	},
	"SendMessage": {
		"desc": "Send a message from a Service to the main app.",
		"name": "SendMessage",
		"pNames": ["message"],
		"pTypes": ["str"],
		"shortDesc": "Send message from Service to main app"
	},
	"SendSMS": {
		"desc": "Send an SMS to someone using the default SMS application. The passed argumets will be auto-filled or requested by the SMS app otherwise. %c\n\nSee Also: @SendMail, @SendText, @SendFile",
		"name": "SendSMS",
		"pNames": ["msg", "number"],
		"pTypes": ["str", "str_num"],
		"shortDesc": "Open the SMS app and autofill fields"
	},
	"SendText": {
		"desc": "#SendText.md",
		"name": "SendText",
		"pNames": ["text", "subject", "choose"],
		"pTypes": ["str", "str", "str"],
		"shortDesc": "Share text between apps"
	},
	"SetAlarm": {
		"desc": "Set a time when you want your app to start automatically if it is not already opened. When the alarm is fired, the global _OnAlarm_ event will be fired.",
		"name": "SetAlarm",
		"pNames": ["type", "id", "callback", "time", "interval", "options"],
		"pTypes": ["str-Set|Repeat|Cancel", "str||num_int", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["id"],
			"pTypes": ["str||num_int"],
			"shortDesc": "callback"
		}, "num_dat", "num_mls", "str_com-ExactIdle|Exact:only works for single shot alarms,App:Opens main app if called from a service"],
		"shortDesc": "Set alarm to open your app at a specific time"
	},
	"SetAutoBoot": {
		"desc": "Causes the current running APK or its Service to be started automatically when your device boots.\n\nSee Also: @SetAutoStart",
		"name": "SetAutoBoot",
		"pNames": ["auto"],
		"pTypes": ["string-App|Service|None"],
		"shortDesc": "Autostart APK when device boots"
	},
	"SetAutoStart": {
		"desc": "Set a DroidScript project name which will be launched automatically when DroidScript starts.\n\nSee Also: @SetSharedApp, @SetAutoBoot",
		"name": "SetAutoStart",
		"pNames": ["appName"],
		"pTypes": ["str"],
		"shortDesc": "Autostart DroidScript Project on DS restart"
	},
	"SetAutoWifi": {
		"desc": "Automatically enables the use of the WiFi editor. This method is mainly useful for headless devices like AndroidTV which don't have a DroidScript UI.",
		"name": "SetAutoWifi",
		"pNames": ["auto"],
		"pTypes": ["bin"],
		"shortDesc": "Automatically enable the WiFi editor"
	},
	"SetBackColor": {
		"desc": "Changes the background color of the app.",
		"name": "SetBackColor",
		"pNames": ["color"],
		"pTypes": ["str_col"],
		"shortDesc": "Change the app's background color"
	},
	"SetBluetoothEnabled": {
		"desc": "Enables Bluetooth on the device.\n\nSee Also: @IsBluetoothEnabled, @IsBluetoothOn, @CreateBluetoothSerial",
		"name": "SetBluetoothEnabled",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "Enable Bluetooth on the device"
	},
	"SetClipboardText": {
		"desc": "The SetClipboardText method puts text data on the device clip board. This allows you to copy and paste text between different applications.\n\nSee Also: @GetClipboardText",
		"name": "SetClipboardText",
		"pNames": ["text"],
		"pTypes": ["str"],
		"shortDesc": "Change the device clipboard text"
	},
	"SetData": {
		"desc": "Saves variables until the app closes. All saved data will be lost afterwards. %c\n\nSee Also: @GetData, @ClearData",
		"name": "SetData",
		"pNames": ["name", "value"],
		"pTypes": ["str", "str"],
		"shortDesc": "Save data while app is running"
	},
	"SetDebug": {
		"desc": "#SetDebug.md",
		"name": "SetDebug",
		"pNames": ["switches"],
		"pTypes": ["str_com-console,ds,adb,all"],
		"shortDesc": "Control the debug level of the program"
	},
	"SetDensity": {
		"desc": "Changes the dpi value (dots per inch) that affects the content of any control created afterwards. The smaller the value, the smaller the scaling.\n\nSee Also: @GetScreenDensity",
		"name": "SetDensity",
		"pNames": ["dpi"],
		"pTypes": ["num_int"],
		"shortDesc": "Changes the dpi value for any control creatred afterwards"
	},
	"SetInBackground": {
		"desc": "Set the current service to run in the background.\n\nSee Also: @StartSevice, @SetInForeground.",
		"name": "SetInBackground",
		"shortDesc": "Set services to run in the background"
	},
	"SetInForeground": {
		"desc": "Set the current service to run in the foreground.\n\nSee Also: @StartSevice, SetInBackground",
		"name": "SetInForeground",
		"pNames": ["title", "text", "largeIcon", "smallIcon", "importance"],
		"pTypes": ["str", "str", "str_pth", "str_pth", "str-min|low|default|high|none"],
		"shortDesc": "Set services to run in the foreground"
	},
	"SetJoystickOptions": {
		"desc": "#SetJoystickOptions.md",
		"name": "SetJoystickOptions",
		"pNames": ["options"],
		"pTypes": ["str_com-ForwardKeys:allows the joystick key presses to pass onto the child controls of the main activity"],
		"shortDesc": "Set options for the connected joystick"
	},
	"SetKioskMode": {
		"desc": "Blocks android functionality to keep the rest of your phone safe while others may use your app.\n\n<premium>\n<xfeature>",
		"name": "SetKioskMode",
		"pNames": ["mode", "enable", "options"],
		"pTypes": ["str_com-Power,Status,Nav,NavRight,LockTask:COSU kiosk,Pin:task un-/pinning", "bin", "str_com-Black,Tasks:prevents recent tasks button working"],
		"shortDesc": "Blocks android functionality outside your app"
	},
	"SetAppLanguage": {
		"desc": "Loads the current language code from the lang.json file in your project root folder. Make sure you use the [standard 2 letter language codes](http://www.loc.gov/standards/iso639-2/php/code_list.php).\n\nSee Also: @GetAppLanguages",
		"name": "SetAppLanguage",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "Load the language code from lang.json"
	},
	"SetLanguage": {
		"desc": "Loads the current language code from the lang.json file in your project root folder. Make sure you use the [standard 2 letter language codes](http://www.loc.gov/standards/iso639-2/php/code_list.php).<deprecated Use @SetAppLanguage instead>\n\nSee Also: @GetLanguage",
		"name": "SetLanguage",
		"pNames": ["name"],
		"pTypes": ["str"],
		"shortDesc": "Load the language code from lang.json"
	},
	"SetMenu": {
		"desc": "Set the app menu fields. When a menu entry is touched, the global _OnMenu_ event will be called.\n\nSee Also: @ShowMenu",
		"name": "SetMenu",
		"pNames": ["list", "iconPath"],
		"pTypes": ["str_com", "str_pth"],
		"shortDesc": "Set app menu"
	},
	"SetMargins": {
		"desc": "Set the default margins settings for controls",
		"name": "SetMargins",
		"pNames": ["left", "top", "right", "bottom", "mode"],
		"pTypes": ["num", "num", "num", "num_frc", "str-px|sp|dip|mm|pt"],
		"shortDesc": "Set default margins"
	},
	"SetMockLocation": {
		"desc": "Emulates a GPS location on the device.\n\n<premium>",
		"name": "SetMockLocation",
		"pNames": ["lat", "lng", "accuracy"],
		"pTypes": ["num", "num", "num"],
		"shortDesc": "Emulate GPS location"
	},
	"SetNavBarColor": {
		"desc": "Change the android NavBar color\n\n<premium>",
		"name": "SetNavBarColor",
		"pNames": ["color"],
		"pTypes": ["str_col"],
		"shortDesc": "Set NavBar color"
	},
	"SetOnBroadcast": {
		"desc": "Define a callback function for incoming Broadcast messages.\nYou can find [a list of broadcasts available for android SDK ver. 28 here](https://chromium.googlesource.com/android\\_tools/+/refs/heads/master/sdk/platforms/android-28/data/broadcast\\_actions.txt)\n\n\nSee also: @Broadcast",
		"name": "SetOnBroadcast",
		"pNames": ["callback", "action"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["type", "msg"],
			"pTypes": ["str", "str"],
			"shortDesc": "callback"
		}, "str"],
		"shortDesc": "Called on incoming Broadcasts"
	},
	"SetOnDebug": {
		"desc": "Define a callback function for debug messages.\n\nSee also: @Debug, @SetDebug",
		"name": "SetOnDebug",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "Called on app debug messages"
	},
	"SetOnError": {
		"desc": "Define a callback function to catch thrown errors messages.\n\nSee also: @Error",
		"name": "SetOnError",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["error"],
			"pTypes": ["str"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Called on thrown JS errors"
	},
	"SetOnKey": {
		"desc": "#SetOnKey.md",
		"name": "SetOnKey",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["action", "name", "keycode", "extrakeys"],
			"pTypes": ["str-DOWN|UP", "str-ENTER,VOLUME_DOWN,VOLUME_UP,BACK,MENU,...", "num_int", "str-Shift,Ctrl,Alt,Meta"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Catch key events fired in your app"
	},
	"SetOnShowKeyboard": {
		"desc": "Define a callback function to detect when keyboard visible state has changed.\n\nSee Also: @ShowKeyboard, @HideKeyboard",
		"name": "SetOnShowKeyboard",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["shown"],
			"pTypes": ["bin"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Called on keyboard visibility changes"
	},
	"SetOnWifiChange": {
		"desc": "Define a callback function to detect when the WiFi connected state has changed. The **state** parameter can be “CONNECTING”, “CONNECTED”, or “DISCONNECTED”. The WiFi ssid is passed on “CONNECTED” only.\n\nSee Also: @WifiConnect, @WifiScan",
		"name": "SetOnWifiChange",
		"pNames": ["callback"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["state", "ssid"],
			"pTypes": ["str-CONNECTING|CONNECTED|DISCONNECTED", "str"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Called on WiFi connected state changes"
	},
	"SetOptions": {
		"desc": "Define some global options for the app.\n\nSee Also: @GetOptions",
		"name": "SetOptions",
		"pNames": ["options"],
		"pTypes": ["str_com-UseBrowser,NoKeys|ShowKeys,NoThemeAlerts,IgnoreSslErrors,TouchModal,NoTouch,NoFocus,Secure,ShowLocked,WakeScreen,ScreenOn"],
		"shortDesc": "Define global app options"
	},
	"SetOrientation": {
		"desc": "Set the display orientation to a fixed value. You can unlock it again passing “Default” as **orientation**.\n\nSee Also: @GetOrientation",
		"name": "SetOrientation",
		"pNames": ["orient", "callback"],
		"pTypes": ["str-Default|Landscape|ReverseLandscape|Portrait|ReversePortrait", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "Fix display orientation"
	},
	"SetPosition": {
		"desc": "Change the main app's position and size. Mostly used for transparent apps.",
		"name": "SetPosition",
		"pNames": ["left", "top", "width", "height", "options"],
		"pTypes": ["num_frc", "num_frc", "num_frc", "num_frc", "str_com-px"],
		"shortDesc": "Change app position and size"
	},
	"SetPriority": {
		"desc": "Changes the GUI thread priority.",
		"name": "SetPriority",
		"pNames": ["level"],
		"pTypes": ["str-Low|Medium|High"],
		"shortDesc": "Change GUI thread priority"
	},
	"SetRingerMode": {
		"desc": "Change the current ringer mode of the device which can be “Normal”, “Vibrate” or “Silent”.\n\nSee Also: @GetRingerMode",
		"name": "SetRingerMode",
		"pNames": ["mode"],
		"pTypes": ["str-Normal|Vibrate|Silent"],
		"shortDesc": "Set current device ringer mode"
	},
	"SetScreenBrightness": {
		"desc": "Change the screen brightness to a value between 0 and 1, where 0 is the lowest and 1 the highest possible brightness value.",
		"name": "SetScreenBrightness",
		"pNames": ["level"],
		"pTypes": ["num_frc"],
		"shortDesc": "Change screen brightness"
	},
	"SetScreenMode": {
		"desc": "Changes the screen mode of your application. If null is passed, the [app menu](SetMenu.htm) will be dismissed. When called, the global OnConfig function will be called (if defined).",
		"name": "SetScreenMode",
		"pNames": ["mode"],
		"pTypes": ["str-Default|Normal|Full|Game"],
		"shortDesc": "SetScreenMode"
	},
	"SetSharedApp": {
		"desc": "Define a DroidScript Project which will be automatically started when DS received shared data. Check out the 'Shared Data' sample in the DS samples section.\n\nSee Also: @SetAutoStart",
		"name": "SetSharedApp",
		"pNames": ["name"],
		"pTypes": ["str-AppName"],
		"shortDesc": "Auto-Launch Project when shared data received"
	},
	"SetSpeakerPhone": {
		"desc": "En/Disables the speaker for phone calls.\n\nSee also: @GetSpeakerPhone.",
		"name": "SetSpeakerPhone",
		"pNames": ["on"],
		"pTypes": ["bin"],
		"shortDesc": "En/Disable speaker for phone calls"
	},
	"SetStatusBarColor": {
		"desc": "Change the android status bar color\n\n<premium>",
		"name": "SetStatusBarColor",
		"pNames": ["color"],
		"pTypes": ["str_col"],
		"shortDesc": "Set status bar color"
	},
	"SetTextSize": {
		"desc": "Set the default text size setting for controls",
		"name": "SetTextSize",
		"pNames": ["size", "mode"],
		"pTypes": ["num", "str-px|dip|sp|mm|pt|pl:scales text in proportion with device resolution|ps:scales text in proportion with device resolution"],
		"shortDesc": "Set default text size"
	},
	"SetTheme": {
		"desc": "Change the theme of your app to any created [Theme Object](CreateTheme.htm). The theme will only apply to objects created after the theme was set. You typically need to recreate all your controls or restart the app to apply the new theme.\n\n<premium>",
		"name": "SetTheme",
		"pNames": ["theme"],
		"pTypes": ["dso-CreateTheme"],
		"shortDesc": "Change the theme of your app"
	},
	"SetUserAgent": {
		"desc": "Change the user agent for html apps. For more details [ask Wikipedia](https://en.wikipedia.org/wiki/User_agent).",
		"name": "SetUserAgent",
		"pNames": ["agent"],
		"pTypes": ["str"],
		"shortDesc": "Change the user agent"
	},
	"SetUserCreds": {
		"desc": "Set user credentials in an html app for websites that require user login.",
		"name": "SetUserCreds",
		"pNames": ["name", "password"],
		"pTypes": ["str", "str"],
		"shortDesc": "Set user credentials"
	},
	"SetVolume": {
		"desc": "Set the volume of a given volume type as a number between 0 and 1.\n\nSee Also: @GetVolume",
		"name": "SetVolume",
		"pNames": ["stream", "level", "options"],
		"pTypes": ["str-Alarm|DTMF:Dual Tone Multi-Frequency|Music|Notification|Ring|System|Voicecall", "num_frc", "str_com-ShowUI"],
		"shortDesc": "Change volume of a given audio type"
	},
	"SetWifiApEnabled": {
		"desc": "#SetWifiApEnabled.md",
		"name": "SetWifiApEnabled",
		"pNames": ["enable", "ssid", "key"],
		"pTypes": ["bin", "str", "str"],
		"shortDesc": "En/Disable the mobile Wifi Access Point of the device"
	},
	"SetWifiEnabled": {
		"desc": "En/Disable Wifi on the device.\n\nSee Also: @SetWifiEnabled, @IsWifiApEnabled, @WifiScan",
		"name": "SetWifiEnabled",
		"pNames": ["enable"],
		"pTypes": ["bin"],
		"shortDesc": "En/Disable Wifi on the device"
	},
	"ShowCheckList": {
		"abbrev": "ckl",
		"desc": "The check list provides a similar functionality to the “Multi” [ListDiaog](CreateListDialog.htm), although you can adjust its initial check states with an object structure.",
		"name": "ShowCheckList",
		"pNames": ["title", "list", "callback", "width", "height", "options"],
		"pTypes": ["str", "str-title:str\\:checked:bin||obj-{ title:str, check:bin }", {
			"desc": "callback function",
			"name": "callback",
			"pNames": ["data"],
			"pTypes": ["obj-{ title:str, checked:bin }"],
			"shortDesc": "callback"
		}, "num_frc", "num_frc", "str-sun-moon"],
		"retval": "dso-CheckList",
		"shortDesc": "Shows a CheckList"
	},
	"ShowDebug": {
		"desc": "Show/Hide the debug console as overlay in your app, after calling @CreateDebug.\n\nSee Also: @Debug",
		"name": "ShowDebug",
		"pNames": ["show"],
		"pTypes": ["bin"],
		"shortDesc": "Show the in-app debug console"
	},
	"ShowKeyboard": {
		"desc": "Shows the keyboard on a focussed control.\n\nSee Also: @HideKeyboard",
		"name": "ShowKeyboard",
		"pNames": ["obj"],
		"pTypes": ["dso"],
		"retval": "bin",
		"shortDesc": "Show keyboard on a focussed control"
	},
	"ShowMenu": {
		"desc": "Show the in-app menu. When a menu entry is touched, the _OnMenu_ event will be called.\n\nSee Also: @SetMenu",
		"name": "ShowMenu",
		"shortDesc": "Show the in-app menu"
	},
	"ShowPopup": {
		"desc": "Shows a simple popup message on the screen. It automatically disappears after about 5 secods or after an even shorter time if you pass the “Short” **option**, or when the user touches the screen.",
		"name": "ShowPopup",
		"pNames": ["message", "options"],
		"pTypes": ["str", "str_com-Bottom,Short|Long"],
		"shortDesc": "Show a popup message"
	},
	"ShowProgress": {
		"desc": "Shows a rotating progress circle indicating that something happens and that the user should keep his extremities with him until the process completed.",
		"name": "ShowProgress",
		"pNames": ["message", "options"],
		"pTypes": ["str", "str_com-NoDim:Don't darken background,NonModal:allow background touch,Solid:shows solid background behind spinner"],
		"shortDesc": "Show a progress indicator"
	},
	"ShowProgressBar": {
		"desc": "Shows a dialog with a bar indicating the current progress of a certain thing.\n\nSee Also: @UpdateProgressBar, @HideProgressBar",
		"name": "ShowProgressBar",
		"pNames": ["title", "percent", "options"],
		"pTypes": ["str", "num_prc", "str_com-Light"],
		"shortDesc": "Show a progress bar dialog"
	},
	"ShowTextDialog": {
		"desc": "Shows a text input dialog with a title to allow the user to input some text.",
		"name": "ShowTextDialog",
		"pNames": ["title", "default", "callback"],
		"pTypes": ["str", "str", {
			"desc": "Callback",
			"name": "callback",
			"pNames": ["text"],
			"pTypes": ["str"],
			"shortDesc": "callback"
		}],
		"shortDesc": "Show a text input dialog"
	},
	"ShowTip": {
		"desc": "Shows a tooltip message on the screen.",
		"name": "ShowTip",
		"pNames": ["message", "left", "top", "timeOut", "options"],
		"pTypes": ["str", "num_frc", "num_frc", "num_mls", "str_com-Down"],
		"shortDesc": "Shows a tooltip message on the screen"
	},
	"SimulateDrag": {
		"desc": "Simulates a drag event on an app object in a scrollable container.",
		"name": "SimulateDrag",
		"pNames": ["obj", "x1", "y1", "x2", "y2", "step", "pause"],
		"pTypes": ["dso", "num_frc", "num_frc", "num_frc", "num_frc", "num", "num"],
		"shortDesc": "Simulates a drag event on an app object"
	},
	"SimulateKey": {
		"desc": "Simulates a key event on an app object.\n\nYou can find the complete list of key names on the [Android Developer Page](https://developer.android.com/reference/android/view/KeyEvent#KEYCODE_0)",
		"name": "SimulateKey",
		"pNames": ["obj", "keyName", "modifiers", "pause"],
		"pTypes": ["dso", "str", "str-META_META_ON,META_RIGHT_ON,NUM_LOCK_ON,SCROLL_LOCK_ON,SHIFT_LEFT_ON,SHIFT_MASK,SHIFT_ON,SHIFT_RIGHT_ON,SYM_ON", "num"],
		"shortDesc": "Simulates a key event on an app object"
	},
	"SimulateScroll": {
		"desc": "Simulates a scroll event on a scrollable app object.",
		"name": "SimulateScroll",
		"pNames": ["obj", "x", "y", "dx", "dy", "count", "fling"],
		"pTypes": ["dso", "num_frc", "num_frc", "num_frc", "num_frc", "num", "num"],
		"shortDesc": "Simulates a scroll event on a scrollable app object"
	},
	"SimulateTouch": {
		"desc": "Simulates a touch event on a rouchable control.",
		"name": "SimulateTouch",
		"pNames": ["obj", "x", "y", "dir"],
		"pTypes": ["dso", "num_frc", "num_frc", "str-Down|Move|Up"],
		"shortDesc": "Simulate a touch event on a rouchable control"
	},
	"Start": {
		"desc": "Starts your DS app in an html project. Call it in the document.onload function in order to initialize DroidScript and execute your OnStart() function.",
		"name": "Start",
		"shortDesc": "Start your DS app in an html project"
	},
	"StartApp": {
		"desc": "Starts an app in a new window. **Note:** This function does only work in APKs because in the IDE your app is already running.\n\nSee Also: @StopApp",
		"name": "StartApp",
		"pNames": ["file", "options", "intent"],
		"pTypes": ["str_pth", "str_com-Portrait|Landscape,Transparent,<i>NoDom</i>,Debug:start app in debug mode,Game:runs in GameView mode|remote", "str-{ action:str&comma; type:str&comma; data:obj&comma; extras:obj }"],
		"shortDesc": "Starts an app in a new window"
	},
	"StartDebugServer": {
		"desc": "Starts a debug server which can be used to debug your app on headless devices.\n\nSee Also: @StopDebugServer",
		"name": "StartDebugServer",
		"shortDesc": "Start remote debug server"
	},
	"StartService": {
		"desc": "Starts a service which runs parallel to your app.\n\nSee Also: @StopService.",
		"name": "StartService",
		"pNames": ["packageName", "className"],
		"pTypes": ["str", "str"],
		"shortDesc": "Starts a parallel service"
	},
	"StopApp": {
		"desc": "Stops an app started via @StartApp.",
		"name": "StopApp",
		"pNames": ["name"],
		"pTypes": ["str_pth"],
		"shortDesc": "Stop an app started via @StartApp"
	},
	"StopDebugServer": {
		"desc": "Stops a running debug server.\n\nSee Also: @StartDebugServer",
		"name": "StopDebugServer",
		"shortDesc": "Stop a running debug server"
	},
	"StopService": {
		"desc": "Stops a service started via @StartService.",
		"name": "StopService",
		"shortDesc": "Stops a running app service"
	},
	"SysExec": {
		"desc": "Executes a shell command on the android shell. **NOTE:** You have to add a '`exit`' command at the end of your script because the shell does not terminate automatically after finishing.\n\nSee Also: @ExtExec",
		"name": "SysExec",
		"pNames": ["command", "options", "maxRead", "timeout"],
		"pTypes": ["str", "str-log:logs output to console,noread:dont read result (just execute),sh|su", "num", "num_sec"],
		"retval": "str",
		"shortDesc": "Execute a shell command on the android shell"
	},
	"TextToSpeech": {
		"desc": "#TextToSpeech.md",
		"name": "TextToSpeech",
		"pNames": ["text", "pitch", "rate", "callback", "stream", "locale", "engine"],
		"pTypes": ["str", "num", "num", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}, "str-music", "str", "str"],
		"shortDesc": "Audiolize text"
	},
	"ToBack": {
		"desc": "Hides the app but continue running it in the background. If called, the global _OnPause_ event will be fired and if reshown, _OnResume_ is fired.\n\nSee Also: @ToFront",
		"name": "ToBack",
		"shortDesc": "Put the app in the background"
	},
	"ToFront": {
		"desc": "Brings the app back to the foreground.\n\nSee Also: @ToBack.",
		"name": "ToFront",
		"shortDesc": "Bring your app to the foreground"
	},
	"Translate": {
		"desc": "Translates “Ok” and “Cancel” buttons created after this method to the passed strings.",
		"name": "Translate",
		"pNames": ["Ok", "Cancel"],
		"pTypes": ["str", "str"],
		"shortDesc": "Translate “Ok” and “Cancel” buttons"
	},
	"Unlock": {
		"desc": "Unlocks the device.\n\n<red>**Requires Root**</red>\n\nSee Also: @Lock",
		"name": "Unlock",
		"shortDesc": "Unlocks the device"
	},
	"UnlockDrawer": {
		"desc": "Unlocks a locked drawer.\nSee Also @LockDrawer, @AddDrawer",
		"name": "UnlockDrawer",
		"pNames": ["side"],
		"pTypes": ["str-left|right"],
		"shortDesc": "Unlock a locked drawer"
	},
	"UnpairBtDevice": {
		"desc": "Unpairs a paired Bluetooth device by its bt address. The _callback_ argument is called when the device was successfully unpaired.\n\nSee Also: @PairBtDevice, @GetPairedBtDevices, @DiscoverBtDevices, @CreateBluetoothSerial",
		"name": "UnpairBtDevice",
		"pNames": ["address", "callback"],
		"pTypes": ["str", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "Unpair a paired Bluetooth device"
	},
	"UnzipFile": {
		"desc": "Extracts the contents of a zip file to a given target folder.\n\nSee Also: @ZipFolder, @ZipFile",
		"name": "UnzipFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Unzip a zip file"
	},
	"UpdateProgressBar": {
		"desc": "Updates the progress percentage of a ProgressBar.\nSee Also: @ShowProgressBar, @HideProgressBar.",
		"name": "UpdateProgressBar",
		"pNames": ["percent"],
		"pTypes": ["num_prc"],
		"shortDesc": "Update the ProgressBar percentage"
	},
	"UploadFile": {
		"desc": "Uploads a file to a server.",
		"name": "UploadFile",
		"pNames": ["url", "file", "name", "callback"],
		"pTypes": ["str_url", "str_pth", "str", {
			"desc": "Callback",
			"name": "callback",
			"shortDesc": "callback"
		}],
		"shortDesc": "Uploads a file to a server"
	},
	"Uri2Path": {
		"desc": "Decodes a URI encoded string.\n\nSee Also: @SetOnError",
		"name": "Uri2Path",
		"pNames": ["uri"],
		"pTypes": ["str_uri"],
		"retval": "str",
		"shortDesc": "Decode a URI encoded string"
	},
	"Vibrate": {
		"desc": "Makes the device vibrate in a specified pattern in millisecond values:\n“pause:num\\_mls,play:num\\_mls,pause:num\\_mls,play:num\\_mls,...”",
		"name": "Vibrate",
		"pNames": ["pattern"],
		"pTypes": ["str_com"],
		"shortDesc": "Vibrate device in a pattern"
	},
	"Wait": {
		"desc": "#Wait.md",
		"name": "Wait",
		"pNames": ["seconds"],
		"pTypes": ["num_sec"],
		"shortDesc": "Perform a synchronous delay"
	},
	"WakeUp": {
		"desc": "Forces the screen to turn on the screen. (This has the same effect as pressing the power button in sleep mode)\n\nSee Also: @GoToSleep",
		"name": "WakeUp",
		"shortDesc": "Wake the screen up"
	},
	"WifiConnect": {
		"desc": "Connect to a WiFi network by specifying the ssid and a password. See Also: @WifiScan, @SetOnWifiChange, @SetWifiApEnabled",
		"name": "WifiConnect",
		"pNames": ["ssid", "key"],
		"pTypes": ["str", "str"],
		"shortDesc": "Connect to a WiFi network"
	},
	"WifiScan": {
		"desc": "Scans the surroundings for any available Wifi networks.",
		"name": "WifiScan",
		"pNames": ["callback", "options"],
		"pTypes": [{
			"desc": "Callback",
			"name": "callback",
			"pNames": ["ssids"],
			"pTypes": ["str_pip||lst"],
			"shortDesc": "callback"
		}, "str-detail"],
		"shortDesc": "Scan for any available Wifi networks"
	},
	"WriteFile": {
		"desc": "Writes text to a local file.\n\nSee Also: @ReadFile.",
		"name": "WriteFile",
		"pNames": ["file", "text", "mode", "encoding"],
		"pTypes": ["str_pth", "str", "str-Append|ASCII", "str-US-ASCII|UTF-8|UTF-16|UTF-16BE|UTF-16LE|windows-1252|ISO-8859-1:Latin-1"],
		"shortDesc": "Write text to a local file"
	},
	"ZipFile": {
		"desc": "Compresses a local file to a zip file.\n\nSee Also: @ZipFolder",
		"name": "ZipFile",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Compress a file to zip"
	},
	"ZipFolder": {
		"desc": "Recursively compresses a local folder to a zip file.\n\nSee Also: @ZipFile, @UnzipFile",
		"name": "ZipFolder",
		"pNames": ["source", "destination"],
		"pTypes": ["str_pth", "str_pth"],
		"shortDesc": "Compress a folder to zip"
	}
}